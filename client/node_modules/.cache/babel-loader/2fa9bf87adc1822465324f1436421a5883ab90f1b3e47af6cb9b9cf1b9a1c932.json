{"ast":null,"code":"\"use client\";\n\n// src/use-snippet.ts\nimport { snippet } from \"@nextui-org/theme\";\nimport { mapPropsVariants } from \"@nextui-org/system\";\nimport { useDOMRef, filterDOMProps } from \"@nextui-org/react-utils\";\nimport { clsx, dataAttr } from \"@nextui-org/shared-utils\";\nimport { useClipboard } from \"@nextui-org/use-clipboard\";\nimport { useFocusRing } from \"@react-aria/focus\";\nimport { useMemo, useCallback, useRef } from \"react\";\nfunction useSnippet(originalProps) {\n  const [props, variantProps] = mapPropsVariants(originalProps, snippet.variantKeys);\n  const {\n    ref,\n    as,\n    children,\n    symbol = \"$\",\n    classNames,\n    timeout,\n    copyIcon,\n    checkIcon,\n    codeString,\n    disableCopy = false,\n    disableTooltip = false,\n    hideCopyButton = false,\n    autoFocus = false,\n    hideSymbol = false,\n    onCopy: onCopyProp,\n    tooltipProps: userTooltipProps = {},\n    copyButtonProps: userButtonProps = {},\n    className,\n    ...otherProps\n  } = props;\n  const Component = as || \"div\";\n  const shouldFilterDOMProps = typeof Component === \"string\";\n  const tooltipProps = {\n    offset: 15,\n    delay: 1e3,\n    content: \"Copy to clipboard\",\n    color: originalProps == null ? void 0 : originalProps.color,\n    isDisabled: props.disableCopy,\n    ...userTooltipProps\n  };\n  const domRef = useDOMRef(ref);\n  const preRef = useRef(null);\n  const {\n    copy,\n    copied\n  } = useClipboard({\n    timeout\n  });\n  const isMultiLine = children && Array.isArray(children);\n  const {\n    isFocusVisible,\n    isFocused,\n    focusProps\n  } = useFocusRing({\n    autoFocus\n  });\n  const slots = useMemo(() => snippet({\n    ...variantProps\n  }), [...Object.values(variantProps)]);\n  const symbolBefore = useMemo(() => {\n    if (!symbol || typeof symbol !== \"string\") return symbol;\n    const str = symbol.trim();\n    return str ? `${str} ` : \"\";\n  }, [symbol]);\n  const baseStyles = clsx(classNames == null ? void 0 : classNames.base, className);\n  const getSnippetProps = useCallback(() => ({\n    className: slots.base({\n      class: baseStyles\n    }),\n    ...filterDOMProps(otherProps, {\n      enabled: shouldFilterDOMProps\n    })\n  }), [slots, baseStyles, isMultiLine, otherProps]);\n  const onCopy = useCallback(() => {\n    var _a;\n    if (disableCopy) {\n      return;\n    }\n    let stringValue = \"\";\n    if (typeof children === \"string\") {\n      stringValue = children;\n    } else if (Array.isArray(children)) {\n      children.forEach(child => {\n        var _a2, _b;\n        const childString = typeof child === \"string\" ? child : (_b = (_a2 = child == null ? void 0 : child.props) == null ? void 0 : _a2.children) == null ? void 0 : _b.toString();\n        if (childString) {\n          stringValue += childString + \"\\n\";\n        }\n      });\n    }\n    const valueToCopy = codeString || stringValue || ((_a = preRef.current) == null ? void 0 : _a.textContent) || \"\";\n    copy(valueToCopy);\n    onCopyProp == null ? void 0 : onCopyProp(valueToCopy);\n  }, [copy, codeString, disableCopy, onCopyProp, children]);\n  const copyButtonProps = {\n    \"aria-label\": typeof tooltipProps.content === \"string\" ? tooltipProps.content : \"Copy to clipboard\",\n    size: \"sm\",\n    variant: \"light\",\n    isDisabled: disableCopy,\n    onPress: onCopy,\n    isIconOnly: true,\n    ...userButtonProps\n  };\n  const getCopyButtonProps = useCallback(() => ({\n    ...copyButtonProps,\n    \"data-copied\": dataAttr(copied),\n    className: slots.copyButton({\n      class: clsx(classNames == null ? void 0 : classNames.copyButton)\n    })\n  }), [slots, isFocusVisible, isFocused, disableCopy, classNames == null ? void 0 : classNames.copyButton, copyButtonProps, focusProps]);\n  return {\n    Component,\n    as,\n    domRef,\n    preRef,\n    children,\n    slots,\n    classNames,\n    copied,\n    onCopy,\n    copyIcon,\n    checkIcon,\n    symbolBefore,\n    isMultiLine,\n    isFocusVisible,\n    hideCopyButton,\n    disableCopy,\n    disableTooltip,\n    hideSymbol,\n    tooltipProps,\n    getSnippetProps,\n    getCopyButtonProps\n  };\n}\nexport { useSnippet };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}