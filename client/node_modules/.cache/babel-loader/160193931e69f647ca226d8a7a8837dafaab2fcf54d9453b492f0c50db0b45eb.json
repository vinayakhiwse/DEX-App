{"ast":null,"code":"import c, { createContext as m, useContext as L, useMemo as f, useState as b } from \"react\";\nimport { useId as T } from '../../hooks/use-id.js';\nimport { forwardRefWithAs as E, render as g } from '../../utils/render.js';\nimport { useIsoMorphicEffect as x } from '../../hooks/use-iso-morphic-effect.js';\nimport { useSyncRefs as P } from '../../hooks/use-sync-refs.js';\nimport { useEvent as y } from '../../hooks/use-event.js';\nlet d = m(null);\nfunction u() {\n  let o = L(d);\n  if (o === null) {\n    let t = new Error(\"You used a <Label /> component, but it is not inside a relevant parent.\");\n    throw Error.captureStackTrace && Error.captureStackTrace(t, u), t;\n  }\n  return o;\n}\nfunction H() {\n  let [o, t] = b([]);\n  return [o.length > 0 ? o.join(\" \") : void 0, f(() => function (e) {\n    let s = y(r => (t(l => [...l, r]), () => t(l => {\n        let n = l.slice(),\n          p = n.indexOf(r);\n        return p !== -1 && n.splice(p, 1), n;\n      }))),\n      a = f(() => ({\n        register: s,\n        slot: e.slot,\n        name: e.name,\n        props: e.props\n      }), [s, e.slot, e.name, e.props]);\n    return c.createElement(d.Provider, {\n      value: a\n    }, e.children);\n  }, [t])];\n}\nlet A = \"label\";\nfunction h(o, t) {\n  let i = T(),\n    {\n      id: e = `headlessui-label-${i}`,\n      passive: s = !1,\n      ...a\n    } = o,\n    r = u(),\n    l = P(t);\n  x(() => r.register(e), [e, r.register]);\n  let n = {\n    ref: l,\n    ...r.props,\n    id: e\n  };\n  return s && (\"onClick\" in n && (delete n.htmlFor, delete n.onClick), \"onClick\" in a && delete a.onClick), g({\n    ourProps: n,\n    theirProps: a,\n    slot: r.slot || {},\n    defaultTag: A,\n    name: r.name || \"Label\"\n  });\n}\nlet v = E(h),\n  M = Object.assign(v, {});\nexport { M as Label, H as useLabels };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}