{"ast":null,"code":"import t, { useMemo as o } from \"react\";\nimport { useFocusRing as r } from \"@react-aria/focus\";\nimport { useButton as e } from \"@react-aria/button\";\nimport { useHover as i } from \"@react-aria/interactions\";\nimport { mergeProps as s } from \"@react-aria/utils\";\nimport n from \"../use-warning\";\nimport a from \"../utils/drip\";\nimport { filterPropsWithGroup as l, getCssColors as u } from \"./utils\";\nimport { useButtonGroupContext as d } from \"./button-group-context\";\nimport c from \"./button-icon\";\nimport m from \"../utils/clsx\";\nimport p from \"../use-drip\";\nimport f from \"./button.styles\";\nimport h from \"../utils/with-defaults\";\nimport { useDOMRef as b } from \"../utils/dom\";\nimport { __DEV__ as g } from \"../utils/assertion\";\nimport { jsx as x } from \"react/jsx-runtime\";\nimport { Fragment as P } from \"react/jsx-runtime\";\nimport { jsxs as C } from \"react/jsx-runtime\";\nconst y = t.forwardRef(({\n  as: h,\n  css: y,\n  iconLeftCss: v,\n  iconRightCss: F,\n  onClick: N,\n  onPress: B,\n  onPressStart: j,\n  onPressEnd: w,\n  onPressChange: R,\n  onPressUp: S,\n  ...k\n}, U) => {\n  const T = d(),\n    A = l(k, T),\n    D = u(A),\n    {\n      flat: E,\n      children: G,\n      disabled: H,\n      animated: L,\n      light: V,\n      ripple: W,\n      bordered: I,\n      auto: $,\n      borderWeight: q,\n      icon: z,\n      iconRight: J,\n      ghost: K,\n      autoFocus: M,\n      className: O,\n      ...Q\n    } = A,\n    X = t => {\n      L && W && Y.current && st(t);\n    },\n    Y = b(U),\n    {\n      buttonProps: Z,\n      isPressed: _\n    } = e({\n      ...k,\n      onClick: t => {\n        X(t), null == N || N(t);\n      },\n      isDisabled: H,\n      elementType: h,\n      onPress: t => {\n        \"keyboard\" !== t.pointerType && \"virtual\" !== t.pointerType || (X(t), null == N || N(t)), null == B || B(t);\n      },\n      onPressStart: j,\n      onPressEnd: w,\n      onPressChange: R,\n      onPressUp: S\n    }, Y),\n    {\n      hoverProps: tt,\n      isHovered: ot\n    } = i({\n      isDisabled: H\n    }),\n    {\n      isFocused: rt,\n      isFocusVisible: et,\n      focusProps: it\n    } = r({\n      autoFocus: M\n    }),\n    {\n      onClick: st,\n      ...nt\n    } = p(!1, Y);\n  g && \"gradient\" === A.color && (E || V) && n(\"Using the gradient color on flat and light buttons will have no effect.\");\n  const at = z || J,\n    lt = 0 === t.Children.count(G),\n    ut = Boolean(J),\n    dt = o(() => _ ? \"pressed\" : ot ? \"hovered\" : H ? \"disabled\" : \"ready\", [H, ot, _]),\n    ct = o(() => ut ? F : v, [ut, F, v]);\n  return C(f, {\n    as: h,\n    ref: Y,\n    borderWeight: q,\n    auto: $,\n    flat: E,\n    light: V,\n    ghost: K,\n    bordered: I || K,\n    \"data-state\": dt,\n    animated: L,\n    isChildLess: lt,\n    isPressed: _,\n    isHovered: ot || K && rt,\n    isFocusVisible: et && !H,\n    className: m(\"nextui-button\", `nextui-button--${dt}`, O),\n    css: {\n      ...y,\n      ...D\n    },\n    ...s(Z, it, tt, Q),\n    children: [0 === t.Children.count(G) ? x(c, {\n      isSingle: !0,\n      isAuto: $,\n      isRight: ut,\n      css: ct,\n      isGradientButtonBorder: \"gradient\" === Q.color && (I || K),\n      children: at\n    }) : at ? C(P, {\n      children: [x(c, {\n        isSingle: !1,\n        isAuto: $,\n        isRight: ut,\n        css: ct,\n        isGradientButtonBorder: \"gradient\" === Q.color && (I || K),\n        children: at\n      }), x(\"div\", {\n        className: m(\"nextui-button-text\", {\n          \"nextui-button-text-right\": ut,\n          \"nextui-button-text-left\": !ut\n        }),\n        children: G\n      })]\n    }) : x(\"span\", {\n      className: \"nextui-button-text\",\n      children: G\n    }), x(a, {\n      color: \"white\",\n      ...nt\n    })]\n  });\n});\ng && (y.displayName = \"NextUI.Button\"), y.toString = () => \".nextui-button\";\nexport default h(y, {\n  ghost: !1,\n  bordered: !1,\n  ripple: !0,\n  animated: !0,\n  disabled: !1,\n  autoFocus: !1,\n  auto: !1,\n  className: \"\",\n  type: \"button\"\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}