{"ast":null,"code":"\"use client\";\n\nimport { useAccordionItem } from \"./chunk-A2ATMXMI.mjs\";\n\n// src/accordion-item.tsx\nimport { forwardRef } from \"@nextui-org/system\";\nimport { useMemo } from \"react\";\nimport { ChevronIcon } from \"@nextui-org/shared-icons\";\nimport { AnimatePresence, motion, useWillChange } from \"framer-motion\";\nimport { TRANSITION_VARIANTS } from \"@nextui-org/framer-transitions\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar AccordionItem = forwardRef((props, ref) => {\n  const {\n    Component,\n    classNames,\n    slots,\n    indicator,\n    children,\n    title,\n    subtitle,\n    startContent,\n    isOpen,\n    isDisabled,\n    hideIndicator,\n    keepContentMounted,\n    disableAnimation,\n    motionProps,\n    getBaseProps,\n    getHeadingProps,\n    getButtonProps,\n    getTitleProps,\n    getSubtitleProps,\n    getContentProps,\n    getIndicatorProps\n  } = useAccordionItem({\n    ...props,\n    ref\n  });\n  const willChange = useWillChange();\n  const indicatorContent = useMemo(() => {\n    if (typeof indicator === \"function\") {\n      return indicator({\n        indicator: /* @__PURE__ */jsx(ChevronIcon, {}),\n        isOpen,\n        isDisabled\n      });\n    }\n    if (indicator) return indicator;\n    return null;\n  }, [indicator, isOpen, isDisabled]);\n  const indicatorComponent = indicatorContent || /* @__PURE__ */jsx(ChevronIcon, {});\n  const content = useMemo(() => {\n    if (disableAnimation) {\n      return /* @__PURE__ */jsx(\"div\", {\n        ...getContentProps(),\n        children\n      });\n    }\n    return keepContentMounted ? /* @__PURE__ */jsx(motion.section, {\n      animate: isOpen ? \"enter\" : \"exit\",\n      exit: \"exit\",\n      initial: \"exit\",\n      style: {\n        overflowY: \"hidden\",\n        willChange\n      },\n      variants: TRANSITION_VARIANTS.collapse,\n      ...motionProps,\n      children: /* @__PURE__ */jsx(\"div\", {\n        ...getContentProps(),\n        children\n      })\n    }, \"accordion-content\") : /* @__PURE__ */jsx(AnimatePresence, {\n      initial: false,\n      children: isOpen && /* @__PURE__ */jsx(motion.section, {\n        animate: \"enter\",\n        exit: \"exit\",\n        initial: \"exit\",\n        style: {\n          overflowY: \"hidden\",\n          willChange\n        },\n        variants: TRANSITION_VARIANTS.collapse,\n        ...motionProps,\n        children: /* @__PURE__ */jsx(\"div\", {\n          ...getContentProps(),\n          children\n        })\n      }, \"accordion-content\")\n    });\n  }, [isOpen, disableAnimation, keepContentMounted, children, motionProps]);\n  return /* @__PURE__ */jsxs(Component, {\n    ...getBaseProps(),\n    children: [/* @__PURE__ */jsx(\"h2\", {\n      ...getHeadingProps(),\n      children: /* @__PURE__ */jsxs(\"button\", {\n        ...getButtonProps(),\n        children: [startContent && /* @__PURE__ */jsx(\"div\", {\n          className: slots.startContent({\n            class: classNames == null ? void 0 : classNames.startContent\n          }),\n          children: startContent\n        }), /* @__PURE__ */jsxs(\"div\", {\n          className: slots.titleWrapper({\n            class: classNames == null ? void 0 : classNames.titleWrapper\n          }),\n          children: [title && /* @__PURE__ */jsx(\"span\", {\n            ...getTitleProps(),\n            children: title\n          }), subtitle && /* @__PURE__ */jsx(\"span\", {\n            ...getSubtitleProps(),\n            children: subtitle\n          })]\n        }), !hideIndicator && indicatorComponent && /* @__PURE__ */jsx(\"span\", {\n          ...getIndicatorProps(),\n          children: indicatorComponent\n        })]\n      })\n    }), content]\n  });\n});\nAccordionItem.displayName = \"NextUI.AccordionItem\";\nvar accordion_item_default = AccordionItem;\nexport { accordion_item_default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}