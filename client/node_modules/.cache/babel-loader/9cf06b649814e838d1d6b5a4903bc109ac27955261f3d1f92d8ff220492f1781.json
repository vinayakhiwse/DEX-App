{"ast":null,"code":"import { formatBlock } from '../../utils/formatters/block.js';\nimport { observe } from '../../utils/observe.js';\nimport { poll } from '../../utils/poll.js';\nimport { stringify } from '../../utils/stringify.js';\nimport { getBlock } from './getBlock.js';\n/**\n * Watches and returns information for incoming blocks.\n *\n * - Docs: https://viem.sh/docs/actions/public/watchBlocks.html\n * - Examples: https://stackblitz.com/github/wagmi-dev/viem/tree/main/examples/blocks/watching-blocks\n * - JSON-RPC Methods:\n *   - When `poll: true`, calls [`eth_getBlockByNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getBlockByNumber) on a polling interval.\n *   - When `poll: false` & WebSocket Transport, uses a WebSocket subscription via [`eth_subscribe`](https://docs.alchemy.com/reference/eth-subscribe-polygon) and the `\"newHeads\"` event.\n *\n * @param client - Client to use\n * @param parameters - {@link WatchBlocksParameters}\n * @returns A function that can be invoked to stop watching for new block numbers. {@link WatchBlocksReturnType}\n *\n * @example\n * import { createPublicClient, watchBlocks, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const unwatch = watchBlocks(client, {\n *   onBlock: (block) => console.log(block),\n * })\n */\nexport function watchBlocks(client, {\n  blockTag = 'latest',\n  emitMissed = false,\n  emitOnBegin = false,\n  onBlock,\n  onError,\n  includeTransactions: includeTransactions_,\n  poll: poll_,\n  pollingInterval = client.pollingInterval\n}) {\n  const enablePolling = typeof poll_ !== 'undefined' ? poll_ : client.transport.type !== 'webSocket';\n  const includeTransactions = includeTransactions_ ?? false;\n  let prevBlock;\n  const pollBlocks = () => {\n    const observerId = stringify(['watchBlocks', client.uid, emitMissed, emitOnBegin, includeTransactions, pollingInterval]);\n    return observe(observerId, {\n      onBlock,\n      onError\n    }, emit => poll(async () => {\n      try {\n        const block = await getBlock(client, {\n          blockTag,\n          includeTransactions\n        });\n        if (block.number && prevBlock?.number) {\n          // If the current block number is the same as the previous,\n          // we can skip.\n          if (block.number === prevBlock.number) return;\n          // If we have missed out on some previous blocks, and the\n          // `emitMissed` flag is truthy, let's emit those blocks.\n          if (block.number - prevBlock.number > 1 && emitMissed) {\n            for (let i = prevBlock?.number + 1n; i < block.number; i++) {\n              const block = await getBlock(client, {\n                blockNumber: i,\n                includeTransactions\n              });\n              emit.onBlock(block, prevBlock);\n              prevBlock = block;\n            }\n          }\n        }\n        if (\n        // If no previous block exists, emit.\n        !prevBlock?.number ||\n        // If the block tag is \"pending\" with no block number, emit.\n        blockTag === 'pending' && !block?.number ||\n        // If the next block number is greater than the previous block number, emit.\n        // We don't want to emit blocks in the past.\n        block.number && block.number > prevBlock.number) {\n          emit.onBlock(block, prevBlock);\n          prevBlock = block;\n        }\n      } catch (err) {\n        emit.onError?.(err);\n      }\n    }, {\n      emitOnBegin,\n      interval: pollingInterval\n    }));\n  };\n  const subscribeBlocks = () => {\n    let active = true;\n    let unsubscribe = () => active = false;\n    (async () => {\n      try {\n        const {\n          unsubscribe: unsubscribe_\n        } = await client.transport.subscribe({\n          params: ['newHeads'],\n          onData(data) {\n            if (!active) return;\n            const format = client.chain?.formatters?.block?.format || formatBlock;\n            const block = format(data.result);\n            onBlock(block, prevBlock);\n            prevBlock = block;\n          },\n          onError(error) {\n            onError?.(error);\n          }\n        });\n        unsubscribe = unsubscribe_;\n        if (!active) unsubscribe();\n      } catch (err) {\n        onError?.(err);\n      }\n    })();\n    return unsubscribe;\n  };\n  return enablePolling ? pollBlocks() : subscribeBlocks();\n}\n//# sourceMappingURL=watchBlocks.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}