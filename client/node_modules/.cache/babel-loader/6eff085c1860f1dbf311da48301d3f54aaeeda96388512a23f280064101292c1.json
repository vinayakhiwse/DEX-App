{"ast":null,"code":"\"use client\";\n\n// src/use-radio-group.ts\nimport { radioGroup } from \"@nextui-org/theme\";\nimport { useCallback, useMemo } from \"react\";\nimport { useRadioGroupState } from \"@react-stately/radio\";\nimport { useRadioGroup as useReactAriaRadioGroup } from \"@react-aria/radio\";\nimport { useDOMRef } from \"@nextui-org/react-utils\";\nimport { clsx, safeAriaLabel } from \"@nextui-org/shared-utils\";\nimport { mergeProps } from \"@react-aria/utils\";\nfunction useRadioGroup(props) {\n  const {\n    as,\n    ref,\n    classNames,\n    children,\n    label,\n    value,\n    name,\n    size = \"md\",\n    color = \"primary\",\n    isDisabled = false,\n    disableAnimation = false,\n    orientation = \"vertical\",\n    isRequired = false,\n    validationState,\n    isInvalid = validationState === \"invalid\",\n    isReadOnly,\n    errorMessage,\n    description,\n    className,\n    onChange,\n    onValueChange,\n    ...otherProps\n  } = props;\n  const Component = as || \"div\";\n  const domRef = useDOMRef(ref);\n  const otherPropsWithOrientation = useMemo(() => {\n    return {\n      ...otherProps,\n      value,\n      name,\n      \"aria-label\": safeAriaLabel(otherProps[\"aria-label\"], label),\n      isRequired,\n      isReadOnly,\n      isInvalid,\n      orientation,\n      onChange: onValueChange\n    };\n  }, [otherProps, value, name, label, isRequired, isReadOnly, isInvalid, orientation, onValueChange]);\n  const groupState = useRadioGroupState(otherPropsWithOrientation);\n  const {\n    labelProps,\n    radioGroupProps: groupProps,\n    errorMessageProps,\n    descriptionProps\n  } = useReactAriaRadioGroup(otherPropsWithOrientation, groupState);\n  const context = useMemo(() => ({\n    size,\n    color,\n    groupState,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    disableAnimation,\n    onChange\n  }), [size, color, isRequired, isDisabled, isInvalid, onChange, disableAnimation, groupState.name, groupState == null ? void 0 : groupState.isDisabled, groupState == null ? void 0 : groupState.isReadOnly, groupState == null ? void 0 : groupState.isRequired, groupState == null ? void 0 : groupState.selectedValue, groupState == null ? void 0 : groupState.lastFocusedValue]);\n  const slots = useMemo(() => radioGroup({\n    isRequired,\n    isInvalid,\n    disableAnimation\n  }), [isInvalid, isRequired, disableAnimation]);\n  const baseStyles = clsx(classNames == null ? void 0 : classNames.base, className);\n  const getGroupProps = useCallback(() => {\n    return {\n      ref: domRef,\n      className: slots.base({\n        class: baseStyles\n      }),\n      ...mergeProps(groupProps, otherProps)\n    };\n  }, [domRef, slots, baseStyles, groupProps, otherProps]);\n  const getLabelProps = useCallback(() => {\n    return {\n      className: slots.label({\n        class: classNames == null ? void 0 : classNames.label\n      }),\n      ...labelProps\n    };\n  }, [slots, classNames == null ? void 0 : classNames.label, labelProps, classNames == null ? void 0 : classNames.label]);\n  const getWrapperProps = useCallback(() => {\n    return {\n      className: slots.wrapper({\n        class: classNames == null ? void 0 : classNames.wrapper\n      }),\n      role: \"presentation\",\n      \"data-orientation\": orientation\n    };\n  }, [slots, classNames == null ? void 0 : classNames.wrapper, orientation, slots.wrapper]);\n  const getDescriptionProps = useCallback((props2 = {}) => {\n    return {\n      ...props2,\n      ...descriptionProps,\n      className: slots.description({\n        class: clsx(classNames == null ? void 0 : classNames.description, props2 == null ? void 0 : props2.className)\n      })\n    };\n  }, [slots, classNames == null ? void 0 : classNames.description, descriptionProps, slots.description]);\n  const getErrorMessageProps = useCallback((props2 = {}) => {\n    return {\n      ...props2,\n      ...errorMessageProps,\n      className: slots.errorMessage({\n        class: clsx(classNames == null ? void 0 : classNames.errorMessage, props2 == null ? void 0 : props2.className)\n      })\n    };\n  }, [slots, classNames == null ? void 0 : classNames.errorMessage, errorMessageProps]);\n  return {\n    Component,\n    children,\n    label,\n    context,\n    errorMessage,\n    description,\n    getGroupProps,\n    getLabelProps,\n    getWrapperProps,\n    getDescriptionProps,\n    getErrorMessageProps\n  };\n}\nexport { useRadioGroup };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}