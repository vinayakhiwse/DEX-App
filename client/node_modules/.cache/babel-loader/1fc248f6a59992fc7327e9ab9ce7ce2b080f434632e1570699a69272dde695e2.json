{"ast":null,"code":"import { useControlledState as $b3nuO$useControlledState } from \"@react-stately/utils\";\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\nvar $587d3ad58be6d31f$exports = {};\n$parcel$export($587d3ad58be6d31f$exports, \"useCheckboxGroupState\", () => $587d3ad58be6d31f$export$daff6da51032a415);\nfunction $587d3ad58be6d31f$export$daff6da51032a415(props = {}) {\n  let [selectedValues, setValue] = $b3nuO$useControlledState(props.value, props.defaultValue || [], props.onChange);\n  const state = {\n    value: selectedValues,\n    setValue(value) {\n      if (props.isReadOnly || props.isDisabled) return;\n      setValue(value);\n    },\n    isDisabled: props.isDisabled || false,\n    isReadOnly: props.isReadOnly || false,\n    isSelected(value) {\n      return selectedValues.includes(value);\n    },\n    addValue(value) {\n      if (props.isReadOnly || props.isDisabled) return;\n      if (!selectedValues.includes(value)) setValue(selectedValues.concat(value));\n    },\n    removeValue(value) {\n      if (props.isReadOnly || props.isDisabled) return;\n      if (selectedValues.includes(value)) setValue(selectedValues.filter(existingValue => existingValue !== value));\n    },\n    toggleValue(value) {\n      if (props.isReadOnly || props.isDisabled) return;\n      if (selectedValues.includes(value)) setValue(selectedValues.filter(existingValue => existingValue !== value));else setValue(selectedValues.concat(value));\n    }\n  };\n  return state;\n}\nexport { $587d3ad58be6d31f$export$daff6da51032a415 as useCheckboxGroupState };\n//# sourceMappingURL=module.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}