{"ast":null,"code":"/**\n * Provides short-hand for creating a definer right away\n *\n * @param {object} [object]  The object to bind the constants to\n *\n * @returns {function}  @see exports.definer\n */\nmodule.exports = function (object) {\n  return module.exports.definer(object);\n};\n\n/**\n * Binds a new \"constant\" property to an input object\n *\n * @param {object} object\n * @param {string} name\n * @param {mixed}  value\n *\n * @return {object}  The input object\n */\nmodule.exports.define = function (object, name, value) {\n  var key;\n\n  // if an object, loop the properties for the definitions\n  if (typeof name === \"object\") {\n    for (key in name) {\n      if (name.hasOwnProperty(key)) {\n        module.exports.define(object, key, name[key]);\n      }\n    }\n    // otherwise, just operate on a single property\n  } else {\n    Object.defineProperty(object, name, {\n      value: value,\n      enumerable: true,\n      writable: false,\n      configurable: false\n    });\n  }\n  return object;\n};\n\n/**\n * Creates a \"definer\" function that is bound to an input object (or a new empty object)\n *\n * @param {object} [object]\n *\n * @return {function}\n */\nmodule.exports.definer = function (object) {\n  object = object || Object.create(null);\n  return function (name, value) {\n    return module.exports.define(object, name, value);\n  };\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}