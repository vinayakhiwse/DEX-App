{"ast":null,"code":"import { KeyMod as e } from \"./codes\";\nimport { useEffect as t } from \"react\";\nimport { getActiveModMap as r, getCtrlKeysByPlatform as o } from \"./helper\";\nimport { getKeyValue as n } from \"../utils/object\";\nexport default ((p, s, i = {}) => {\n  const a = Array.isArray(s) ? s : [s],\n    {\n      disableGlobalEvent: y = !1,\n      capture: l = !1,\n      stopPropagation: d = !1,\n      preventDefault: u = !1,\n      event: m = \"keydown\"\n    } = i,\n    f = r(a),\n    C = a.filter(t => !n(e, t)),\n    {\n      CtrlCmd: c,\n      WinCtrl: k\n    } = o(),\n    K = e => {\n      f.Shift && !e.shiftKey || f.Alt && !e.altKey || f.CtrlCmd && !e[c] || f.WinCtrl && !e[k] || C.length > 0 && !C.includes(e.keyCode) || (d && e.stopPropagation(), u && e.preventDefault(), p && p(e));\n    };\n  t(() => (y || document.addEventListener(m, K), () => {\n    document.removeEventListener(m, K);\n  }), [y]);\n  const v = (e, t = !1) => e !== m || t !== l ? () => {} : e => K(e);\n  return {\n    bindings: {\n      onKeyDown: v(\"keydown\"),\n      onKeyDownCapture: v(\"keydown\", !0),\n      onKeyPress: v(\"keypress\"),\n      onKeyPressCapture: v(\"keypress\", !0),\n      onKeyUp: v(\"keyup\"),\n      onKeyUpCapture: v(\"keyup\", !0)\n    }\n  };\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}