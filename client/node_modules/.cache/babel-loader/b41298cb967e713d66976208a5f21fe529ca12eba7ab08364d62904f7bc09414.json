{"ast":null,"code":"import { ethers } from \"ethers\";\nimport CustomTokenAbi from \"../abi/CustomToken.json\";\nimport UniswapAbi from \"../abi/Uniswap.json\";\n//here pool import..\nimport LiquidityPool from \"../abi/LiquidityPool.json\";\nimport tokenAbi from \"../abi/ERC20Token.json\";\nexport const tokenContract = async address => {\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const {\n    ethereum\n  } = window;\n  if (ethereum) {\n    const signer = provider.getSigner();\n    const contractReader = new ethers.Contract(address, CustomTokenAbi.abi, signer);\n    return contractReader;\n  }\n};\nexport const contract = async () => {\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const {\n    ethereum\n  } = window;\n  if (ethereum) {\n    const signer = provider.getSigner();\n    const contractReader = new ethers.Contract(`0x8dA78e6D47870911bE47A711d24c7946d055b8Cc`, UniswapAbi.abi, signer);\n    return contractReader;\n  }\n};\n\n//pool code here...\nexport const poolcontract = async () => {\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const {\n    ethereum\n  } = window;\n  if (ethereum) {\n    const sepoliaChainId = 11155111; // Replace with the actual chain ID for Sepolia testnet\n    await ethereum.request({\n      method: \"eth_requestAccounts\"\n    });\n    console.log(\"chaintd\", ethereum.chainId.toString());\n    if (ethereum.chainId.toString() !== `0x${sepoliaChainId.toString(16)}`) {\n      throw new Error(\"Please connect to Sepolia testnet\");\n    }\n    const signer = provider.getSigner();\n    const contractReader = new ethers.Contract(`0x343909a9B02A32e248fABB0e37428921Eac26CD1`, LiquidityPool.abi, signer);\n    return contractReader;\n  }\n};\n\n// //here token code..\n// export const tokenAContract = async () => {\n//   const provider = new ethers.providers.Web3Provider(window.ethereum);\n//   const { ethereum } = window;\n//   if (ethereum) {\n//     const signer = provider.getSigner();\n//     const contractReader = new ethers.Contract(\n//       `0x6ddeC1321E6bC026a9278837dAd10dB8f7D85201`,\n//       tokenAbi.abi,\n//       signer\n//     );\n//     return contractReader;\n//   }\n// };\n\n// //here token code..\n// export const tokenBContract = async () => {\n//   const provider = new ethers.providers.Web3Provider(window.ethereum);\n//   const { ethereum } = window;\n//   if (ethereum) {\n//     const signer = provider.getSigner();\n//     const contractReader = new ethers.Contract(\n//       `0x6ddeC1321E6bC026a9278837dAd10dB8f7D85201`,\n//       tokenAbi.abi,\n//       signer\n//     );\n//     return contractReader;\n//   }\n// };\n\n//here token contract instance..\nexport const tokenPoolContract = async address => {\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const {\n    ethereum\n  } = window;\n  if (ethereum) {\n    const signer = provider.getSigner();\n    const contractReader = new ethers.Contract(address, tokenAbi.abi, signer);\n    return contractReader;\n  }\n};","map":{"version":3,"names":["ethers","CustomTokenAbi","UniswapAbi","LiquidityPool","tokenAbi","tokenContract","address","provider","providers","Web3Provider","window","ethereum","signer","getSigner","contractReader","Contract","abi","contract","poolcontract","sepoliaChainId","request","method","console","log","chainId","toString","Error","tokenPoolContract"],"sources":["/home/hp/Desktop/Dex-back/client/src/utils/contract.js"],"sourcesContent":["import { ethers } from \"ethers\";\nimport CustomTokenAbi from \"../abi/CustomToken.json\";\nimport UniswapAbi from \"../abi/Uniswap.json\";\n//here pool import..\nimport LiquidityPool from \"../abi/LiquidityPool.json\";\nimport tokenAbi from \"../abi/ERC20Token.json\";\n\nexport const tokenContract = async (address) => {\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const { ethereum } = window;\n  if (ethereum) {\n    const signer = provider.getSigner();\n    const contractReader = new ethers.Contract(\n      address,\n      CustomTokenAbi.abi,\n      signer\n    );\n    return contractReader;\n  }\n};\n\nexport const contract = async () => {\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const { ethereum } = window;\n  if (ethereum) {\n    const signer = provider.getSigner();\n    const contractReader = new ethers.Contract(\n      `0x8dA78e6D47870911bE47A711d24c7946d055b8Cc`,\n      UniswapAbi.abi,\n      signer\n    );\n    return contractReader;\n  }\n};\n\n//pool code here...\nexport const poolcontract = async () => {\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const { ethereum } = window;\n  if (ethereum) {\n    const sepoliaChainId = 11155111; // Replace with the actual chain ID for Sepolia testnet\n    await ethereum.request({ method: \"eth_requestAccounts\" });\n    console.log(\"chaintd\", ethereum.chainId.toString());\n    if (ethereum.chainId.toString() !== `0x${sepoliaChainId.toString(16)}`) {\n      throw new Error(\"Please connect to Sepolia testnet\");\n    }\n    const signer = provider.getSigner();\n    const contractReader = new ethers.Contract(\n      `0x343909a9B02A32e248fABB0e37428921Eac26CD1`,\n      LiquidityPool.abi,\n      signer\n    );\n    return contractReader;\n  }\n};\n\n// //here token code..\n// export const tokenAContract = async () => {\n//   const provider = new ethers.providers.Web3Provider(window.ethereum);\n//   const { ethereum } = window;\n//   if (ethereum) {\n//     const signer = provider.getSigner();\n//     const contractReader = new ethers.Contract(\n//       `0x6ddeC1321E6bC026a9278837dAd10dB8f7D85201`,\n//       tokenAbi.abi,\n//       signer\n//     );\n//     return contractReader;\n//   }\n// };\n\n// //here token code..\n// export const tokenBContract = async () => {\n//   const provider = new ethers.providers.Web3Provider(window.ethereum);\n//   const { ethereum } = window;\n//   if (ethereum) {\n//     const signer = provider.getSigner();\n//     const contractReader = new ethers.Contract(\n//       `0x6ddeC1321E6bC026a9278837dAd10dB8f7D85201`,\n//       tokenAbi.abi,\n//       signer\n//     );\n//     return contractReader;\n//   }\n// };\n\n//here token contract instance..\nexport const tokenPoolContract = async (address) => {\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const { ethereum } = window;\n  if (ethereum) {\n    const signer = provider.getSigner();\n    const contractReader = new ethers.Contract(address, tokenAbi.abi, signer);\n    return contractReader;\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}