{"ast":null,"code":"const schedulerCache = /*#__PURE__*/new Map();\nexport function createBatchScheduler({\n  fn,\n  id,\n  shouldSplitBatch,\n  wait = 0\n}) {\n  const exec = async () => {\n    const scheduler = getScheduler();\n    flush();\n    const args = scheduler.map(({\n      args\n    }) => args);\n    if (args.length === 0) return;\n    fn(args).then(data => {\n      scheduler.forEach(({\n        pendingPromise\n      }, i) => pendingPromise.resolve?.([data[i], data]));\n    }).catch(err => {\n      scheduler.forEach(({\n        pendingPromise\n      }) => pendingPromise.reject?.(err));\n    });\n  };\n  const flush = () => schedulerCache.delete(id);\n  const getBatchedArgs = () => getScheduler().map(({\n    args\n  }) => args);\n  const getScheduler = () => schedulerCache.get(id) || [];\n  const setScheduler = item => schedulerCache.set(id, [...getScheduler(), item]);\n  return {\n    flush,\n    async schedule(args) {\n      const pendingPromise = {};\n      const promise = new Promise((resolve, reject) => {\n        pendingPromise.resolve = resolve;\n        pendingPromise.reject = reject;\n      });\n      const split = shouldSplitBatch?.([...getBatchedArgs(), args]);\n      if (split) exec();\n      const hasActiveScheduler = getScheduler().length > 0;\n      if (hasActiveScheduler) {\n        setScheduler({\n          args,\n          pendingPromise\n        });\n        return promise;\n      }\n      setScheduler({\n        args,\n        pendingPromise\n      });\n      setTimeout(exec, wait);\n      return promise;\n    }\n  };\n}\n//# sourceMappingURL=createBatchScheduler.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}