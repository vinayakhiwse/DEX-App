{"ast":null,"code":"\"use client\";\n\nimport { useImage } from \"./chunk-DLHLVYAJ.mjs\";\n\n// src/image.tsx\nimport { cloneElement } from \"react\";\nimport { forwardRef } from \"@nextui-org/system\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar Image = forwardRef((props, ref) => {\n  const {\n    Component,\n    domRef,\n    slots,\n    classNames,\n    isBlurred,\n    isZoomed,\n    fallbackSrc,\n    removeWrapper,\n    disableSkeleton,\n    getImgProps,\n    getWrapperProps,\n    getBlurredImgProps\n  } = useImage({\n    ...props,\n    ref\n  });\n  const img = /* @__PURE__ */jsx(Component, {\n    ref: domRef,\n    ...getImgProps()\n  });\n  if (removeWrapper) {\n    return img;\n  }\n  const zoomed = /* @__PURE__ */jsx(\"div\", {\n    className: slots.zoomedWrapper({\n      class: classNames == null ? void 0 : classNames.zoomedWrapper\n    }),\n    children: img\n  });\n  if (isBlurred) {\n    return /* @__PURE__ */jsxs(\"div\", {\n      ...getWrapperProps(),\n      children: [isZoomed ? zoomed : img, cloneElement(img, getBlurredImgProps())]\n    });\n  }\n  if (isZoomed || !disableSkeleton || fallbackSrc) {\n    return /* @__PURE__ */jsxs(\"div\", {\n      ...getWrapperProps(),\n      children: [\" \", isZoomed ? zoomed : img]\n    });\n  }\n  return img;\n});\nImage.displayName = \"NextUI.Image\";\nvar image_default = Image;\nexport { image_default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}