{"ast":null,"code":"export const isObject = e => e && \"object\" == typeof e;\nexport const renameProp = (e, t, {\n  [e]: r,\n  ...c\n}) => ({\n  [t]: r,\n  ...c\n});\nexport const copyObject = e => isObject(e) ? e instanceof Array ? [...e] : {\n  ...e\n} : e;\nexport const omitObject = (e, t) => {\n  if (!isObject(e)) return e;\n  if (e instanceof Array) return [...e];\n  const r = {\n    ...e\n  };\n  return t.forEach(e => r[e] && delete r[e]), r;\n};\nexport const cleanObject = e => {\n  if (!isObject(e)) return e;\n  if (e instanceof Array) return [...e];\n  const t = {\n    ...e\n  };\n  return Object.keys(t).forEach(e => {\n    void 0 !== t[e] && null !== t[e] || delete t[e];\n  }), t;\n};\nexport const cleanObjectKeys = (e, t = []) => {\n  if (!isObject(e)) return e;\n  if (e instanceof Array) return [...e];\n  const r = {\n    ...e\n  };\n  return t.forEach(e => {\n    r[e] && delete r[e];\n  }), r;\n};\nexport const getKeyValue = (e, t) => isObject(e) ? e instanceof Array ? [...e] : e[t] : e;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}