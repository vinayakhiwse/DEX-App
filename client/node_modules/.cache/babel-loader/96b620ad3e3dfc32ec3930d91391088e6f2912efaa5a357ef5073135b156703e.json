{"ast":null,"code":"\"use client\";\n\n// src/use-tabs.ts\nimport { mapPropsVariants } from \"@nextui-org/system\";\nimport { tabs } from \"@nextui-org/theme\";\nimport { useDOMRef } from \"@nextui-org/react-utils\";\nimport { clsx } from \"@nextui-org/shared-utils\";\nimport { filterDOMProps } from \"@nextui-org/react-utils\";\nimport { useMemo, useCallback } from \"react\";\nimport { useTabListState } from \"@react-stately/tabs\";\nimport { useTabList } from \"@react-aria/tabs\";\nimport { mergeProps } from \"@react-aria/utils\";\nfunction useTabs(originalProps) {\n  const [props, variantProps] = mapPropsVariants(originalProps, tabs.variantKeys);\n  const {\n    ref,\n    as,\n    className,\n    children,\n    classNames,\n    disableCursorAnimation,\n    motionProps,\n    ...otherProps\n  } = props;\n  const Component = as || \"div\";\n  const shouldFilterDOMProps = typeof Component === \"string\";\n  const domRef = useDOMRef(ref);\n  const state = useTabListState({\n    children,\n    ...otherProps\n  });\n  const {\n    tabListProps\n  } = useTabList(otherProps, state, domRef);\n  const slots = useMemo(() => tabs({\n    ...variantProps,\n    className\n  }), [...Object.values(variantProps), className]);\n  const baseStyles = clsx(classNames == null ? void 0 : classNames.base, className);\n  const values = useMemo(() => ({\n    state,\n    slots,\n    classNames,\n    motionProps,\n    listRef: domRef,\n    disableCursorAnimation,\n    isDisabled: originalProps == null ? void 0 : originalProps.isDisabled,\n    disableAnimation: originalProps == null ? void 0 : originalProps.disableAnimation\n  }), [state, slots, domRef, motionProps, disableCursorAnimation, originalProps == null ? void 0 : originalProps.disableAnimation, originalProps == null ? void 0 : originalProps.isDisabled, classNames]);\n  const getBaseProps = useCallback(props2 => ({\n    \"data-slot\": \"base\",\n    className: slots.base({\n      class: clsx(baseStyles, props2 == null ? void 0 : props2.className)\n    }),\n    ...mergeProps(filterDOMProps(otherProps, {\n      enabled: shouldFilterDOMProps\n    }), props2)\n  }), [baseStyles, otherProps, slots]);\n  const getTabListProps = useCallback(props2 => ({\n    ref: domRef,\n    \"data-slot\": \"tabList\",\n    className: slots.tabList({\n      class: clsx(classNames == null ? void 0 : classNames.tabList, props2 == null ? void 0 : props2.className)\n    }),\n    ...mergeProps(tabListProps, props2)\n  }), [domRef, tabListProps, classNames, slots]);\n  return {\n    Component,\n    domRef,\n    state,\n    values,\n    getBaseProps,\n    getTabListProps\n  };\n}\nexport { useTabs };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}