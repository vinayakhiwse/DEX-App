{"ast":null,"code":"import { parseAccount } from '../../accounts/utils/parseAccount.js';\nimport { internal_estimateFeesPerGas } from '../../actions/public/estimateFeesPerGas.js';\nimport { estimateGas } from '../../actions/public/estimateGas.js';\nimport { getBlock } from '../../actions/public/getBlock.js';\nimport { getTransactionCount } from '../../actions/public/getTransactionCount.js';\nimport { AccountNotFoundError } from '../../errors/account.js';\nimport { Eip1559FeesNotSupportedError, MaxFeePerGasTooLowError } from '../../errors/fee.js';\nimport { assertRequest } from '../../utils/transaction/assertRequest.js';\nimport { getTransactionType } from '../../utils/transaction/getTransactionType.js';\n/**\n * Prepares a transaction request for signing.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/prepareTransactionRequest.html\n *\n * @param args - {@link PrepareTransactionRequestParameters}\n * @returns The transaction request. {@link PrepareTransactionRequestReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { prepareTransactionRequest } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const request = await prepareTransactionRequest(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: 1n,\n * })\n *\n * @example\n * // Account Hoisting\n * import { createWalletClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { prepareTransactionRequest } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0xâ€¦'),\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const request = await prepareTransactionRequest(client, {\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: 1n,\n * })\n */\nexport async function prepareTransactionRequest(client, args) {\n  const {\n    account: account_ = client.account,\n    chain,\n    gas,\n    nonce,\n    type\n  } = args;\n  if (!account_) throw new AccountNotFoundError();\n  const account = parseAccount(account_);\n  const block = await getBlock(client, {\n    blockTag: 'latest'\n  });\n  const request = {\n    ...args,\n    from: account.address\n  };\n  if (typeof nonce === 'undefined') request.nonce = await getTransactionCount(client, {\n    address: account.address,\n    blockTag: 'pending'\n  });\n  if (typeof type === 'undefined') {\n    try {\n      request.type = getTransactionType(request);\n    } catch {\n      // infer type from block\n      request.type = typeof block.baseFeePerGas === 'bigint' ? 'eip1559' : 'legacy';\n    }\n  }\n  if (request.type === 'eip1559') {\n    // EIP-1559 fees\n    const {\n      maxFeePerGas,\n      maxPriorityFeePerGas\n    } = await internal_estimateFeesPerGas(client, {\n      block,\n      chain,\n      request: request\n    });\n    if (typeof args.maxPriorityFeePerGas === 'undefined' && args.maxFeePerGas && args.maxFeePerGas < maxPriorityFeePerGas) throw new MaxFeePerGasTooLowError({\n      maxPriorityFeePerGas\n    });\n    request.maxPriorityFeePerGas = maxPriorityFeePerGas;\n    request.maxFeePerGas = maxFeePerGas;\n  } else {\n    // Legacy fees\n    if (typeof args.maxFeePerGas !== 'undefined' || typeof args.maxPriorityFeePerGas !== 'undefined') throw new Eip1559FeesNotSupportedError();\n    const {\n      gasPrice: gasPrice_\n    } = await internal_estimateFeesPerGas(client, {\n      block,\n      chain,\n      request: request,\n      type: 'legacy'\n    });\n    request.gasPrice = gasPrice_;\n  }\n  if (typeof gas === 'undefined') request.gas = await estimateGas(client, {\n    ...request,\n    account: {\n      address: account.address,\n      type: 'json-rpc'\n    }\n  });\n  assertRequest(request);\n  return request;\n}\n//# sourceMappingURL=prepareTransactionRequest.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}