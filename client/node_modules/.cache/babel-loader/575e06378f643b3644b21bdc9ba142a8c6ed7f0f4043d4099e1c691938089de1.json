{"ast":null,"code":"\"use client\";\n\n// src/use-table.ts\nimport { useCallback } from \"react\";\nimport { useTableState } from \"@react-stately/table\";\nimport { useTable as useReactAriaTable } from \"@react-aria/table\";\nimport { mapPropsVariants } from \"@nextui-org/system\";\nimport { table } from \"@nextui-org/theme\";\nimport { useDOMRef, filterDOMProps } from \"@nextui-org/react-utils\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { clsx } from \"@nextui-org/shared-utils\";\nimport { useMemo } from \"react\";\nfunction useTable(originalProps) {\n  const [props, variantProps] = mapPropsVariants(originalProps, table.variantKeys);\n  const {\n    ref,\n    as,\n    baseRef,\n    children,\n    className,\n    classNames,\n    layoutNode,\n    removeWrapper = false,\n    disableAnimation = false,\n    selectionMode = \"none\",\n    topContentPlacement = \"inside\",\n    bottomContentPlacement = \"inside\",\n    selectionBehavior = selectionMode === \"none\" ? null : \"toggle\",\n    disabledBehavior = \"selection\",\n    showSelectionCheckboxes = selectionMode === \"multiple\" && selectionBehavior !== \"replace\",\n    BaseComponent = \"div\",\n    checkboxesProps,\n    topContent,\n    bottomContent,\n    onRowAction,\n    onCellAction,\n    ...otherProps\n  } = props;\n  const Component = as || \"table\";\n  const shouldFilterDOMProps = typeof Component === \"string\";\n  const domRef = useDOMRef(ref);\n  const domBaseRef = useDOMRef(baseRef);\n  const state = useTableState({\n    ...originalProps,\n    children,\n    showSelectionCheckboxes\n  });\n  const {\n    collection\n  } = state;\n  const {\n    gridProps\n  } = useReactAriaTable({\n    ...originalProps,\n    layout: layoutNode\n  }, state, domRef);\n  const isSelectable = selectionMode !== \"none\";\n  const isMultiSelectable = selectionMode === \"multiple\";\n  const slots = useMemo(() => table({\n    ...variantProps,\n    isSelectable,\n    isMultiSelectable\n  }), [...Object.values(variantProps), isSelectable, isMultiSelectable]);\n  const baseStyles = clsx(classNames == null ? void 0 : classNames.base, className);\n  const values = useMemo(() => {\n    var _a;\n    return {\n      state,\n      slots,\n      isSelectable,\n      collection,\n      classNames,\n      color: originalProps == null ? void 0 : originalProps.color,\n      disableAnimation,\n      checkboxesProps,\n      isHeaderSticky: (_a = originalProps == null ? void 0 : originalProps.isHeaderSticky) != null ? _a : false,\n      selectionMode,\n      selectionBehavior,\n      disabledBehavior,\n      showSelectionCheckboxes,\n      onRowAction,\n      onCellAction\n    };\n  }, [slots, state, collection, isSelectable, classNames, selectionMode, selectionBehavior, checkboxesProps, disabledBehavior, disableAnimation, showSelectionCheckboxes, originalProps == null ? void 0 : originalProps.color, originalProps == null ? void 0 : originalProps.isHeaderSticky, onRowAction, onCellAction]);\n  const getBaseProps = useCallback(props2 => ({\n    ...props2,\n    ref: domBaseRef,\n    className: slots.base({\n      class: clsx(baseStyles, props2 == null ? void 0 : props2.className)\n    })\n  }), [baseStyles, slots]);\n  const getWrapperProps = useCallback(props2 => ({\n    ...props2,\n    ref: domBaseRef,\n    className: slots.wrapper({\n      class: clsx(classNames == null ? void 0 : classNames.wrapper, props2 == null ? void 0 : props2.className)\n    })\n  }), [classNames == null ? void 0 : classNames.wrapper, slots]);\n  const getTableProps = useCallback(props2 => ({\n    ...mergeProps(gridProps, filterDOMProps(otherProps, {\n      enabled: shouldFilterDOMProps\n    }), props2),\n    ref: domRef,\n    className: slots.table({\n      class: clsx(classNames == null ? void 0 : classNames.table, props2 == null ? void 0 : props2.className)\n    })\n  }), [classNames == null ? void 0 : classNames.table, shouldFilterDOMProps, slots, gridProps, otherProps]);\n  return {\n    BaseComponent,\n    Component,\n    children,\n    state,\n    collection,\n    values,\n    topContent,\n    bottomContent,\n    removeWrapper,\n    topContentPlacement,\n    bottomContentPlacement,\n    getBaseProps,\n    getWrapperProps,\n    getTableProps\n  };\n}\nexport { useTable };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}