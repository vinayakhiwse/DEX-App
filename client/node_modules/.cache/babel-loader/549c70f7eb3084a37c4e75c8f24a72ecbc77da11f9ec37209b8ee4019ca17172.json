{"ast":null,"code":"\"use client\";\n\nimport { usePopoverContext } from \"./chunk-SQ3I4X62.mjs\";\n\n// src/popover-content.tsx\nimport { useMemo, useRef } from \"react\";\nimport { forwardRef } from \"@nextui-org/system\";\nimport { DismissButton } from \"@react-aria/overlays\";\nimport { TRANSITION_VARIANTS } from \"@nextui-org/framer-transitions\";\nimport { motion } from \"framer-motion\";\nimport { useDialog } from \"@react-aria/dialog\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { RemoveScroll } from \"react-remove-scroll\";\nimport { getTransformOrigins } from \"@nextui-org/aria-utils\";\nimport { Fragment, jsx, jsxs } from \"react/jsx-runtime\";\nvar PopoverContent = forwardRef((props, _) => {\n  const {\n    as,\n    children,\n    ...otherProps\n  } = props;\n  const {\n    Component: OverlayComponent,\n    isOpen,\n    placement,\n    showArrow,\n    motionProps,\n    backdrop,\n    disableAnimation,\n    shouldBlockScroll,\n    getPopoverProps,\n    getArrowProps,\n    getDialogProps,\n    getBackdropProps,\n    isNonModal,\n    onClose\n  } = usePopoverContext();\n  const Component = as || OverlayComponent || \"div\";\n  const dialogRef = useRef(null);\n  const {\n    dialogProps,\n    titleProps\n  } = useDialog({}, dialogRef);\n  delete dialogProps.role;\n  const arrowContent = useMemo(() => {\n    if (!showArrow) return null;\n    return /* @__PURE__ */jsx(\"span\", {\n      ...getArrowProps()\n    });\n  }, [showArrow, getArrowProps]);\n  const content = /* @__PURE__ */jsxs(Fragment, {\n    children: [!isNonModal && /* @__PURE__ */jsx(DismissButton, {\n      onDismiss: onClose\n    }), /* @__PURE__ */jsx(Component, {\n      ...getDialogProps(mergeProps(dialogProps, otherProps)),\n      ref: dialogRef,\n      children: typeof children === \"function\" ? children(titleProps) : children\n    }), arrowContent, /* @__PURE__ */jsx(DismissButton, {\n      onDismiss: onClose\n    })]\n  });\n  const backdropContent = useMemo(() => {\n    if (backdrop === \"transparent\") {\n      return null;\n    }\n    if (disableAnimation) {\n      return /* @__PURE__ */jsx(\"div\", {\n        ...getBackdropProps()\n      });\n    }\n    return /* @__PURE__ */jsx(motion.div, {\n      animate: \"enter\",\n      exit: \"exit\",\n      initial: \"exit\",\n      variants: TRANSITION_VARIANTS.fade,\n      ...getBackdropProps()\n    });\n  }, [backdrop, disableAnimation, getBackdropProps]);\n  return /* @__PURE__ */jsxs(\"div\", {\n    ...getPopoverProps(),\n    children: [backdropContent, /* @__PURE__ */jsx(RemoveScroll, {\n      forwardProps: true,\n      enabled: shouldBlockScroll && isOpen,\n      removeScrollBar: false,\n      children: disableAnimation ? content : /* @__PURE__ */jsx(motion.div, {\n        animate: \"enter\",\n        exit: \"exit\",\n        initial: \"initial\",\n        style: {\n          ...getTransformOrigins(placement === \"center\" ? \"top\" : placement)\n        },\n        variants: TRANSITION_VARIANTS.scaleSpringOpacity,\n        ...motionProps,\n        children: content\n      })\n    })]\n  });\n});\nPopoverContent.displayName = \"NextUI.PopoverContent\";\nvar popover_content_default = PopoverContent;\nexport { popover_content_default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}