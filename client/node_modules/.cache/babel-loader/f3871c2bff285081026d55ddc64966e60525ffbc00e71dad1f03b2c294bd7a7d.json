{"ast":null,"code":"import e from \"./common\";\nimport t from \"./light-theme\";\nimport l from \"../utils/clsx\";\nexport const getTokenValue = (t, l) => {\n  if (!document || !t) return \"\";\n  let o = getComputedStyle(document.documentElement);\n  const r = `--${e.prefix}-${t}-${l}`,\n    n = o.getPropertyValue(r);\n  return n && n.includes(\"var\") && getTokenValue(t, n), n;\n};\nexport const getDocumentCSSTokens = () => {\n  const l = [...Object.keys(e.theme.colors), ...Object.keys(t.colors)],\n    o = Object.keys(t.shadows);\n  return {\n    colors: l.reduce((t, l) => {\n      const o = getTokenValue(\"colors\", l);\n      return o && (t[l] = {\n        prefix: e.prefix,\n        scale: \"colors\",\n        token: l,\n        value: o\n      }), t;\n    }, {}),\n    shadows: o.reduce((t, l) => {\n      const o = getTokenValue(\"shadows\", l);\n      return o && (t[l] = {\n        prefix: e.prefix,\n        scale: \"shadows\",\n        token: l,\n        value: o\n      }), t;\n    }, {})\n  };\n};\nexport const getDocumentTheme = e => {\n  var t;\n  const l = (null == e || null == (t = e.getAttribute(\"style\")) ? void 0 : t.split(\";\").map(e => e.trim()).filter(e => e.includes(\"color-scheme\"))) || [],\n    o = l.length > 0 ? l[0].replace(\"color-scheme: \", \"\").replace(\";\", \"\") : \"\";\n  return (null == e ? void 0 : e.getAttribute(\"data-theme\")) || o;\n};\nexport const getThemeName = e => \"string\" == typeof e && null != e && e.includes(\"-theme\") ? null == e ? void 0 : e.replace(\"-theme\", \"\") : e;\nexport const changeTheme = e => {\n  var t, o;\n  if (!document) return;\n  const r = document.documentElement,\n    n = (null == r || null == (t = r.getAttribute(\"class\")) ? void 0 : t.split(\" \").filter(e => !e.includes(\"theme\") && !e.includes(\"light\") && !e.includes(\"dark\"))) || [],\n    s = (null == r || null == (o = r.getAttribute(\"style\")) ? void 0 : o.split(\";\").filter(e => !e.includes(\"color-scheme\") && e.length).map(e => `${e};`)) || [];\n  null == r || r.setAttribute(\"class\", l(n, `${getThemeName(e)}-theme`)), null == r || r.setAttribute(\"style\", l(s, `color-scheme: ${e};`));\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}