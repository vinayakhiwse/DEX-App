{"ast":null,"code":"import { createSpacingUnits, generateSpacingScale, isBaseTheme } from \"./chunk-NW5W5ANO.mjs\";\nimport { utilities } from \"./chunk-Y32IWEMZ.mjs\";\nimport { baseStyles } from \"./chunk-T7JNS25F.mjs\";\nimport { semanticColors } from \"./chunk-G4RCK475.mjs\";\nimport { flattenThemeObject } from \"./chunk-KUNVFLXJ.mjs\";\nimport { darkLayout, defaultLayout, lightLayout } from \"./chunk-7MCHEQXT.mjs\";\nimport { animations } from \"./chunk-DMASP6FA.mjs\";\nimport { commonColors } from \"./chunk-IAS3SFA4.mjs\";\n\n// src/plugin.ts\nimport Color from \"color\";\nimport plugin from \"tailwindcss/plugin.js\";\nimport get from \"lodash.get\";\nimport omit from \"lodash.omit\";\nimport forEach from \"lodash.foreach\";\nimport mapKeys from \"lodash.mapkeys\";\nimport kebabCase from \"lodash.kebabcase\";\nimport deepMerge from \"deepmerge\";\nvar DEFAULT_PREFIX = \"nextui\";\nvar resolveConfig = (themes = {}, defaultTheme, prefix) => {\n  const resolved = {\n    variants: [],\n    utilities: {},\n    colors: {}\n  };\n  forEach(themes, ({\n    extend,\n    layout,\n    colors\n  }, themeName) => {\n    let cssSelector = `.${themeName},[data-theme=\"${themeName}\"]`;\n    const scheme = themeName === \"light\" || themeName === \"dark\" ? themeName : extend;\n    if (themeName === defaultTheme) {\n      cssSelector = `:root,${cssSelector}`;\n    }\n    resolved.utilities[cssSelector] = scheme ? {\n      \"color-scheme\": scheme\n    } : {};\n    const flatColors = flattenThemeObject(colors);\n    const flatLayout = layout ? mapKeys(layout, (value, key) => kebabCase(key)) : {};\n    resolved.variants.push({\n      name: themeName,\n      definition: [`&.${themeName}`, `&[data-theme='${themeName}']`]\n    });\n    forEach(flatColors, (colorValue, colorName) => {\n      if (!colorValue) return;\n      try {\n        const [h, s, l, defaultAlphaValue] = Color(colorValue).hsl().round().array();\n        const nextuiColorVariable = `--${prefix}-${colorName}`;\n        const nextuiOpacityVariable = `--${prefix}-${colorName}-opacity`;\n        resolved.utilities[cssSelector][nextuiColorVariable] = `${h} ${s}% ${l}%`;\n        if (typeof defaultAlphaValue === \"number\") {\n          resolved.utilities[cssSelector][nextuiOpacityVariable] = defaultAlphaValue.toFixed(2);\n        }\n        resolved.colors[colorName] = ({\n          opacityVariable,\n          opacityValue\n        }) => {\n          if (!isNaN(+opacityValue)) {\n            return `hsl(var(${nextuiColorVariable}) / ${opacityValue})`;\n          }\n          if (opacityVariable) {\n            return `hsl(var(${nextuiColorVariable}) / var(${nextuiOpacityVariable}, var(${opacityVariable})))`;\n          }\n          return `hsl(var(${nextuiColorVariable}) / var(${nextuiOpacityVariable}, 1))`;\n        };\n      } catch (error) {\n        console.log(\"error\", error == null ? void 0 : error.message);\n      }\n    });\n    forEach(flatLayout, (value, key) => {\n      if (!value) return;\n      if (typeof value === \"object\") {\n        forEach(value, (v, k) => {\n          const layoutVariable = `--${prefix}-${key}-${k}`;\n          resolved.utilities[cssSelector][layoutVariable] = v;\n        });\n      } else if (key === \"spacing-unit\") {\n        const layoutVariable = `--${prefix}-${key}`;\n        resolved.utilities[cssSelector][layoutVariable] = value;\n        const spacingScale = generateSpacingScale(Number(value));\n        forEach(spacingScale, (v, k) => {\n          const layoutVariable2 = `--${prefix}-${key}-${k}`;\n          resolved.utilities[cssSelector][layoutVariable2] = v;\n        });\n      } else {\n        const layoutVariable = `--${prefix}-${key}`;\n        resolved.utilities[cssSelector][layoutVariable] = value;\n      }\n    });\n  });\n  return resolved;\n};\nvar corePlugin = (themes = {}, defaultTheme, prefix, addCommonColors) => {\n  const resolved = resolveConfig(themes, defaultTheme, prefix);\n  const minSizes = {\n    \"unit-1\": `var(--${prefix}-spacing-unit)`,\n    \"unit-2\": `var(--${prefix}-spacing-unit-2`,\n    \"unit-3\": `var(--${prefix}-spacing-unit-3)`,\n    \"unit-3.5\": `var(--${prefix}-spacing-unit-3_5)`,\n    \"unit-4\": `var(--${prefix}-spacing-unit-4)`,\n    \"unit-5\": `var(--${prefix}-spacing-unit-5)`,\n    \"unit-6\": `var(--${prefix}-spacing-unit-6)`,\n    \"unit-7\": `var(--${prefix}-spacing-unit-7)`,\n    \"unit-8\": `var(--${prefix}-spacing-unit-8)`,\n    \"unit-9\": `var(--${prefix}-spacing-unit-9)`,\n    \"unit-10\": `var(--${prefix}-spacing-unit-10)`,\n    \"unit-11\": `var(--${prefix}-spacing-unit-11)`,\n    \"unit-12\": `var(--${prefix}-spacing-unit-12)`,\n    \"unit-16\": `var(--${prefix}-spacing-unit-16)`,\n    \"unit-20\": `var(--${prefix}-spacing-unit-20)`,\n    \"unit-24\": `var(--${prefix}-spacing-unit-24)`\n  };\n  return plugin(({\n    addBase,\n    addUtilities,\n    addVariant\n  }) => {\n    addBase({\n      [\":root, [data-theme]\"]: {\n        ...baseStyles(prefix)\n      }\n    });\n    addUtilities({\n      ...resolved.utilities,\n      ...utilities\n    });\n    resolved.variants.forEach(variant => {\n      addVariant(variant.name, variant.definition);\n    });\n  }, {\n    theme: {\n      extend: {\n        colors: {\n          ...(addCommonColors ? commonColors : {}),\n          ...resolved.colors\n        },\n        scale: {\n          \"80\": \"0.8\"\n        },\n        height: {\n          divider: `var(--${prefix}-divider-weight)`\n        },\n        width: {\n          divider: `var(--${prefix}-divider-weight)`\n        },\n        spacing: {\n          unit: `var(--${prefix}-spacing-unit)`,\n          ...createSpacingUnits(prefix)\n        },\n        minWidth: {\n          ...minSizes\n        },\n        minHeight: {\n          ...minSizes\n        },\n        fontSize: {\n          tiny: [`var(--${prefix}-font-size-tiny)`, `var(--${prefix}-line-height-tiny)`],\n          small: [`var(--${prefix}-font-size-small)`, `var(--${prefix}-line-height-small)`],\n          medium: [`var(--${prefix}-font-size-medium)`, `var(--${prefix}-line-height-medium)`],\n          large: [`var(--${prefix}-font-size-large)`, `var(--${prefix}-line-height-large)`]\n        },\n        borderRadius: {\n          small: `var(--${prefix}-radius-small)`,\n          medium: `var(--${prefix}-radius-medium)`,\n          large: `var(--${prefix}-radius-large)`\n        },\n        opacity: {\n          disabled: `var(--${prefix}-disabled-opacity)`\n        },\n        borderWidth: {\n          small: `var(--${prefix}-border-width-small)`,\n          medium: `var(--${prefix}-border-width-medium)`,\n          large: `var(--${prefix}-border-width-large)`,\n          1: \"1px\",\n          1.5: \"1.5px\",\n          3: \"3px\",\n          5: \"5px\"\n        },\n        boxShadow: {\n          small: `var(--${prefix}-box-shadow-small)`,\n          medium: `var(--${prefix}-box-shadow-medium)`,\n          large: `var(--${prefix}-box-shadow-large)`\n        },\n        backgroundImage: {\n          \"stripe-gradient\": \"linear-gradient(45deg, rgba(0, 0, 0, 0.1) 25%, transparent 25%, transparent 50%, rgba(0, 0, 0, 0.1) 50%, rgba(0, 0, 0, 0.1) 75%, transparent 75%, transparent)\"\n        },\n        transitionDuration: {\n          0: \"0ms\",\n          250: \"250ms\",\n          400: \"400ms\"\n        },\n        transitionTimingFunction: {\n          \"soft-spring\": \"cubic-bezier(0.155, 1.105, 0.295, 1.12)\"\n        },\n        ...animations\n      }\n    }\n  });\n};\nvar nextui = (config = {}) => {\n  const {\n    themes: themeObject = {},\n    defaultTheme = \"light\",\n    layout: userLayout,\n    defaultExtendTheme = \"light\",\n    prefix: defaultPrefix = DEFAULT_PREFIX,\n    addCommonColors = false\n  } = config;\n  const userLightColors = get(themeObject, \"light.colors\", {});\n  const userDarkColors = get(themeObject, \"dark.colors\", {});\n  const defaultLayoutObj = userLayout && typeof userLayout === \"object\" ? deepMerge(defaultLayout, userLayout) : defaultLayout;\n  const baseLayouts = {\n    light: {\n      ...defaultLayoutObj,\n      ...lightLayout\n    },\n    dark: {\n      ...defaultLayoutObj,\n      ...darkLayout\n    }\n  };\n  let otherThemes = omit(themeObject, [\"light\", \"dark\"]) || {};\n  forEach(otherThemes, ({\n    extend,\n    colors,\n    layout\n  }, themeName) => {\n    const baseTheme = extend && isBaseTheme(extend) ? extend : defaultExtendTheme;\n    if (colors && typeof colors === \"object\") {\n      otherThemes[themeName].colors = deepMerge(semanticColors[baseTheme], colors);\n    }\n    if (layout && typeof layout === \"object\") {\n      otherThemes[themeName].layout = deepMerge(extend ? baseLayouts[extend] : defaultLayoutObj, layout);\n    }\n  });\n  const light = {\n    layout: deepMerge(baseLayouts.light, get(themeObject, \"light.layout\", {})),\n    colors: deepMerge(semanticColors.light, userLightColors)\n  };\n  const dark = {\n    layout: deepMerge(baseLayouts.dark, get(themeObject, \"dark.layout\", {})),\n    colors: deepMerge(semanticColors.dark, userDarkColors)\n  };\n  const themes = {\n    light,\n    dark,\n    ...otherThemes\n  };\n  return corePlugin(themes, defaultTheme, defaultPrefix, addCommonColors);\n};\nexport { nextui };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}