{"ast":null,"code":"import { poolcontract, tokenBContract, tokenPoolContract } from \"./contract\";\nimport { tokenAContract } from \"./contract\";\nimport { toWei } from \"./ether-utils\";\nexport const CreateLiquidityPool = async (name, symbol, tokenAddressA, tokenAddressB) => {\n  try {\n    const contractPoolObj = await poolcontract();\n    const data = await contractPoolObj.createLiquidityPool(name, symbol, tokenAddressA, tokenAddressB);\n    const receipt = await data.wait();\n    return receipt;\n  } catch (error) {\n    console.log(\"error in createliquidityPool..\", error);\n  }\n};\n_c = CreateLiquidityPool;\nexport const AddLiquidityAmount = async (amountTokenA, amountTokenB, tokenA, tokenB) => {\n  try {\n    const contractPoolObj = await poolcontract();\n    const tokenContractObj = await contractPoolObj.addLiquidity(toWei(amountTokenA), toWei(amountTokenB), tokenA, tokenB);\n    const tokenContractData = await tokenContractObj.wait();\n    console.log(\"liquidity provider Amount added..\", tokenContractData);\n    return tokenContractData;\n  } catch (error) {\n    console.log(\"error in Adding liquidity provider amount..\", error);\n  }\n};\n\n//we need to approve tokens approve to be transferred from our account to the contract.\n_c2 = AddLiquidityAmount;\nexport const TokenAapproveAllowances = async amount => {\n  try {\n    const contractObj = await poolcontract();\n    const address = await contractObj.addressTokenA();\n    const tokenContractObj = await tokenPoolContract(address);\n    const data = await tokenContractObj.approve(`0x343909a9B02A32e248fABB0e37428921Eac26CD1`, toWei(amount));\n    const receipt = await data.wait();\n    return receipt;\n  } catch (error) {\n    console.log(\"error\", error);\n  }\n};\n\n//here tokenA approval function..\n_c3 = TokenAapproveAllowances;\nexport const TokenAapprove = async amountTokenA => {\n  try {\n    const tokenApprove = await tokenAContract();\n    const data = await tokenApprove.approve(`0x343909a9B02A32e248fABB0e37428921Eac26CD1`, toWei(amountTokenA));\n    const receipt = await data.wait();\n    console.log(\"Approve tokenA done..\", receipt);\n    return receipt;\n  } catch (error) {\n    console.log(\"error in Approving tokenA..\", error);\n  }\n};\n\n//here tokenB approval function..\n_c4 = TokenAapprove;\nexport const TokenBAapprove = async amountTokenB => {\n  try {\n    const tokenApprove = await tokenBContract();\n    const data = await tokenApprove.approve(`0x343909a9B02A32e248fABB0e37428921Eac26CD1`, toWei(amountTokenB));\n    const receipt = await data.wait();\n    console.log(\"Approve tokenB done..\", receipt);\n    return receipt;\n  } catch (error) {\n    console.log(\"error in Approving tokenB..\", error);\n  }\n};\n\n//here we getting the reserve token.\n_c5 = TokenBAapprove;\nexport const ReserveTokenA = async () => {\n  try {\n    const contractPoolObj = await poolcontract();\n    const tokenContractObj = await contractPoolObj.reserveTokenA();\n    const reserveTokenA = await tokenContractObj.wait();\n    console.log(\"liquidity provider Amount added..\", reserveTokenA);\n    return reserveTokenA;\n  } catch (error) {\n    console.log(\"error in getting the reserve tokenA..\", error);\n  }\n};\n\n//here we getting the reserve token.\n_c6 = ReserveTokenA;\nexport const ReserveTokenB = async () => {\n  try {\n    const contractPoolObj = await poolcontract();\n    const tokenContractObj = await contractPoolObj.reserveTokenB();\n    const reserveTokenB = await tokenContractObj.wait();\n    console.log(\"liquidity provider Amount added..\", reserveTokenB);\n    return reserveTokenB;\n  } catch (error) {\n    console.log(\"error in getting the reserve tokenA..\", error);\n  }\n};\n_c7 = ReserveTokenB;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n$RefreshReg$(_c, \"CreateLiquidityPool\");\n$RefreshReg$(_c2, \"AddLiquidityAmount\");\n$RefreshReg$(_c3, \"TokenAapproveAllowances\");\n$RefreshReg$(_c4, \"TokenAapprove\");\n$RefreshReg$(_c5, \"TokenBAapprove\");\n$RefreshReg$(_c6, \"ReserveTokenA\");\n$RefreshReg$(_c7, \"ReserveTokenB\");","map":{"version":3,"names":["poolcontract","tokenBContract","tokenPoolContract","tokenAContract","toWei","CreateLiquidityPool","name","symbol","tokenAddressA","tokenAddressB","contractPoolObj","data","createLiquidityPool","receipt","wait","error","console","log","_c","AddLiquidityAmount","amountTokenA","amountTokenB","tokenA","tokenB","tokenContractObj","addLiquidity","tokenContractData","_c2","TokenAapproveAllowances","amount","contractObj","address","addressTokenA","approve","_c3","TokenAapprove","tokenApprove","_c4","TokenBAapprove","_c5","ReserveTokenA","reserveTokenA","_c6","ReserveTokenB","reserveTokenB","_c7","$RefreshReg$"],"sources":["/home/hp/Desktop/Dex-back/client/src/utils/pool.js"],"sourcesContent":["import { poolcontract, tokenBContract, tokenPoolContract } from \"./contract\";\nimport { tokenAContract } from \"./contract\";\nimport { toWei } from \"./ether-utils\";\n\nexport const CreateLiquidityPool = async (\n  name,\n  symbol,\n  tokenAddressA,\n  tokenAddressB\n) => {\n  try {\n    const contractPoolObj = await poolcontract();\n    const data = await contractPoolObj.createLiquidityPool(\n      name,\n      symbol,\n      tokenAddressA,\n      tokenAddressB\n    );\n    const receipt = await data.wait();\n    return receipt;\n  } catch (error) {\n    console.log(\"error in createliquidityPool..\", error);\n  }\n};\n\nexport const AddLiquidityAmount = async (\n  amountTokenA,\n  amountTokenB,\n  tokenA,\n  tokenB\n) => {\n  try {\n    const contractPoolObj = await poolcontract();\n    const tokenContractObj = await contractPoolObj.addLiquidity(\n      toWei(amountTokenA),\n      toWei(amountTokenB),\n      tokenA,\n      tokenB\n    );\n    const tokenContractData = await tokenContractObj.wait();\n    console.log(\"liquidity provider Amount added..\", tokenContractData);\n    return tokenContractData;\n  } catch (error) {\n    console.log(\"error in Adding liquidity provider amount..\", error);\n  }\n};\n\n\n//we need to approve tokens approve to be transferred from our account to the contract.\nexport const TokenAapproveAllowances = async (amount) => {\n  try {\n    const contractObj = await poolcontract();\n    const address = await contractObj.addressTokenA();\n    const tokenContractObj = await tokenPoolContract(address);\n    const data = await tokenContractObj.approve(\n      `0x343909a9B02A32e248fABB0e37428921Eac26CD1`,\n      toWei(amount)\n    );\n    const receipt = await data.wait();\n    return receipt;\n  } catch (error) {\n    console.log(\"error\", error);\n  }\n};\n\n\n//here tokenA approval function..\nexport const TokenAapprove = async (amountTokenA) => {\n  try {\n    const tokenApprove = await tokenAContract();\n    const data = await tokenApprove.approve(\n      `0x343909a9B02A32e248fABB0e37428921Eac26CD1`,\n      toWei(amountTokenA)\n    );\n    const receipt = await data.wait();\n    console.log(\"Approve tokenA done..\", receipt);\n    return receipt;\n  } catch (error) {\n    console.log(\"error in Approving tokenA..\", error);\n  }\n};\n\n//here tokenB approval function..\nexport const TokenBAapprove = async (amountTokenB) => {\n  try {\n    const tokenApprove = await tokenBContract();\n    const data = await tokenApprove.approve(\n      `0x343909a9B02A32e248fABB0e37428921Eac26CD1`,\n      toWei(amountTokenB)\n    );\n    const receipt = await data.wait();\n    console.log(\"Approve tokenB done..\", receipt);\n    return receipt;\n  } catch (error) {\n    console.log(\"error in Approving tokenB..\", error);\n  }\n};\n\n//here we getting the reserve token.\nexport const ReserveTokenA = async () => {\n  try {\n    const contractPoolObj = await poolcontract();\n    const tokenContractObj = await contractPoolObj.reserveTokenA();\n    const reserveTokenA = await tokenContractObj.wait();\n    console.log(\"liquidity provider Amount added..\", reserveTokenA);\n    return reserveTokenA;\n  } catch (error) {\n    console.log(\"error in getting the reserve tokenA..\", error);\n  }\n};\n\n//here we getting the reserve token.\nexport const ReserveTokenB = async () => {\n  try {\n    const contractPoolObj = await poolcontract();\n    const tokenContractObj = await contractPoolObj.reserveTokenB();\n    const reserveTokenB = await tokenContractObj.wait();\n    console.log(\"liquidity provider Amount added..\", reserveTokenB);\n    return reserveTokenB;\n  } catch (error) {\n    console.log(\"error in getting the reserve tokenA..\", error);\n  }\n};\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,cAAc,EAAEC,iBAAiB,QAAQ,YAAY;AAC5E,SAASC,cAAc,QAAQ,YAAY;AAC3C,SAASC,KAAK,QAAQ,eAAe;AAErC,OAAO,MAAMC,mBAAmB,GAAG,MAAAA,CACjCC,IAAI,EACJC,MAAM,EACNC,aAAa,EACbC,aAAa,KACV;EACH,IAAI;IACF,MAAMC,eAAe,GAAG,MAAMV,YAAY,CAAC,CAAC;IAC5C,MAAMW,IAAI,GAAG,MAAMD,eAAe,CAACE,mBAAmB,CACpDN,IAAI,EACJC,MAAM,EACNC,aAAa,EACbC,aACF,CAAC;IACD,MAAMI,OAAO,GAAG,MAAMF,IAAI,CAACG,IAAI,CAAC,CAAC;IACjC,OAAOD,OAAO;EAChB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEF,KAAK,CAAC;EACtD;AACF,CAAC;AAACG,EAAA,GAnBWb,mBAAmB;AAqBhC,OAAO,MAAMc,kBAAkB,GAAG,MAAAA,CAChCC,YAAY,EACZC,YAAY,EACZC,MAAM,EACNC,MAAM,KACH;EACH,IAAI;IACF,MAAMb,eAAe,GAAG,MAAMV,YAAY,CAAC,CAAC;IAC5C,MAAMwB,gBAAgB,GAAG,MAAMd,eAAe,CAACe,YAAY,CACzDrB,KAAK,CAACgB,YAAY,CAAC,EACnBhB,KAAK,CAACiB,YAAY,CAAC,EACnBC,MAAM,EACNC,MACF,CAAC;IACD,MAAMG,iBAAiB,GAAG,MAAMF,gBAAgB,CAACV,IAAI,CAAC,CAAC;IACvDE,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAES,iBAAiB,CAAC;IACnE,OAAOA,iBAAiB;EAC1B,CAAC,CAAC,OAAOX,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAAC,6CAA6C,EAAEF,KAAK,CAAC;EACnE;AACF,CAAC;;AAGD;AAAAY,GAAA,GAvBaR,kBAAkB;AAwB/B,OAAO,MAAMS,uBAAuB,GAAG,MAAOC,MAAM,IAAK;EACvD,IAAI;IACF,MAAMC,WAAW,GAAG,MAAM9B,YAAY,CAAC,CAAC;IACxC,MAAM+B,OAAO,GAAG,MAAMD,WAAW,CAACE,aAAa,CAAC,CAAC;IACjD,MAAMR,gBAAgB,GAAG,MAAMtB,iBAAiB,CAAC6B,OAAO,CAAC;IACzD,MAAMpB,IAAI,GAAG,MAAMa,gBAAgB,CAACS,OAAO,CACxC,4CAA2C,EAC5C7B,KAAK,CAACyB,MAAM,CACd,CAAC;IACD,MAAMhB,OAAO,GAAG,MAAMF,IAAI,CAACG,IAAI,CAAC,CAAC;IACjC,OAAOD,OAAO;EAChB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEF,KAAK,CAAC;EAC7B;AACF,CAAC;;AAGD;AAAAmB,GAAA,GAjBaN,uBAAuB;AAkBpC,OAAO,MAAMO,aAAa,GAAG,MAAOf,YAAY,IAAK;EACnD,IAAI;IACF,MAAMgB,YAAY,GAAG,MAAMjC,cAAc,CAAC,CAAC;IAC3C,MAAMQ,IAAI,GAAG,MAAMyB,YAAY,CAACH,OAAO,CACpC,4CAA2C,EAC5C7B,KAAK,CAACgB,YAAY,CACpB,CAAC;IACD,MAAMP,OAAO,GAAG,MAAMF,IAAI,CAACG,IAAI,CAAC,CAAC;IACjCE,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEJ,OAAO,CAAC;IAC7C,OAAOA,OAAO;EAChB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEF,KAAK,CAAC;EACnD;AACF,CAAC;;AAED;AAAAsB,GAAA,GAfaF,aAAa;AAgB1B,OAAO,MAAMG,cAAc,GAAG,MAAOjB,YAAY,IAAK;EACpD,IAAI;IACF,MAAMe,YAAY,GAAG,MAAMnC,cAAc,CAAC,CAAC;IAC3C,MAAMU,IAAI,GAAG,MAAMyB,YAAY,CAACH,OAAO,CACpC,4CAA2C,EAC5C7B,KAAK,CAACiB,YAAY,CACpB,CAAC;IACD,MAAMR,OAAO,GAAG,MAAMF,IAAI,CAACG,IAAI,CAAC,CAAC;IACjCE,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEJ,OAAO,CAAC;IAC7C,OAAOA,OAAO;EAChB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEF,KAAK,CAAC;EACnD;AACF,CAAC;;AAED;AAAAwB,GAAA,GAfaD,cAAc;AAgB3B,OAAO,MAAME,aAAa,GAAG,MAAAA,CAAA,KAAY;EACvC,IAAI;IACF,MAAM9B,eAAe,GAAG,MAAMV,YAAY,CAAC,CAAC;IAC5C,MAAMwB,gBAAgB,GAAG,MAAMd,eAAe,CAAC+B,aAAa,CAAC,CAAC;IAC9D,MAAMA,aAAa,GAAG,MAAMjB,gBAAgB,CAACV,IAAI,CAAC,CAAC;IACnDE,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEwB,aAAa,CAAC;IAC/D,OAAOA,aAAa;EACtB,CAAC,CAAC,OAAO1B,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAAEF,KAAK,CAAC;EAC7D;AACF,CAAC;;AAED;AAAA2B,GAAA,GAZaF,aAAa;AAa1B,OAAO,MAAMG,aAAa,GAAG,MAAAA,CAAA,KAAY;EACvC,IAAI;IACF,MAAMjC,eAAe,GAAG,MAAMV,YAAY,CAAC,CAAC;IAC5C,MAAMwB,gBAAgB,GAAG,MAAMd,eAAe,CAACkC,aAAa,CAAC,CAAC;IAC9D,MAAMA,aAAa,GAAG,MAAMpB,gBAAgB,CAACV,IAAI,CAAC,CAAC;IACnDE,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAE2B,aAAa,CAAC;IAC/D,OAAOA,aAAa;EACtB,CAAC,CAAC,OAAO7B,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAAEF,KAAK,CAAC;EAC7D;AACF,CAAC;AAAC8B,GAAA,GAVWF,aAAa;AAAA,IAAAzB,EAAA,EAAAS,GAAA,EAAAO,GAAA,EAAAG,GAAA,EAAAE,GAAA,EAAAG,GAAA,EAAAG,GAAA;AAAAC,YAAA,CAAA5B,EAAA;AAAA4B,YAAA,CAAAnB,GAAA;AAAAmB,YAAA,CAAAZ,GAAA;AAAAY,YAAA,CAAAT,GAAA;AAAAS,YAAA,CAAAP,GAAA;AAAAO,YAAA,CAAAJ,GAAA;AAAAI,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}