{"ast":null,"code":"// src/index.ts\nimport { useMemo, useCallback, useState, useEffect } from \"react\";\nimport { range } from \"@nextui-org/shared-utils\";\nvar PaginationItemType = /* @__PURE__ */(PaginationItemType2 => {\n  PaginationItemType2[\"DOTS\"] = \"dots\";\n  PaginationItemType2[\"PREV\"] = \"prev\";\n  PaginationItemType2[\"NEXT\"] = \"next\";\n  return PaginationItemType2;\n})(PaginationItemType || {});\nfunction usePagination(props) {\n  const {\n    page,\n    total,\n    siblings = 1,\n    boundaries = 1,\n    initialPage = 1,\n    showControls = false,\n    onChange\n  } = props;\n  const [activePage, setActivePage] = useState(page || initialPage);\n  const onChangeActivePage = newPage => {\n    setActivePage(newPage);\n    onChange && onChange(newPage);\n  };\n  useEffect(() => {\n    if (page && page !== activePage) {\n      setActivePage(page);\n    }\n  }, [page]);\n  const setPage = useCallback(pageNumber => {\n    if (pageNumber <= 0) {\n      onChangeActivePage(1);\n    } else if (pageNumber > total) {\n      onChangeActivePage(total);\n    } else {\n      onChangeActivePage(pageNumber);\n    }\n  }, [total, activePage]);\n  const next = () => setPage(activePage + 1);\n  const previous = () => setPage(activePage - 1);\n  const first = () => setPage(1);\n  const last = () => setPage(total);\n  const formatRange = useCallback(range2 => {\n    if (showControls) {\n      return [\"prev\" /* PREV */, ...range2, \"next\" /* NEXT */];\n    }\n\n    return range2;\n  }, [showControls]);\n  const paginationRange = useMemo(() => {\n    const totalPageNumbers = siblings * 2 + 3 + boundaries * 2;\n    if (totalPageNumbers >= total) {\n      return formatRange(range(1, total));\n    }\n    const leftSiblingIndex = Math.max(activePage - siblings, boundaries);\n    const rightSiblingIndex = Math.min(activePage + siblings, total - boundaries);\n    const shouldShowLeftDots = leftSiblingIndex > boundaries + 2;\n    const shouldShowRightDots = rightSiblingIndex < total - (boundaries + 1);\n    if (!shouldShowLeftDots && shouldShowRightDots) {\n      const leftItemCount = siblings * 2 + boundaries + 2;\n      return formatRange([...range(1, leftItemCount), \"dots\" /* DOTS */, ...range(total - (boundaries - 1), total)]);\n    }\n    if (shouldShowLeftDots && !shouldShowRightDots) {\n      const rightItemCount = boundaries + 1 + 2 * siblings;\n      return formatRange([...range(1, boundaries), \"dots\" /* DOTS */, ...range(total - rightItemCount, total)]);\n    }\n    return formatRange([...range(1, boundaries), \"dots\" /* DOTS */, ...range(leftSiblingIndex, rightSiblingIndex), \"dots\" /* DOTS */, ...range(total - boundaries + 1, total)]);\n  }, [total, activePage, siblings, boundaries, formatRange]);\n  return {\n    range: paginationRange,\n    activePage,\n    setPage,\n    next,\n    previous,\n    first,\n    last\n  };\n}\nexport { PaginationItemType, usePagination };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}