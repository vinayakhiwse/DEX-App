{"ast":null,"code":"import { EventEmitter } from \"events\";\nimport { IJsonRpcProvider, isJsonRpcResponse, formatJsonRpcRequest, isJsonRpcError, getBigIntRpcId } from \"@walletconnect/jsonrpc-utils\";\nexport class JsonRpcProvider extends IJsonRpcProvider {\n  constructor(connection) {\n    super(connection);\n    this.events = new EventEmitter();\n    this.hasRegisteredEventListeners = false;\n    this.connection = this.setConnection(connection);\n    if (this.connection.connected) {\n      this.registerEventListeners();\n    }\n  }\n  async connect(connection = this.connection) {\n    await this.open(connection);\n  }\n  async disconnect() {\n    await this.close();\n  }\n  on(event, listener) {\n    this.events.on(event, listener);\n  }\n  once(event, listener) {\n    this.events.once(event, listener);\n  }\n  off(event, listener) {\n    this.events.off(event, listener);\n  }\n  removeListener(event, listener) {\n    this.events.removeListener(event, listener);\n  }\n  async request(request, context) {\n    return this.requestStrict(formatJsonRpcRequest(request.method, request.params || [], request.id || getBigIntRpcId().toString()), context);\n  }\n  async requestStrict(request, context) {\n    return new Promise(async (resolve, reject) => {\n      if (!this.connection.connected) {\n        try {\n          await this.open();\n        } catch (e) {\n          reject(e);\n        }\n      }\n      this.events.on(`${request.id}`, response => {\n        if (isJsonRpcError(response)) {\n          reject(response.error);\n        } else {\n          resolve(response.result);\n        }\n      });\n      try {\n        await this.connection.send(request, context);\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n  setConnection(connection = this.connection) {\n    return connection;\n  }\n  onPayload(payload) {\n    this.events.emit(\"payload\", payload);\n    if (isJsonRpcResponse(payload)) {\n      this.events.emit(`${payload.id}`, payload);\n    } else {\n      this.events.emit(\"message\", {\n        type: payload.method,\n        data: payload.params\n      });\n    }\n  }\n  onClose(event) {\n    if (event && event.code === 3000) {\n      this.events.emit(\"error\", new Error(`WebSocket connection closed abnormally with code: ${event.code} ${event.reason ? `(${event.reason})` : \"\"}`));\n    }\n    this.events.emit(\"disconnect\");\n  }\n  async open(connection = this.connection) {\n    if (this.connection === connection && this.connection.connected) return;\n    if (this.connection.connected) this.close();\n    if (typeof connection === \"string\") {\n      await this.connection.open(connection);\n      connection = this.connection;\n    }\n    this.connection = this.setConnection(connection);\n    await this.connection.open();\n    this.registerEventListeners();\n    this.events.emit(\"connect\");\n  }\n  async close() {\n    await this.connection.close();\n  }\n  registerEventListeners() {\n    if (this.hasRegisteredEventListeners) return;\n    this.connection.on(\"payload\", payload => this.onPayload(payload));\n    this.connection.on(\"close\", event => this.onClose(event));\n    this.connection.on(\"error\", error => this.events.emit(\"error\", error));\n    this.connection.on(\"register_error\", error => this.onClose());\n    this.hasRegisteredEventListeners = true;\n  }\n}\nexport default JsonRpcProvider;\n//# sourceMappingURL=provider.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}