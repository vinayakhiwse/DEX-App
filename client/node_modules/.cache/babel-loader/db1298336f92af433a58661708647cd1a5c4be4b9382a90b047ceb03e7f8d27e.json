{"ast":null,"code":"import { disposables as m } from '../../utils/disposables.js';\nimport { isIOS as f } from '../../utils/platform.js';\nfunction T() {\n  if (!f()) return {};\n  let l;\n  return {\n    before() {\n      l = window.pageYOffset;\n    },\n    after({\n      doc: o,\n      d: t,\n      meta: s\n    }) {\n      function i(n) {\n        return s.containers.flatMap(e => e()).some(e => e.contains(n));\n      }\n      t.microTask(() => {\n        if (window.getComputedStyle(o.documentElement).scrollBehavior !== \"auto\") {\n          let e = m();\n          e.style(o.documentElement, \"scroll-behavior\", \"auto\"), t.add(() => t.microTask(() => e.dispose()));\n        }\n        t.style(o.body, \"marginTop\", `-${l}px`), window.scrollTo(0, 0);\n        let n = null;\n        t.addEventListener(o, \"click\", e => {\n          if (e.target instanceof HTMLElement) try {\n            let r = e.target.closest(\"a\");\n            if (!r) return;\n            let {\n                hash: c\n              } = new URL(r.href),\n              a = o.querySelector(c);\n            a && !i(a) && (n = a);\n          } catch {}\n        }, !0), t.addEventListener(o, \"touchmove\", e => {\n          e.target instanceof HTMLElement && !i(e.target) && e.preventDefault();\n        }, {\n          passive: !1\n        }), t.add(() => {\n          window.scrollTo(0, window.pageYOffset + l), n && n.isConnected && (n.scrollIntoView({\n            block: \"nearest\"\n          }), n = null);\n        });\n      });\n    }\n  };\n}\nexport { T as handleIOSLocking };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}