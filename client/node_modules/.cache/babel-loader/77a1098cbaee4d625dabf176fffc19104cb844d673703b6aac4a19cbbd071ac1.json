{"ast":null,"code":"\"use client\";\n\nimport { useTooltip } from \"./chunk-62U42LRQ.mjs\";\n\n// src/tooltip.tsx\nimport { useMemo } from \"react\";\nimport { forwardRef } from \"@nextui-org/system\";\nimport { OverlayContainer } from \"@react-aria/overlays\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport { TRANSITION_VARIANTS } from \"@nextui-org/framer-transitions\";\nimport { warn } from \"@nextui-org/shared-utils\";\nimport { Children, cloneElement } from \"react\";\nimport { getTransformOrigins } from \"@nextui-org/aria-utils\";\nimport { Fragment, jsx, jsxs } from \"react/jsx-runtime\";\nvar Tooltip = forwardRef((props, ref) => {\n  const {\n    Component,\n    children,\n    content,\n    isOpen,\n    portalContainer,\n    placement,\n    disableAnimation,\n    motionProps,\n    showArrow,\n    getTriggerProps,\n    getTooltipProps,\n    getArrowProps\n  } = useTooltip({\n    ...props,\n    ref\n  });\n  let trigger;\n  const {\n    className,\n    ...otherTooltipProps\n  } = getTooltipProps();\n  try {\n    const child = Children.only(children);\n    trigger = cloneElement(child, getTriggerProps(child.props, child.ref));\n  } catch (error) {\n    trigger = /* @__PURE__ */jsx(\"span\", {});\n    warn(\"Tooltip must have only one child node. Please, check your code.\");\n  }\n  const arrowContent = useMemo(() => {\n    if (!showArrow) return null;\n    return /* @__PURE__ */jsx(\"span\", {\n      ...getArrowProps()\n    });\n  }, [showArrow, getArrowProps]);\n  const animatedContent = useMemo(() => {\n    return /* @__PURE__ */jsx(\"div\", {\n      ...otherTooltipProps,\n      children: /* @__PURE__ */jsxs(motion.div, {\n        animate: \"enter\",\n        exit: \"exit\",\n        initial: \"exit\",\n        style: {\n          ...getTransformOrigins(placement)\n        },\n        variants: TRANSITION_VARIANTS.scaleSpring,\n        ...motionProps,\n        children: [/* @__PURE__ */jsx(Component, {\n          className,\n          children: content\n        }), arrowContent]\n      })\n    });\n  }, [otherTooltipProps, className, placement, motionProps, Component, content, arrowContent]);\n  return /* @__PURE__ */jsxs(Fragment, {\n    children: [trigger, disableAnimation && isOpen ? /* @__PURE__ */jsx(OverlayContainer, {\n      portalContainer,\n      children: /* @__PURE__ */jsxs(\"div\", {\n        ...otherTooltipProps,\n        children: [/* @__PURE__ */jsx(Component, {\n          className,\n          children: content\n        }), arrowContent]\n      })\n    }) : /* @__PURE__ */jsx(AnimatePresence, {\n      children: isOpen ? /* @__PURE__ */jsx(OverlayContainer, {\n        portalContainer,\n        children: animatedContent\n      }) : null\n    })]\n  });\n});\nTooltip.displayName = \"NextUI.Tooltip\";\nvar tooltip_default = Tooltip;\nexport { tooltip_default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}