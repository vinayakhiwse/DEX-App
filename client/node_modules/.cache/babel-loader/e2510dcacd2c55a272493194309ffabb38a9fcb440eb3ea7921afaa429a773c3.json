{"ast":null,"code":"// src/use-accordion-item.ts\nimport { useId, useCallback, useEffect } from \"react\";\nimport { focusSafely } from \"@react-aria/focus\";\nimport { useButton } from \"@react-aria/button\";\nfunction useReactAriaAccordionItem(props, state, ref) {\n  let {\n    item,\n    isDisabled: isDisabledProp\n  } = props;\n  let key = item.key;\n  let manager = state.selectionManager;\n  let buttonId = useId();\n  let regionId = useId();\n  let isDisabled = state.disabledKeys.has(item.key) || isDisabledProp;\n  useEffect(() => {\n    let isFocused = key === state.focusedKey;\n    if (isFocused && document.activeElement !== ref.current) {\n      ref.current && focusSafely(ref.current);\n    }\n  }, [ref, key, state.focusedKey]);\n  let onSelect = useCallback(e => {\n    if (!manager.canSelectItem(key)) {\n      return;\n    }\n    manager.select(key, e);\n    state.toggleKey(key);\n  }, [key, manager]);\n  const extendFocusSelection = useCallback(toKey => {\n    if (manager.selectionBehavior === \"replace\") {\n      manager.extendSelection(toKey);\n    }\n    manager.setFocusedKey(toKey);\n  }, [manager]);\n  const onKeyDown = useCallback(event => {\n    const keyMap = {\n      ArrowDown: () => {\n        const nextKey = state.collection.getKeyAfter(key);\n        if (nextKey && state.disabledKeys.has(nextKey)) {\n          const nextEnabledKey = state.collection.getKeyAfter(nextKey);\n          nextEnabledKey && extendFocusSelection(nextEnabledKey);\n        } else {\n          nextKey && extendFocusSelection(nextKey);\n        }\n      },\n      ArrowUp: () => {\n        const prevKey = state.collection.getKeyBefore(key);\n        if (prevKey && state.disabledKeys.has(prevKey)) {\n          const prevEnabledKey = state.collection.getKeyBefore(prevKey);\n          prevEnabledKey && extendFocusSelection(prevEnabledKey);\n        } else {\n          prevKey && extendFocusSelection(prevKey);\n        }\n      },\n      Home: () => {\n        const firstKey = state.collection.getFirstKey();\n        firstKey && extendFocusSelection(firstKey);\n      },\n      End: () => {\n        const lastKey = state.collection.getLastKey();\n        lastKey && extendFocusSelection(lastKey);\n      }\n    };\n    const action = keyMap[event.key];\n    if (action) {\n      event.preventDefault();\n      if (manager.canSelectItem(key)) {\n        action(event);\n      }\n    }\n  }, [key, manager]);\n  let {\n    buttonProps\n  } = useButton({\n    id: buttonId,\n    elementType: \"button\",\n    isDisabled,\n    onKeyDown,\n    onPress: onSelect\n  }, ref);\n  let isExpanded = state.selectionManager.isSelected(item.key);\n  return {\n    buttonProps: {\n      ...buttonProps,\n      \"aria-expanded\": isExpanded,\n      \"aria-controls\": isExpanded ? regionId : void 0\n    },\n    regionProps: {\n      id: regionId,\n      role: \"region\",\n      \"aria-labelledby\": buttonId\n    }\n  };\n}\nexport { useReactAriaAccordionItem };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}