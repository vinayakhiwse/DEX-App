{"ast":null,"code":"import { InvalidAbiItemError } from '../index.js';\nimport { isStructSignature } from './runtime/signatures.js';\nimport { parseStructs } from './runtime/structs.js';\nimport { parseSignature } from './runtime/utils.js';\nexport function parseAbiItem(signature) {\n  let abiItem;\n  if (typeof signature === 'string') abiItem = parseSignature(signature);else {\n    const structs = parseStructs(signature);\n    const length = signature.length;\n    for (let i = 0; i < length; i++) {\n      const signature_ = signature[i];\n      if (isStructSignature(signature_)) continue;\n      abiItem = parseSignature(signature_, structs);\n      break;\n    }\n  }\n  if (!abiItem) throw new InvalidAbiItemError({\n    signature\n  });\n  return abiItem;\n}\n//# sourceMappingURL=parseAbiItem.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}