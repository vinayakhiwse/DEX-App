{"ast":null,"code":"\"use client\";\n\nimport { useReactAriaPopover } from \"./chunk-JGMU3RCI.mjs\";\n\n// src/use-popover.ts\nimport { useEffect } from \"react\";\nimport { useDOMRef } from \"@nextui-org/react-utils\";\nimport { useOverlayTriggerState } from \"@react-stately/overlays\";\nimport { useFocusRing } from \"@react-aria/focus\";\nimport { ariaHideOutside, useOverlayTrigger } from \"@react-aria/overlays\";\nimport { mapPropsVariants } from \"@nextui-org/system\";\nimport { getArrowPlacement, getShouldUseAxisPlacement } from \"@nextui-org/aria-utils\";\nimport { popover } from \"@nextui-org/theme\";\nimport { mergeProps, mergeRefs } from \"@react-aria/utils\";\nimport { clsx, dataAttr } from \"@nextui-org/shared-utils\";\nimport { useMemo, useCallback, useRef } from \"react\";\nfunction usePopover(originalProps) {\n  var _a, _b;\n  const [props, variantProps] = mapPropsVariants(originalProps, popover.variantKeys);\n  const {\n    as,\n    children,\n    ref,\n    state: stateProp,\n    triggerRef: triggerRefProp,\n    scrollRef,\n    isOpen,\n    defaultOpen,\n    onOpenChange,\n    isNonModal = true,\n    shouldFlip = true,\n    containerPadding = 12,\n    shouldBlockScroll = false,\n    shouldCloseOnBlur,\n    portalContainer,\n    placement: placementProp = \"top\",\n    triggerType = \"dialog\",\n    showArrow = false,\n    offset = 7,\n    crossOffset = 0,\n    boundaryElement,\n    isKeyboardDismissDisabled,\n    shouldCloseOnInteractOutside,\n    motionProps,\n    className,\n    classNames,\n    onClose,\n    ...otherProps\n  } = props;\n  const Component = as || \"div\";\n  const domRef = useDOMRef(ref);\n  const domTriggerRef = useRef(null);\n  const triggerRef = triggerRefProp || domTriggerRef;\n  const disableAnimation = (_a = originalProps.disableAnimation) != null ? _a : false;\n  const innerState = useOverlayTriggerState({\n    isOpen,\n    defaultOpen,\n    onOpenChange: isOpen2 => {\n      onOpenChange == null ? void 0 : onOpenChange(isOpen2);\n      if (!isOpen2) {\n        onClose == null ? void 0 : onClose();\n      }\n    }\n  });\n  const state = stateProp || innerState;\n  const {\n    popoverProps,\n    underlayProps,\n    arrowProps,\n    placement: ariaPlacement\n  } = useReactAriaPopover({\n    triggerRef,\n    isNonModal,\n    popoverRef: domRef,\n    placement: placementProp,\n    offset,\n    scrollRef,\n    shouldCloseOnBlur,\n    boundaryElement,\n    crossOffset,\n    shouldFlip,\n    containerPadding,\n    isKeyboardDismissDisabled,\n    shouldCloseOnInteractOutside\n  }, state);\n  const {\n    triggerProps\n  } = useOverlayTrigger({\n    type: triggerType\n  }, state, triggerRef);\n  const {\n    isFocusVisible,\n    isFocused,\n    focusProps\n  } = useFocusRing();\n  const slots = useMemo(() => popover({\n    ...variantProps\n  }), [...Object.values(variantProps)]);\n  const baseStyles = clsx(classNames == null ? void 0 : classNames.base, className);\n  const getPopoverProps = (props2 = {}) => ({\n    ref: domRef,\n    ...mergeProps(popoverProps, otherProps, props2),\n    style: mergeProps(popoverProps.style, otherProps.style, props2.style)\n  });\n  const getDialogProps = (props2 = {}) => ({\n    \"data-open\": dataAttr(state.isOpen),\n    \"data-focus\": dataAttr(isFocused),\n    \"data-focus-visible\": dataAttr(isFocusVisible),\n    \"data-placement\": getArrowPlacement(ariaPlacement, placementProp),\n    ...mergeProps(focusProps, props2),\n    className: slots.base({\n      class: clsx(baseStyles, props2.className)\n    }),\n    style: {\n      outline: \"none\"\n    }\n  });\n  const placement = useMemo(() => getShouldUseAxisPlacement(ariaPlacement, placementProp) ? ariaPlacement : placementProp, [ariaPlacement, placementProp]);\n  const getTriggerProps = useCallback((props2 = {}, _ref = null) => {\n    return {\n      \"aria-haspopup\": \"dialog\",\n      ...mergeProps(triggerProps, props2),\n      className: slots.trigger({\n        class: clsx(classNames == null ? void 0 : classNames.trigger, props2.className)\n      }),\n      ref: mergeRefs(_ref, triggerRef)\n    };\n  }, [isOpen, state, triggerProps, triggerRef]);\n  const getBackdropProps = useCallback((props2 = {}) => ({\n    className: slots.backdrop({\n      class: classNames == null ? void 0 : classNames.backdrop\n    }),\n    onClick: () => state.close(),\n    ...underlayProps,\n    ...props2\n  }), [slots, classNames, underlayProps]);\n  const getArrowProps = useCallback(() => ({\n    className: slots.arrow({\n      class: classNames == null ? void 0 : classNames.arrow\n    }),\n    \"data-placement\": getArrowPlacement(ariaPlacement, placementProp),\n    ...arrowProps\n  }), [arrowProps, ariaPlacement, placementProp, slots, classNames]);\n  useEffect(() => {\n    if (state.isOpen && (domRef == null ? void 0 : domRef.current)) {\n      return ariaHideOutside([domRef == null ? void 0 : domRef.current]);\n    }\n  }, [state.isOpen, domRef]);\n  return {\n    state,\n    Component,\n    children,\n    classNames,\n    showArrow,\n    triggerRef,\n    placement,\n    isNonModal,\n    popoverRef: domRef,\n    portalContainer,\n    isOpen: state.isOpen,\n    onClose: state.close,\n    disableAnimation,\n    shouldBlockScroll,\n    backdrop: (_b = originalProps.backdrop) != null ? _b : \"transparent\",\n    motionProps,\n    getBackdropProps,\n    getPopoverProps,\n    getTriggerProps,\n    getArrowProps,\n    getDialogProps\n  };\n}\nexport { usePopover };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}