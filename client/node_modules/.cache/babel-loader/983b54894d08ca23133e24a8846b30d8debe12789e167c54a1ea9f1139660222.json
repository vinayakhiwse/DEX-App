{"ast":null,"code":"\"use client\";\n\n// src/use-tooltip.ts\nimport { useId, useImperativeHandle } from \"react\";\nimport { useTooltipTriggerState } from \"@react-stately/tooltip\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { useTooltip as useReactAriaTooltip, useTooltipTrigger } from \"@react-aria/tooltip\";\nimport { useOverlayPosition, useOverlay } from \"@react-aria/overlays\";\nimport { mapPropsVariants } from \"@nextui-org/system\";\nimport { popover } from \"@nextui-org/theme\";\nimport { clsx, dataAttr } from \"@nextui-org/shared-utils\";\nimport { mergeRefs } from \"@nextui-org/react-utils\";\nimport { createDOMRef } from \"@nextui-org/react-utils\";\nimport { useMemo, useRef, useCallback } from \"react\";\nimport { toReactAriaPlacement, getArrowPlacement } from \"@nextui-org/aria-utils\";\nfunction useTooltip(originalProps) {\n  const [props, variantProps] = mapPropsVariants(originalProps, popover.variantKeys);\n  const {\n    ref,\n    as,\n    isOpen: isOpenProp,\n    content,\n    children,\n    defaultOpen,\n    onOpenChange,\n    isDisabled,\n    trigger: triggerAction,\n    shouldFlip = true,\n    containerPadding = 12,\n    placement: placementProp = \"top\",\n    delay = 0,\n    closeDelay = 500,\n    showArrow = false,\n    offset = 7,\n    crossOffset = 0,\n    isDismissable,\n    shouldCloseOnBlur = true,\n    portalContainer,\n    isKeyboardDismissDisabled = false,\n    shouldCloseOnInteractOutside,\n    className,\n    onClose,\n    motionProps,\n    classNames,\n    ...otherProps\n  } = props;\n  const Component = as || \"div\";\n  const state = useTooltipTriggerState({\n    delay,\n    closeDelay,\n    isDisabled,\n    defaultOpen,\n    isOpen: isOpenProp,\n    onOpenChange: isOpen2 => {\n      onOpenChange == null ? void 0 : onOpenChange(isOpen2);\n      if (!isOpen2) {\n        onClose == null ? void 0 : onClose();\n      }\n    }\n  });\n  const triggerRef = useRef(null);\n  const overlayRef = useRef(null);\n  const tooltipId = useId();\n  const isOpen = state.isOpen && !isDisabled;\n  useImperativeHandle(ref, () => createDOMRef(overlayRef));\n  const {\n    triggerProps,\n    tooltipProps: triggerTooltipProps\n  } = useTooltipTrigger({\n    isDisabled,\n    trigger: triggerAction\n  }, state, triggerRef);\n  const {\n    tooltipProps\n  } = useReactAriaTooltip({\n    isOpen,\n    ...mergeProps(props, triggerTooltipProps)\n  }, state);\n  const {\n    overlayProps: positionProps,\n    arrowProps,\n    placement\n  } = useOverlayPosition({\n    isOpen,\n    targetRef: triggerRef,\n    placement: toReactAriaPlacement(placementProp),\n    overlayRef,\n    offset: showArrow ? offset + 3 : offset,\n    crossOffset,\n    shouldFlip,\n    containerPadding\n  });\n  const {\n    overlayProps\n  } = useOverlay({\n    isOpen,\n    onClose: state.close,\n    isDismissable,\n    shouldCloseOnBlur,\n    isKeyboardDismissDisabled,\n    shouldCloseOnInteractOutside\n  }, overlayRef);\n  const slots = useMemo(() => {\n    var _a, _b, _c;\n    return popover({\n      ...variantProps,\n      radius: (_a = originalProps == null ? void 0 : originalProps.radius) != null ? _a : \"md\",\n      size: (_b = originalProps == null ? void 0 : originalProps.size) != null ? _b : \"md\",\n      shadow: (_c = originalProps == null ? void 0 : originalProps.shadow) != null ? _c : \"sm\"\n    });\n  }, [...Object.values(variantProps), originalProps == null ? void 0 : originalProps.radius, originalProps == null ? void 0 : originalProps.size, originalProps == null ? void 0 : originalProps.shadow]);\n  const baseStyles = clsx(classNames == null ? void 0 : classNames.base, className);\n  const getTriggerProps = useCallback((props2 = {}, _ref = null) => ({\n    ...mergeProps(triggerProps, props2),\n    ref: mergeRefs(_ref, triggerRef),\n    \"aria-describedby\": isOpen ? tooltipId : void 0\n  }), [triggerProps, isOpen, tooltipId, state]);\n  const getTooltipProps = useCallback(() => ({\n    ref: overlayRef,\n    \"data-open\": dataAttr(isOpen),\n    \"data-disabled\": dataAttr(isDisabled),\n    \"data-placement\": getArrowPlacement(placement, placementProp),\n    className: slots.base({\n      class: baseStyles\n    }),\n    ...mergeProps(tooltipProps, overlayProps, otherProps),\n    style: mergeProps(positionProps.style, otherProps.style, props.style),\n    id: tooltipId\n  }), [baseStyles, overlayProps, otherProps, overlayRef, positionProps, slots, tooltipId, tooltipProps]);\n  const getArrowProps = useCallback(() => ({\n    className: slots.arrow({\n      class: classNames == null ? void 0 : classNames.arrow\n    }),\n    \"data-placement\": getArrowPlacement(placement, placementProp),\n    ...arrowProps\n  }), [arrowProps, placement, placementProp, slots, classNames]);\n  return {\n    Component,\n    content,\n    children,\n    isOpen,\n    triggerRef,\n    showArrow,\n    portalContainer,\n    placement: placementProp,\n    disableAnimation: originalProps == null ? void 0 : originalProps.disableAnimation,\n    isDisabled,\n    motionProps,\n    getTriggerProps,\n    getTooltipProps,\n    getArrowProps\n  };\n}\nexport { useTooltip };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}