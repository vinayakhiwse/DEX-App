{"ast":null,"code":"import { AbiEventNotFoundError } from '../../errors/abi.js';\nimport { FilterTypeNotSupportedError } from '../../errors/log.js';\nimport { toBytes } from '../encoding/toBytes.js';\nimport { getEventSelector } from '../hash/getEventSelector.js';\nimport { keccak256 } from '../hash/keccak256.js';\nimport { encodeAbiParameters } from './encodeAbiParameters.js';\nimport { formatAbiItem } from './formatAbiItem.js';\nimport { getAbiItem } from './getAbiItem.js';\nexport function encodeEventTopics({\n  abi,\n  eventName,\n  args\n}) {\n  let abiItem = abi[0];\n  if (eventName) {\n    abiItem = getAbiItem({\n      abi,\n      args,\n      name: eventName\n    });\n    if (!abiItem) throw new AbiEventNotFoundError(eventName, {\n      docsPath: '/docs/contract/encodeEventTopics'\n    });\n  }\n  if (abiItem.type !== 'event') throw new AbiEventNotFoundError(undefined, {\n    docsPath: '/docs/contract/encodeEventTopics'\n  });\n  const definition = formatAbiItem(abiItem);\n  const signature = getEventSelector(definition);\n  let topics = [];\n  if (args && 'inputs' in abiItem) {\n    const indexedInputs = abiItem.inputs?.filter(param => 'indexed' in param && param.indexed);\n    const args_ = Array.isArray(args) ? args : Object.values(args).length > 0 ? indexedInputs?.map(x => args[x.name]) ?? [] : [];\n    if (args_.length > 0) {\n      topics = indexedInputs?.map((param, i) => Array.isArray(args_[i]) ? args_[i].map((_, j) => encodeArg({\n        param,\n        value: args_[i][j]\n      })) : args_[i] ? encodeArg({\n        param,\n        value: args_[i]\n      }) : null) ?? [];\n    }\n  }\n  return [signature, ...topics];\n}\nfunction encodeArg({\n  param,\n  value\n}) {\n  if (param.type === 'string' || param.type === 'bytes') return keccak256(toBytes(value));\n  if (param.type === 'tuple' || param.type.match(/^(.*)\\[(\\d+)?\\]$/)) throw new FilterTypeNotSupportedError(param.type);\n  return encodeAbiParameters([param], [value]);\n}\n//# sourceMappingURL=encodeEventTopics.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}