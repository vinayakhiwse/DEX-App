{"ast":null,"code":"import { useEffect as $cKEhs$useEffect } from \"react\";\nimport { useToggle as $cKEhs$useToggle } from \"@react-aria/toggle\";\nimport { filterDOMProps as $cKEhs$filterDOMProps, mergeProps as $cKEhs$mergeProps } from \"@react-aria/utils\";\nimport { useLabel as $cKEhs$useLabel } from \"@react-aria/label\";\nimport { useToggleState as $cKEhs$useToggleState } from \"@react-stately/toggle\";\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\nvar $406796ff087fe49b$exports = {};\n$parcel$export($406796ff087fe49b$exports, \"useCheckbox\", () => $406796ff087fe49b$export$e375f10ce42261c5);\nfunction $406796ff087fe49b$export$e375f10ce42261c5(props, state, inputRef) {\n  let {\n    inputProps: inputProps\n  } = $cKEhs$useToggle(props, state, inputRef);\n  let {\n    isSelected: isSelected\n  } = state;\n  let {\n    isIndeterminate: isIndeterminate\n  } = props;\n  $cKEhs$useEffect(() => {\n    // indeterminate is a property, but it can only be set via javascript\n    // https://css-tricks.com/indeterminate-checkboxes/\n    if (inputRef.current) inputRef.current.indeterminate = isIndeterminate;\n  });\n  return {\n    inputProps: {\n      ...inputProps,\n      checked: isSelected,\n      'aria-checked': isIndeterminate ? 'mixed' : isSelected\n    }\n  };\n}\nvar $1e9fce0cfacc738b$exports = {};\n$parcel$export($1e9fce0cfacc738b$exports, \"useCheckboxGroup\", () => $1e9fce0cfacc738b$export$49ff6f28c54f1cbe);\nconst $1ae600c947479353$export$31440636951aa68c = new WeakMap();\nfunction $1e9fce0cfacc738b$export$49ff6f28c54f1cbe(props, state) {\n  let {\n    isDisabled: isDisabled,\n    name: name\n  } = props;\n  let {\n    labelProps: labelProps,\n    fieldProps: fieldProps\n  } = $cKEhs$useLabel({\n    ...props,\n    // Checkbox group is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  });\n  let domProps = $cKEhs$filterDOMProps(props, {\n    labelable: true\n  });\n  // Pass name prop from group to all items by attaching to the state.\n  $1ae600c947479353$export$31440636951aa68c.set(state, name);\n  return {\n    groupProps: $cKEhs$mergeProps(domProps, {\n      role: 'group',\n      'aria-disabled': isDisabled || undefined,\n      ...fieldProps\n    }),\n    labelProps: labelProps\n  };\n}\nvar $fba3e38d5ca8983f$exports = {};\n$parcel$export($fba3e38d5ca8983f$exports, \"useCheckboxGroupItem\", () => $fba3e38d5ca8983f$export$353b32fc6898d37d);\nfunction $fba3e38d5ca8983f$export$353b32fc6898d37d(props, state, inputRef) {\n  const toggleState = $cKEhs$useToggleState({\n    isReadOnly: props.isReadOnly || state.isReadOnly,\n    isSelected: state.isSelected(props.value),\n    onChange(isSelected) {\n      if (isSelected) state.addValue(props.value);else state.removeValue(props.value);\n      if (props.onChange) props.onChange(isSelected);\n    }\n  });\n  let {\n    inputProps: inputProps\n  } = $406796ff087fe49b$export$e375f10ce42261c5({\n    ...props,\n    isReadOnly: props.isReadOnly || state.isReadOnly,\n    isDisabled: props.isDisabled || state.isDisabled,\n    name: props.name || $1ae600c947479353$export$31440636951aa68c.get(state)\n  }, toggleState, inputRef);\n  return {\n    inputProps: inputProps\n  };\n}\nexport { $406796ff087fe49b$export$e375f10ce42261c5 as useCheckbox, $1e9fce0cfacc738b$export$49ff6f28c54f1cbe as useCheckboxGroup, $fba3e38d5ca8983f$export$353b32fc6898d37d as useCheckboxGroupItem };\n//# sourceMappingURL=module.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}