{"ast":null,"code":"\"use client\";\n\nimport { useButtonGroupContext } from \"./chunk-BOMWXXSL.mjs\";\n\n// src/use-button.ts\nimport { dataAttr } from \"@nextui-org/shared-utils\";\nimport { useCallback } from \"react\";\nimport { useFocusRing } from \"@react-aria/focus\";\nimport { chain, mergeProps } from \"@react-aria/utils\";\nimport { useDOMRef, filterDOMProps } from \"@nextui-org/react-utils\";\nimport { button } from \"@nextui-org/theme\";\nimport { isValidElement, cloneElement, useMemo } from \"react\";\nimport { useAriaButton } from \"@nextui-org/use-aria-button\";\nimport { useHover } from \"@react-aria/interactions\";\nimport { useRipple } from \"@nextui-org/ripple\";\nfunction useButton(props) {\n  var _a, _b, _c, _d, _e, _f, _g, _h;\n  const groupContext = useButtonGroupContext();\n  const isInGroup = !!groupContext;\n  const {\n    ref,\n    as,\n    children,\n    startContent: startContentProp,\n    endContent: endContentProp,\n    autoFocus,\n    className,\n    spinner,\n    fullWidth = (_a = groupContext == null ? void 0 : groupContext.fullWidth) != null ? _a : false,\n    size = (_b = groupContext == null ? void 0 : groupContext.size) != null ? _b : \"md\",\n    color = (_c = groupContext == null ? void 0 : groupContext.color) != null ? _c : \"default\",\n    variant = (_d = groupContext == null ? void 0 : groupContext.variant) != null ? _d : \"solid\",\n    disableAnimation = (_e = groupContext == null ? void 0 : groupContext.disableAnimation) != null ? _e : false,\n    radius = groupContext == null ? void 0 : groupContext.radius,\n    disableRipple = (_f = groupContext == null ? void 0 : groupContext.disableRipple) != null ? _f : false,\n    isDisabled: isDisabledProp = (_g = groupContext == null ? void 0 : groupContext.isDisabled) != null ? _g : false,\n    isIconOnly = (_h = groupContext == null ? void 0 : groupContext.isIconOnly) != null ? _h : false,\n    isLoading = false,\n    spinnerPlacement = \"start\",\n    onPress,\n    onClick,\n    ...otherProps\n  } = props;\n  const Component = as || \"button\";\n  const shouldFilterDOMProps = typeof Component === \"string\";\n  const domRef = useDOMRef(ref);\n  const {\n    isFocusVisible,\n    isFocused,\n    focusProps\n  } = useFocusRing({\n    autoFocus\n  });\n  const isDisabled = isDisabledProp || isLoading;\n  const styles = useMemo(() => button({\n    size,\n    color,\n    variant,\n    radius,\n    fullWidth,\n    isDisabled,\n    isInGroup,\n    disableAnimation,\n    isIconOnly,\n    className\n  }), [size, color, variant, radius, fullWidth, isDisabled, isInGroup, isIconOnly, disableAnimation, className]);\n  const {\n    onClick: onRippleClickHandler,\n    onClear: onClearRipple,\n    ripples\n  } = useRipple();\n  const handleClick = useCallback(e => {\n    if (disableRipple || isDisabled || disableAnimation) return;\n    domRef.current && onRippleClickHandler(e);\n  }, [disableRipple, isDisabled, disableAnimation, domRef, onRippleClickHandler]);\n  const {\n    buttonProps: ariaButtonProps,\n    isPressed\n  } = useAriaButton({\n    elementType: as,\n    isDisabled,\n    onPress,\n    onClick: chain(onClick, handleClick),\n    ...otherProps\n  }, domRef);\n  const {\n    isHovered,\n    hoverProps\n  } = useHover({\n    isDisabled\n  });\n  const getButtonProps = useCallback((props2 = {}) => ({\n    \"data-disabled\": dataAttr(isDisabled),\n    \"data-focus\": dataAttr(isFocused),\n    \"data-pressed\": dataAttr(isPressed),\n    \"data-focus-visible\": dataAttr(isFocusVisible),\n    \"data-hover\": dataAttr(isHovered),\n    \"data-loading\": dataAttr(isLoading),\n    ...mergeProps(ariaButtonProps, focusProps, hoverProps, filterDOMProps(otherProps, {\n      enabled: shouldFilterDOMProps\n    }), filterDOMProps(props2))\n  }), [isLoading, isDisabled, isFocused, isPressed, shouldFilterDOMProps, isFocusVisible, isHovered, ariaButtonProps, focusProps, hoverProps, otherProps]);\n  const getIconClone = icon => isValidElement(icon) ? cloneElement(icon, {\n    \"aria-hidden\": true,\n    focusable: false,\n    tabIndex: -1\n  }) : null;\n  const startContent = getIconClone(startContentProp);\n  const endContent = getIconClone(endContentProp);\n  const spinnerSize = useMemo(() => {\n    const buttonSpinnerSizeMap = {\n      sm: \"sm\",\n      md: \"sm\",\n      lg: \"md\"\n    };\n    return buttonSpinnerSizeMap[size];\n  }, [size]);\n  const getRippleProps = useCallback(() => ({\n    ripples,\n    onClear: onClearRipple\n  }), [ripples, onClearRipple]);\n  return {\n    Component,\n    children,\n    domRef,\n    spinner,\n    styles,\n    startContent,\n    endContent,\n    isLoading,\n    spinnerPlacement,\n    spinnerSize,\n    disableRipple,\n    getButtonProps,\n    getRippleProps\n  };\n}\nexport { useButton };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}