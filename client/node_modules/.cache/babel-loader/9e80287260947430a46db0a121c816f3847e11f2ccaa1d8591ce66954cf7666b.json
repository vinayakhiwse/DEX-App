{"ast":null,"code":"import E, { Fragment as F, createContext as C, useContext as I, useEffect as h, useMemo as S, useReducer as N, useRef as g } from \"react\";\nimport { match as x } from '../../utils/match.js';\nimport { forwardRefWithAs as L, render as O, Features as U } from '../../utils/render.js';\nimport { optionalRef as K, useSyncRefs as B } from '../../hooks/use-sync-refs.js';\nimport { useId as _ } from '../../hooks/use-id.js';\nimport { Keys as m } from '../keyboard.js';\nimport { isDisabledReactIssue7711 as G } from '../../utils/bugs.js';\nimport { OpenClosedProvider as j, State as R, useOpenClosed as W } from '../../internal/open-closed.js';\nimport { useResolveButtonType as $ } from '../../hooks/use-resolve-button-type.js';\nimport { getOwnerDocument as J } from '../../utils/owner.js';\nimport { useEvent as A } from '../../hooks/use-event.js';\nimport { startTransition as X } from '../../utils/start-transition.js';\nvar q = (o => (o[o.Open = 0] = \"Open\", o[o.Closed = 1] = \"Closed\", o))(q || {}),\n  z = (t => (t[t.ToggleDisclosure = 0] = \"ToggleDisclosure\", t[t.CloseDisclosure = 1] = \"CloseDisclosure\", t[t.SetButtonId = 2] = \"SetButtonId\", t[t.SetPanelId = 3] = \"SetPanelId\", t[t.LinkPanel = 4] = \"LinkPanel\", t[t.UnlinkPanel = 5] = \"UnlinkPanel\", t))(z || {});\nlet Q = {\n    [0]: e => ({\n      ...e,\n      disclosureState: x(e.disclosureState, {\n        [0]: 1,\n        [1]: 0\n      })\n    }),\n    [1]: e => e.disclosureState === 1 ? e : {\n      ...e,\n      disclosureState: 1\n    },\n    [4](e) {\n      return e.linkedPanel === !0 ? e : {\n        ...e,\n        linkedPanel: !0\n      };\n    },\n    [5](e) {\n      return e.linkedPanel === !1 ? e : {\n        ...e,\n        linkedPanel: !1\n      };\n    },\n    [2](e, n) {\n      return e.buttonId === n.buttonId ? e : {\n        ...e,\n        buttonId: n.buttonId\n      };\n    },\n    [3](e, n) {\n      return e.panelId === n.panelId ? e : {\n        ...e,\n        panelId: n.panelId\n      };\n    }\n  },\n  k = C(null);\nk.displayName = \"DisclosureContext\";\nfunction M(e) {\n  let n = I(k);\n  if (n === null) {\n    let o = new Error(`<${e} /> is missing a parent <Disclosure /> component.`);\n    throw Error.captureStackTrace && Error.captureStackTrace(o, M), o;\n  }\n  return n;\n}\nlet v = C(null);\nv.displayName = \"DisclosureAPIContext\";\nfunction w(e) {\n  let n = I(v);\n  if (n === null) {\n    let o = new Error(`<${e} /> is missing a parent <Disclosure /> component.`);\n    throw Error.captureStackTrace && Error.captureStackTrace(o, w), o;\n  }\n  return n;\n}\nlet H = C(null);\nH.displayName = \"DisclosurePanelContext\";\nfunction V() {\n  return I(H);\n}\nfunction Y(e, n) {\n  return x(n.type, Q, e, n);\n}\nlet Z = F;\nfunction ee(e, n) {\n  let {\n      defaultOpen: o = !1,\n      ...u\n    } = e,\n    T = g(null),\n    l = B(n, K(a => {\n      T.current = a;\n    }, e.as === void 0 || e.as === F)),\n    t = g(null),\n    f = g(null),\n    s = N(Y, {\n      disclosureState: o ? 0 : 1,\n      linkedPanel: !1,\n      buttonRef: f,\n      panelRef: t,\n      buttonId: null,\n      panelId: null\n    }),\n    [{\n      disclosureState: i,\n      buttonId: c\n    }, D] = s,\n    d = A(a => {\n      D({\n        type: 1\n      });\n      let r = J(T);\n      if (!r || !c) return;\n      let p = (() => a ? a instanceof HTMLElement ? a : a.current instanceof HTMLElement ? a.current : r.getElementById(c) : r.getElementById(c))();\n      p == null || p.focus();\n    }),\n    P = S(() => ({\n      close: d\n    }), [d]),\n    b = S(() => ({\n      open: i === 0,\n      close: d\n    }), [i, d]),\n    y = {\n      ref: l\n    };\n  return E.createElement(k.Provider, {\n    value: s\n  }, E.createElement(v.Provider, {\n    value: P\n  }, E.createElement(j, {\n    value: x(i, {\n      [0]: R.Open,\n      [1]: R.Closed\n    })\n  }, O({\n    ourProps: y,\n    theirProps: u,\n    slot: b,\n    defaultTag: Z,\n    name: \"Disclosure\"\n  }))));\n}\nlet te = \"button\";\nfunction ne(e, n) {\n  let o = _(),\n    {\n      id: u = `headlessui-disclosure-button-${o}`,\n      ...T\n    } = e,\n    [l, t] = M(\"Disclosure.Button\"),\n    f = V(),\n    s = f === null ? !1 : f === l.panelId,\n    i = g(null),\n    c = B(i, n, s ? null : l.buttonRef);\n  h(() => {\n    if (!s) return t({\n      type: 2,\n      buttonId: u\n    }), () => {\n      t({\n        type: 2,\n        buttonId: null\n      });\n    };\n  }, [u, t, s]);\n  let D = A(r => {\n      var p;\n      if (s) {\n        if (l.disclosureState === 1) return;\n        switch (r.key) {\n          case m.Space:\n          case m.Enter:\n            r.preventDefault(), r.stopPropagation(), t({\n              type: 0\n            }), (p = l.buttonRef.current) == null || p.focus();\n            break;\n        }\n      } else switch (r.key) {\n        case m.Space:\n        case m.Enter:\n          r.preventDefault(), r.stopPropagation(), t({\n            type: 0\n          });\n          break;\n      }\n    }),\n    d = A(r => {\n      switch (r.key) {\n        case m.Space:\n          r.preventDefault();\n          break;\n      }\n    }),\n    P = A(r => {\n      var p;\n      G(r.currentTarget) || e.disabled || (s ? (t({\n        type: 0\n      }), (p = l.buttonRef.current) == null || p.focus()) : t({\n        type: 0\n      }));\n    }),\n    b = S(() => ({\n      open: l.disclosureState === 0\n    }), [l]),\n    y = $(e, i),\n    a = s ? {\n      ref: c,\n      type: y,\n      onKeyDown: D,\n      onClick: P\n    } : {\n      ref: c,\n      id: u,\n      type: y,\n      \"aria-expanded\": l.disclosureState === 0,\n      \"aria-controls\": l.linkedPanel ? l.panelId : void 0,\n      onKeyDown: D,\n      onKeyUp: d,\n      onClick: P\n    };\n  return O({\n    ourProps: a,\n    theirProps: T,\n    slot: b,\n    defaultTag: te,\n    name: \"Disclosure.Button\"\n  });\n}\nlet le = \"div\",\n  oe = U.RenderStrategy | U.Static;\nfunction re(e, n) {\n  let o = _(),\n    {\n      id: u = `headlessui-disclosure-panel-${o}`,\n      ...T\n    } = e,\n    [l, t] = M(\"Disclosure.Panel\"),\n    {\n      close: f\n    } = w(\"Disclosure.Panel\"),\n    s = B(n, l.panelRef, P => {\n      X(() => t({\n        type: P ? 4 : 5\n      }));\n    });\n  h(() => (t({\n    type: 3,\n    panelId: u\n  }), () => {\n    t({\n      type: 3,\n      panelId: null\n    });\n  }), [u, t]);\n  let i = W(),\n    c = (() => i !== null ? (i & R.Open) === R.Open : l.disclosureState === 0)(),\n    D = S(() => ({\n      open: l.disclosureState === 0,\n      close: f\n    }), [l, f]),\n    d = {\n      ref: s,\n      id: u\n    };\n  return E.createElement(H.Provider, {\n    value: l.panelId\n  }, O({\n    ourProps: d,\n    theirProps: T,\n    slot: D,\n    defaultTag: le,\n    features: oe,\n    visible: c,\n    name: \"Disclosure.Panel\"\n  }));\n}\nlet se = L(ee),\n  ue = L(ne),\n  ie = L(re),\n  ve = Object.assign(se, {\n    Button: ue,\n    Panel: ie\n  });\nexport { ve as Disclosure };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}