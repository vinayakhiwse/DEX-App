{"ast":null,"code":"import { pick as t } from \"../utils/collections\";\nconst e = [\"borderBottomWidth\", \"borderLeftWidth\", \"borderRightWidth\", \"borderTopWidth\", \"boxSizing\", \"fontFamily\", \"fontSize\", \"fontStyle\", \"fontWeight\", \"letterSpacing\", \"lineHeight\", \"paddingBottom\", \"paddingLeft\", \"paddingRight\", \"paddingTop\", \"tabSize\", \"textIndent\", \"textRendering\", \"textTransform\", \"width\", \"wordBreak\"],\n  o = {\n    \"min-height\": \"0\",\n    \"max-height\": \"none\",\n    height: \"0\",\n    visibility: \"hidden\",\n    overflow: \"hidden\",\n    position: \"absolute\",\n    \"z-index\": \"-1000\",\n    top: \"0\",\n    right: \"0\"\n  },\n  i = \"undefined\" != typeof document && !!document.documentElement.currentStyle;\nexport const forceHiddenStyles = t => {\n  Object.keys(o).forEach(e => {\n    t.style.setProperty(e, o[e], \"important\");\n  });\n};\nexport const getSizingData = o => {\n  const r = window.getComputedStyle(o);\n  if (null === r) return null;\n  const d = t(e, r),\n    {\n      boxSizing: n\n    } = d;\n  if (\"\" === n) return null;\n  i && \"border-box\" === n && (d.width = parseFloat(d.width) + parseFloat(d.borderRightWidth) + parseFloat(d.borderLeftWidth) + parseFloat(d.paddingRight) + parseFloat(d.paddingLeft) + \"px\");\n  return {\n    sizingStyle: d,\n    paddingSize: parseFloat(d.paddingBottom) + parseFloat(d.paddingTop),\n    borderSize: parseFloat(d.borderBottomWidth) + parseFloat(d.borderTopWidth)\n  };\n};\nlet r = null;\nexport const calculateNodeHeight = (t, e, o = 1, i = 1 / 0) => {\n  r || (r = document.createElement(\"textarea\"), r.setAttribute(\"tabindex\", \"-1\"), r.setAttribute(\"aria-hidden\", \"true\"), forceHiddenStyles(r)), null === r.parentNode && document.body.appendChild(r);\n  const {\n      paddingSize: d,\n      borderSize: n,\n      sizingStyle: a\n    } = t,\n    {\n      boxSizing: l\n    } = a;\n  Object.keys(a).forEach(t => {\n    const e = t;\n    r.style[e] = a[e];\n  }), forceHiddenStyles(r), r.value = e;\n  let s = ((t, e) => {\n    const o = t.scrollHeight;\n    return \"border-box\" === e.sizingStyle.boxSizing ? o + e.borderSize : o - e.paddingSize;\n  })(r, t);\n  r.value = \"x\";\n  const p = r.scrollHeight - d;\n  let g = p * o;\n  \"border-box\" === l && (g = g + d + n), s = Math.max(g, s);\n  let h = p * i;\n  return \"border-box\" === l && (h = h + d + n), s = Math.min(h, s), [s, p];\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}