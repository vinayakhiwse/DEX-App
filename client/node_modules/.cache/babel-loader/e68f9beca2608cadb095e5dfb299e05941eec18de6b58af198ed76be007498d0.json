{"ast":null,"code":"import { mergeProps as $cE0pI$mergeProps, filterDOMProps as $cE0pI$filterDOMProps, chain as $cE0pI$chain } from \"@react-aria/utils\";\nimport { useFocusable as $cE0pI$useFocusable } from \"@react-aria/focus\";\nimport { usePress as $cE0pI$usePress } from \"@react-aria/interactions\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n    * Copyright 2020 Adobe. All rights reserved.\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License. You may obtain a copy\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software distributed under\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n    * OF ANY KIND, either express or implied. See the License for the specific language\n    * governing permissions and limitations under the License.\n    */\n\nfunction $701a24aa0da5b062$export$ea18c227d4417cc3(props, ref) {\n  let {\n    elementType = \"button\",\n    isDisabled: isDisabled,\n    onPress: onPress,\n    onPressStart: onPressStart,\n    onPressEnd: onPressEnd,\n    onPressChange: onPressChange,\n    preventFocusOnPress:\n    // @ts-ignore - undocumented\n    preventFocusOnPress,\n    allowFocusWhenDisabled:\n    // @ts-ignore - undocumented\n    allowFocusWhenDisabled,\n    // @ts-ignore\n    onClick: deprecatedOnClick,\n    href: href,\n    target: target,\n    rel: rel,\n    type = \"button\"\n  } = props;\n  let additionalProps;\n  if (elementType === \"button\") additionalProps = {\n    type: type,\n    disabled: isDisabled\n  };else additionalProps = {\n    role: \"button\",\n    tabIndex: isDisabled ? undefined : 0,\n    href: elementType === \"a\" && isDisabled ? undefined : href,\n    target: elementType === \"a\" ? target : undefined,\n    type: elementType === \"input\" ? type : undefined,\n    disabled: elementType === \"input\" ? isDisabled : undefined,\n    \"aria-disabled\": !isDisabled || elementType === \"input\" ? undefined : isDisabled,\n    rel: elementType === \"a\" ? rel : undefined\n  };\n  let {\n    pressProps: pressProps,\n    isPressed: isPressed\n  } = (0, $cE0pI$usePress)({\n    onPressStart: onPressStart,\n    onPressEnd: onPressEnd,\n    onPressChange: onPressChange,\n    onPress: onPress,\n    isDisabled: isDisabled,\n    preventFocusOnPress: preventFocusOnPress,\n    ref: ref\n  });\n  let {\n    focusableProps: focusableProps\n  } = (0, $cE0pI$useFocusable)(props, ref);\n  if (allowFocusWhenDisabled) focusableProps.tabIndex = isDisabled ? -1 : focusableProps.tabIndex;\n  let buttonProps = (0, $cE0pI$mergeProps)(focusableProps, pressProps, (0, $cE0pI$filterDOMProps)(props, {\n    labelable: true\n  }));\n  return {\n    isPressed: isPressed,\n    buttonProps: (0, $cE0pI$mergeProps)(additionalProps, buttonProps, {\n      \"aria-haspopup\": props[\"aria-haspopup\"],\n      \"aria-expanded\": props[\"aria-expanded\"],\n      \"aria-controls\": props[\"aria-controls\"],\n      \"aria-pressed\": props[\"aria-pressed\"],\n      onClick: e => {\n        if (deprecatedOnClick) {\n          deprecatedOnClick(e);\n          console.warn(\"onClick is deprecated, please use onPress\");\n        }\n      }\n    })\n  };\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $55f54f7887471b58$export$51e84d46ca0bc451(props, state, ref) {\n  const {\n    isSelected: isSelected\n  } = state;\n  const {\n    isPressed: isPressed,\n    buttonProps: buttonProps\n  } = (0, $701a24aa0da5b062$export$ea18c227d4417cc3)({\n    ...props,\n    onPress: (0, $cE0pI$chain)(state.toggle, props.onPress)\n  }, ref);\n  return {\n    isPressed: isPressed,\n    buttonProps: (0, $cE0pI$mergeProps)(buttonProps, {\n      \"aria-pressed\": isSelected\n    })\n  };\n}\nexport { $701a24aa0da5b062$export$ea18c227d4417cc3 as useButton, $55f54f7887471b58$export$51e84d46ca0bc451 as useToggleButton };\n//# sourceMappingURL=module.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}