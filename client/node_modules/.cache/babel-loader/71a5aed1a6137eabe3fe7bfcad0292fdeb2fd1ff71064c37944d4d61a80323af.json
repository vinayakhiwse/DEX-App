{"ast":null,"code":"\"use client\";\n\n// src/use-listbox-item.ts\nimport { useMemo, useRef, useCallback } from \"react\";\nimport { listboxItem } from \"@nextui-org/theme\";\nimport { mapPropsVariants } from \"@nextui-org/system\";\nimport { useFocusRing } from \"@react-aria/focus\";\nimport { filterDOMProps } from \"@nextui-org/react-utils\";\nimport { clsx, dataAttr, removeEvents } from \"@nextui-org/shared-utils\";\nimport { useOption } from \"@react-aria/listbox\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { useHover, usePress } from \"@react-aria/interactions\";\nimport { useIsMobile } from \"@nextui-org/use-is-mobile\";\nfunction useListboxItem(originalProps) {\n  const [props, variantProps] = mapPropsVariants(originalProps, listboxItem.variantKeys);\n  const {\n    as,\n    item,\n    state,\n    description,\n    startContent,\n    endContent,\n    isVirtualized,\n    selectedIcon,\n    className,\n    classNames,\n    autoFocus,\n    onPress,\n    onClick,\n    isReadOnly = false,\n    ...otherProps\n  } = props;\n  const disableAnimation = originalProps.disableAnimation;\n  const domRef = useRef(null);\n  const Component = as || \"li\";\n  const shouldFilterDOMProps = typeof Component === \"string\";\n  const {\n    rendered,\n    key\n  } = item;\n  const isDisabled = state.disabledKeys.has(key) || originalProps.isDisabled;\n  const isSelectable = state.selectionManager.selectionMode !== \"none\";\n  const isMobile = useIsMobile();\n  const {\n    pressProps,\n    isPressed\n  } = usePress({\n    ref: domRef,\n    isDisabled,\n    onPress\n  });\n  const {\n    isHovered,\n    hoverProps\n  } = useHover({\n    isDisabled\n  });\n  const {\n    isFocusVisible,\n    focusProps\n  } = useFocusRing({\n    autoFocus\n  });\n  const {\n    isFocused,\n    isSelected,\n    optionProps,\n    labelProps,\n    descriptionProps\n  } = useOption({\n    key,\n    isDisabled,\n    \"aria-label\": props[\"aria-label\"],\n    isVirtualized\n  }, state, domRef);\n  let itemProps = optionProps;\n  const slots = useMemo(() => listboxItem({\n    ...variantProps,\n    isDisabled,\n    disableAnimation\n  }), [...Object.values(variantProps), isDisabled, disableAnimation]);\n  const baseStyles = clsx(classNames == null ? void 0 : classNames.base, className);\n  if (isReadOnly) {\n    itemProps = removeEvents(itemProps);\n  }\n  const getItemProps = (props2 = {}) => ({\n    ref: domRef,\n    ...mergeProps({\n      onClick\n    }, itemProps, isReadOnly ? {} : mergeProps(focusProps, pressProps), hoverProps, filterDOMProps(otherProps, {\n      enabled: shouldFilterDOMProps\n    }), props2),\n    \"data-selectable\": dataAttr(isSelectable),\n    \"data-focus\": dataAttr(isFocused),\n    \"data-hover\": dataAttr(isMobile ? isHovered || isPressed : isHovered),\n    \"data-disabled\": dataAttr(isDisabled),\n    \"data-selected\": dataAttr(isSelected),\n    \"data-pressed\": dataAttr(isPressed),\n    \"data-focus-visible\": dataAttr(isFocusVisible),\n    className: slots.base({\n      class: clsx(baseStyles, props2.className)\n    })\n  });\n  const getLabelProps = (props2 = {}) => ({\n    ...mergeProps(labelProps, props2),\n    \"data-label\": dataAttr(true),\n    className: slots.title({\n      class: classNames == null ? void 0 : classNames.title\n    })\n  });\n  const getDescriptionProps = (props2 = {}) => ({\n    ...mergeProps(descriptionProps, props2),\n    className: slots.description({\n      class: classNames == null ? void 0 : classNames.description\n    })\n  });\n  const getWrapperProps = (props2 = {}) => ({\n    ...mergeProps(props2),\n    className: slots.wrapper({\n      class: classNames == null ? void 0 : classNames.wrapper\n    })\n  });\n  const getSelectedIconProps = useCallback((props2 = {}) => {\n    return {\n      \"aria-hidden\": dataAttr(true),\n      \"data-disabled\": dataAttr(isDisabled),\n      className: slots.selectedIcon({\n        class: classNames == null ? void 0 : classNames.selectedIcon\n      }),\n      ...props2\n    };\n  }, [isDisabled, slots, classNames]);\n  return {\n    Component,\n    domRef,\n    slots,\n    classNames,\n    isSelectable,\n    isSelected,\n    isDisabled,\n    rendered,\n    description,\n    startContent,\n    endContent,\n    selectedIcon,\n    disableAnimation,\n    getItemProps,\n    getLabelProps,\n    getWrapperProps,\n    getDescriptionProps,\n    getSelectedIconProps\n  };\n}\nexport { useListboxItem };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}