{"ast":null,"code":"\"use client\";\n\n// src/use-accordion-item.ts\nimport { useFocusRing } from \"@react-aria/focus\";\nimport { accordionItem } from \"@nextui-org/theme\";\nimport { clsx, callAllHandlers, dataAttr } from \"@nextui-org/shared-utils\";\nimport { useDOMRef, filterDOMProps } from \"@nextui-org/react-utils\";\nimport { useReactAriaAccordionItem } from \"@nextui-org/use-aria-accordion\";\nimport { useCallback, useMemo } from \"react\";\nimport { chain, mergeProps } from \"@react-aria/utils\";\nimport { useHover, usePress } from \"@react-aria/interactions\";\nfunction useAccordionItem(props) {\n  var _a;\n  const {\n    ref,\n    as,\n    item,\n    onFocusChange\n  } = props;\n  const {\n    state,\n    className,\n    indicator,\n    children,\n    title,\n    subtitle,\n    startContent,\n    motionProps,\n    focusedKey,\n    isCompact = false,\n    classNames: classNamesProp = {},\n    isDisabled: isDisabledProp = false,\n    hideIndicator = false,\n    disableAnimation = false,\n    keepContentMounted = false,\n    disableIndicatorAnimation = false,\n    onPress,\n    onPressStart,\n    onPressEnd,\n    onPressChange,\n    onPressUp,\n    onClick,\n    ...otherProps\n  } = props;\n  const Component = as || \"div\";\n  const shouldFilterDOMProps = typeof Component === \"string\";\n  const domRef = useDOMRef(ref);\n  const isDisabled = state.disabledKeys.has(item.key) || isDisabledProp;\n  const isOpen = state.selectionManager.isSelected(item.key);\n  const {\n    buttonProps: buttonCompleteProps,\n    regionProps\n  } = useReactAriaAccordionItem({\n    item,\n    isDisabled\n  }, {\n    ...state,\n    focusedKey\n  }, domRef);\n  const {\n    onFocus: onFocusButton,\n    onBlur: onBlurButton,\n    ...buttonProps\n  } = buttonCompleteProps;\n  const {\n    isFocused,\n    isFocusVisible,\n    focusProps\n  } = useFocusRing({\n    autoFocus: (_a = item.props) == null ? void 0 : _a.autoFocus\n  });\n  const {\n    isHovered,\n    hoverProps\n  } = useHover({\n    isDisabled\n  });\n  const {\n    pressProps,\n    isPressed\n  } = usePress({\n    ref: domRef,\n    isDisabled,\n    onPress,\n    onPressStart,\n    onPressEnd,\n    onPressChange,\n    onPressUp\n  });\n  const handleFocus = useCallback(() => {\n    onFocusChange == null ? void 0 : onFocusChange(true, item.key);\n  }, []);\n  const handleBlur = useCallback(() => {\n    onFocusChange == null ? void 0 : onFocusChange(false, item.key);\n  }, []);\n  const classNames = useMemo(() => ({\n    ...classNamesProp\n  }), [...Object.values(classNamesProp)]);\n  const slots = useMemo(() => accordionItem({\n    isCompact,\n    isDisabled,\n    hideIndicator,\n    disableAnimation,\n    disableIndicatorAnimation\n  }), [isCompact, isDisabled, hideIndicator, disableAnimation, disableIndicatorAnimation]);\n  const baseStyles = clsx(classNames == null ? void 0 : classNames.base, className);\n  const getBaseProps = useCallback((props2 = {}) => {\n    return {\n      \"data-open\": dataAttr(isOpen),\n      \"data-disabled\": dataAttr(isDisabled),\n      className: slots.base({\n        class: baseStyles\n      }),\n      ...mergeProps(filterDOMProps(otherProps, {\n        enabled: shouldFilterDOMProps\n      }), props2)\n    };\n  }, [baseStyles, shouldFilterDOMProps, otherProps, slots, item.props, isOpen, isDisabled]);\n  const getButtonProps = (props2 = {}) => {\n    var _a2, _b;\n    return {\n      ref: domRef,\n      \"data-open\": dataAttr(isOpen),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-focus-visible\": dataAttr(isFocusVisible),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-pressed\": dataAttr(isPressed),\n      className: slots.trigger({\n        class: classNames == null ? void 0 : classNames.trigger\n      }),\n      onFocus: callAllHandlers(handleFocus, onFocusButton, focusProps.onFocus, otherProps.onFocus, (_a2 = item.props) == null ? void 0 : _a2.onFocus),\n      onBlur: callAllHandlers(handleBlur, onBlurButton, focusProps.onBlur, otherProps.onBlur, (_b = item.props) == null ? void 0 : _b.onBlur),\n      ...mergeProps(buttonProps, hoverProps, pressProps, props2),\n      onClick: chain(pressProps.onClick, onClick)\n    };\n  };\n  const getContentProps = useCallback((props2 = {}) => {\n    return {\n      \"data-open\": dataAttr(isOpen),\n      \"data-disabled\": dataAttr(isDisabled),\n      className: slots.content({\n        class: classNames == null ? void 0 : classNames.content\n      }),\n      ...mergeProps(regionProps, props2)\n    };\n  }, [slots, classNames, regionProps, isOpen, isDisabled, classNames == null ? void 0 : classNames.content]);\n  const getIndicatorProps = useCallback((props2 = {}) => {\n    return {\n      \"aria-hidden\": dataAttr(true),\n      \"data-open\": dataAttr(isOpen),\n      \"data-disabled\": dataAttr(isDisabled),\n      className: slots.indicator({\n        class: classNames == null ? void 0 : classNames.indicator\n      }),\n      ...props2\n    };\n  }, [slots, classNames == null ? void 0 : classNames.indicator, isOpen, isDisabled, classNames == null ? void 0 : classNames.indicator]);\n  const getHeadingProps = useCallback((props2 = {}) => {\n    return {\n      \"data-open\": dataAttr(isOpen),\n      \"data-disabled\": dataAttr(isDisabled),\n      className: slots.heading({\n        class: classNames == null ? void 0 : classNames.heading\n      }),\n      ...props2\n    };\n  }, [slots, classNames == null ? void 0 : classNames.heading, isOpen, isDisabled, classNames == null ? void 0 : classNames.heading]);\n  const getTitleProps = useCallback((props2 = {}) => {\n    return {\n      \"data-open\": dataAttr(isOpen),\n      \"data-disabled\": dataAttr(isDisabled),\n      className: slots.title({\n        class: classNames == null ? void 0 : classNames.title\n      }),\n      ...props2\n    };\n  }, [slots, classNames == null ? void 0 : classNames.title, isOpen, isDisabled, classNames == null ? void 0 : classNames.title]);\n  const getSubtitleProps = useCallback((props2 = {}) => {\n    return {\n      \"data-open\": dataAttr(isOpen),\n      \"data-disabled\": dataAttr(isDisabled),\n      className: slots.subtitle({\n        class: classNames == null ? void 0 : classNames.subtitle\n      }),\n      ...props2\n    };\n  }, [slots, classNames, isOpen, isDisabled, classNames == null ? void 0 : classNames.subtitle]);\n  return {\n    Component,\n    item,\n    slots,\n    classNames,\n    domRef,\n    indicator,\n    children,\n    title,\n    subtitle,\n    startContent,\n    isOpen,\n    isDisabled,\n    hideIndicator,\n    keepContentMounted,\n    disableAnimation,\n    motionProps,\n    getBaseProps,\n    getHeadingProps,\n    getButtonProps,\n    getContentProps,\n    getIndicatorProps,\n    getTitleProps,\n    getSubtitleProps\n  };\n}\nexport { useAccordionItem };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}