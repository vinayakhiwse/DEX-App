{"ast":null,"code":"import { useCallback as r } from \"react\";\nimport { useFocusRing as i } from \"@react-aria/focus\";\nimport { mergeProps as e } from \"@react-aria/utils\";\nimport { usePress as s } from \"@react-aria/interactions\";\nimport { useHover as o } from \"@react-aria/interactions\";\nimport a from \"../use-drip\";\nimport { useDOMRef as t } from \"../utils/dom\";\nexport const useCard = l => {\n  const {\n      ref: n,\n      disableAnimation: c = !1,\n      disableRipple: p = !1,\n      variant: d = \"shadow\",\n      isHoverable: u = !1,\n      borderWeight: m = \"light\",\n      isPressable: b = !1,\n      onClick: P,\n      onPress: f,\n      autoFocus: v,\n      allowTextSelectionOnPress: C = !0,\n      ...g\n    } = l,\n    h = t(n),\n    {\n      onClick: k,\n      ...F\n    } = a(!1, h),\n    H = r => {\n      c || p || !h.current || k(r);\n    },\n    {\n      isPressed: T,\n      pressProps: w\n    } = s({\n      isDisabled: !b,\n      onPress: r => {\n        \"keyboard\" !== r.pointerType && \"virtual\" !== r.pointerType || (H(r), null == P || P(r)), null == f || f(r);\n      },\n      allowTextSelectionOnPress: C,\n      ...g\n    }),\n    {\n      hoverProps: x,\n      isHovered: y\n    } = o({\n      isDisabled: !u,\n      ...g\n    }),\n    {\n      isFocusVisible: D,\n      focusProps: R\n    } = i({\n      autoFocus: v\n    });\n  w.onClick = r => {\n    b && (H(r), null == P || P(r));\n  };\n  const A = r((r = {}) => ({\n    ...e(b ? {\n      ...w,\n      ...R\n    } : {}, u ? x : {}, g, r)\n  }), [b, u, w, R, x, g]);\n  return {\n    cardRef: h,\n    variant: d,\n    borderWeight: m,\n    isPressable: b,\n    isHovered: y,\n    isPressed: T,\n    disableAnimation: c,\n    disableRipple: p,\n    dripBindings: F,\n    onDripClickHandler: k,\n    isFocusVisible: D,\n    getCardProps: A\n  };\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}