{"ast":null,"code":"import { isHex } from '../data/isHex.js';\nimport { hexToNumber } from '../encoding/fromHex.js';\nimport { toHex } from '../encoding/toHex.js';\nexport async function recoverPublicKey({\n  hash,\n  signature\n}) {\n  const signatureHex = isHex(signature) ? signature : toHex(signature);\n  const hashHex = isHex(hash) ? hash : toHex(hash);\n  // Derive v = recoveryId + 27 from end of the signature (27 is added when signing the message)\n  // The recoveryId represents the y-coordinate on the secp256k1 elliptic curve and can have a value [0, 1].\n  let v = hexToNumber(`0x${signatureHex.slice(130)}`);\n  if (v === 0 || v === 1) v += 27;\n  const {\n    secp256k1\n  } = await import('@noble/curves/secp256k1');\n  const publicKey = secp256k1.Signature.fromCompact(signatureHex.substring(2, 130)).addRecoveryBit(v - 27).recoverPublicKey(hashHex.substring(2)).toHex(false);\n  return `0x${publicKey}`;\n}\n//# sourceMappingURL=recoverPublicKey.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}