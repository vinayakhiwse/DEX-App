{"ast":null,"code":"\"use client\";\n\n// src/use-chip.ts\nimport { mapPropsVariants } from \"@nextui-org/system\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { usePress } from \"@react-aria/interactions\";\nimport { useFocusRing } from \"@react-aria/focus\";\nimport { chip } from \"@nextui-org/theme\";\nimport { useDOMRef } from \"@nextui-org/react-utils\";\nimport { clsx } from \"@nextui-org/shared-utils\";\nimport { useMemo, isValidElement, cloneElement } from \"react\";\nfunction useChip(originalProps) {\n  const [props, variantProps] = mapPropsVariants(originalProps, chip.variantKeys);\n  const {\n    ref,\n    as,\n    children,\n    avatar,\n    startContent,\n    endContent,\n    onClose,\n    classNames,\n    className,\n    ...otherProps\n  } = props;\n  const Component = as || \"div\";\n  const domRef = useDOMRef(ref);\n  const baseStyles = clsx(classNames == null ? void 0 : classNames.base, className);\n  const isCloseable = !!onClose;\n  const isDotVariant = originalProps.variant === \"dot\";\n  const {\n    focusProps: closeFocusProps,\n    isFocusVisible: isCloseButtonFocusVisible\n  } = useFocusRing();\n  const isOneChar = useMemo(() => typeof children === \"string\" && (children == null ? void 0 : children.length) === 1, [children]);\n  const hasStartContent = useMemo(() => !!avatar || !!startContent, [avatar, startContent]);\n  const hasEndContent = useMemo(() => !!endContent || isCloseable, [endContent, isCloseable]);\n  const slots = useMemo(() => chip({\n    ...variantProps,\n    hasStartContent,\n    hasEndContent,\n    isOneChar,\n    isCloseable,\n    isCloseButtonFocusVisible\n  }), [...Object.values(variantProps), isCloseButtonFocusVisible, hasStartContent, hasEndContent, isOneChar, isCloseable]);\n  const {\n    pressProps: closePressProps\n  } = usePress({\n    isDisabled: !!(originalProps == null ? void 0 : originalProps.isDisabled),\n    onPress: onClose\n  });\n  const getChipProps = () => {\n    return {\n      ref: domRef,\n      className: slots.base({\n        class: baseStyles\n      }),\n      ...otherProps\n    };\n  };\n  const getCloseButtonProps = () => {\n    return {\n      role: \"button\",\n      tabIndex: 0,\n      className: slots.closeButton({\n        class: classNames == null ? void 0 : classNames.closeButton\n      }),\n      ...mergeProps(closePressProps, closeFocusProps)\n    };\n  };\n  const getAvatarClone = avatar2 => {\n    if (!isValidElement(avatar2)) return null;\n    return cloneElement(avatar2, {\n      className: slots.avatar({\n        class: classNames == null ? void 0 : classNames.avatar\n      })\n    });\n  };\n  const getContentClone = content => isValidElement(content) ? cloneElement(content, {\n    className: clsx(\"max-h-[80%]\", content.props.className)\n  }) : null;\n  return {\n    Component,\n    children,\n    slots,\n    classNames,\n    isDot: isDotVariant,\n    isCloseable,\n    startContent: getAvatarClone(avatar) || getContentClone(startContent),\n    endContent: getContentClone(endContent),\n    getCloseButtonProps,\n    getChipProps\n  };\n}\nexport { useChip };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}