{"ast":null,"code":"\"use client\";\n\n// src/use-circular-progress.ts\nimport { mapPropsVariants } from \"@nextui-org/system\";\nimport { circularProgress } from \"@nextui-org/theme\";\nimport { useDOMRef } from \"@nextui-org/react-utils\";\nimport { clampPercentage, clsx, dataAttr } from \"@nextui-org/shared-utils\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { useMemo, useCallback } from \"react\";\nimport { useIsMounted } from \"@nextui-org/use-is-mounted\";\nimport { useProgressBar as useAriaProgress } from \"@react-aria/progress\";\nfunction useCircularProgress(originalProps) {\n  var _a;\n  const [props, variantProps] = mapPropsVariants(originalProps, circularProgress.variantKeys);\n  const {\n    ref,\n    as,\n    id,\n    className,\n    classNames,\n    label,\n    valueLabel,\n    value = void 0,\n    minValue = 0,\n    maxValue = 100,\n    strokeWidth: strokeWidthProp,\n    showValueLabel = false,\n    formatOptions = {\n      style: \"percent\"\n    },\n    ...otherProps\n  } = props;\n  const Component = as || \"div\";\n  const domRef = useDOMRef(ref);\n  const baseStyles = clsx(classNames == null ? void 0 : classNames.base, className);\n  const [, isMounted] = useIsMounted({\n    rerender: true,\n    delay: 100\n  });\n  const isIndeterminate = ((_a = originalProps.isIndeterminate) != null ? _a : true) && value === void 0;\n  const {\n    progressBarProps,\n    labelProps\n  } = useAriaProgress({\n    id,\n    label,\n    value,\n    minValue,\n    maxValue,\n    valueLabel,\n    formatOptions,\n    isIndeterminate,\n    \"aria-labelledby\": originalProps[\"aria-labelledby\"],\n    \"aria-label\": originalProps[\"aria-label\"]\n  });\n  const slots = useMemo(() => circularProgress({\n    ...variantProps,\n    isIndeterminate\n  }), [isIndeterminate, ...Object.values(variantProps)]);\n  const selfMounted = originalProps.disableAnimation ? true : isMounted;\n  const center = 16;\n  const strokeWidth = strokeWidthProp || originalProps.size === \"sm\" ? 2 : 3;\n  const radius = 16 - strokeWidth;\n  const circumference = 2 * radius * Math.PI;\n  const percentage = useMemo(() => {\n    if (!selfMounted) {\n      return 0;\n    }\n    if (isIndeterminate) {\n      return 0.25;\n    }\n    return value ? clampPercentage((value - minValue) / (maxValue - minValue), 1) : 0;\n  }, [selfMounted, value, minValue, maxValue, isIndeterminate]);\n  const offset = circumference - percentage * circumference;\n  const getProgressBarProps = useCallback((props2 = {}) => ({\n    ref: domRef,\n    \"data-indeterminate\": dataAttr(isIndeterminate),\n    \"data-disabled\": dataAttr(originalProps.isDisabled),\n    className: slots.base({\n      class: baseStyles\n    }),\n    ...mergeProps(progressBarProps, otherProps, props2)\n  }), [domRef, slots, isIndeterminate, originalProps.isDisabled, baseStyles, progressBarProps, otherProps]);\n  const getLabelProps = useCallback((props2 = {}) => ({\n    className: slots.label({\n      class: classNames == null ? void 0 : classNames.label\n    }),\n    ...mergeProps(labelProps, props2)\n  }), [slots, classNames, labelProps]);\n  const getSvgProps = useCallback((props2 = {}) => ({\n    viewBox: \"0 0 32 32\",\n    fill: \"none\",\n    strokeWidth,\n    className: slots.svg({\n      class: classNames == null ? void 0 : classNames.svg\n    }),\n    ...props2\n  }), [strokeWidth, slots, classNames]);\n  const getIndicatorProps = useCallback((props2 = {}) => ({\n    cx: center,\n    cy: center,\n    r: radius,\n    role: \"presentation\",\n    strokeDasharray: `${circumference} ${circumference}`,\n    strokeDashoffset: offset,\n    transform: \"rotate(-90 16 16)\",\n    strokeLinecap: \"round\",\n    className: slots.indicator({\n      class: classNames == null ? void 0 : classNames.indicator\n    }),\n    ...props2\n  }), [slots, classNames, offset, circumference, radius]);\n  const getTrackProps = useCallback((props2 = {}) => ({\n    cx: center,\n    cy: center,\n    r: radius,\n    role: \"presentation\",\n    strokeDasharray: `${circumference} ${circumference}`,\n    strokeDashoffset: 0,\n    transform: \"rotate(-90 16 16)\",\n    strokeLinecap: \"round\",\n    className: slots.track({\n      class: classNames == null ? void 0 : classNames.track\n    }),\n    ...props2\n  }), [slots, classNames, circumference, radius]);\n  return {\n    Component,\n    domRef,\n    slots,\n    classNames,\n    label,\n    showValueLabel,\n    getProgressBarProps,\n    getLabelProps,\n    getSvgProps,\n    getIndicatorProps,\n    getTrackProps\n  };\n}\nexport { useCircularProgress };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}