{"ast":null,"code":"\"use client\";\n\nimport { scaleInOut } from \"./chunk-G6W4LQQG.mjs\";\nimport { useModalContext } from \"./chunk-6JNB4JMH.mjs\";\n\n// src/modal-content.tsx\nimport { cloneElement, isValidElement, useMemo } from \"react\";\nimport { forwardRef } from \"@nextui-org/system\";\nimport { DismissButton } from \"@react-aria/overlays\";\nimport { TRANSITION_VARIANTS } from \"@nextui-org/framer-transitions\";\nimport { CloseIcon } from \"@nextui-org/shared-icons\";\nimport { RemoveScroll } from \"react-remove-scroll\";\nimport { motion } from \"framer-motion\";\nimport { useDialog } from \"@react-aria/dialog\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar ModalContent = forwardRef((props, _) => {\n  const {\n    as,\n    children,\n    role = \"dialog\",\n    ...otherProps\n  } = props;\n  const {\n    Component: DialogComponent,\n    domRef,\n    slots,\n    isOpen,\n    classNames,\n    motionProps,\n    backdrop,\n    closeButton,\n    hideCloseButton,\n    disableAnimation,\n    shouldBlockScroll,\n    getDialogProps,\n    getBackdropProps,\n    getCloseButtonProps,\n    onClose\n  } = useModalContext();\n  const Component = as || DialogComponent || \"div\";\n  const {\n    dialogProps\n  } = useDialog({\n    role\n  }, domRef);\n  const closeButtonContent = isValidElement(closeButton) ? cloneElement(closeButton, getCloseButtonProps()) : /* @__PURE__ */jsx(\"button\", {\n    ...getCloseButtonProps(),\n    children: /* @__PURE__ */jsx(CloseIcon, {})\n  });\n  const content = /* @__PURE__ */jsxs(Component, {\n    ...getDialogProps(mergeProps(dialogProps, otherProps)),\n    children: [/* @__PURE__ */jsx(DismissButton, {\n      onDismiss: onClose\n    }), !hideCloseButton && closeButtonContent, typeof children === \"function\" ? children(onClose) : children, /* @__PURE__ */jsx(DismissButton, {\n      onDismiss: onClose\n    })]\n  });\n  const backdropContent = useMemo(() => {\n    if (backdrop === \"transparent\") {\n      return null;\n    }\n    if (disableAnimation) {\n      return /* @__PURE__ */jsx(\"div\", {\n        ...getBackdropProps()\n      });\n    }\n    return /* @__PURE__ */jsx(motion.div, {\n      animate: \"enter\",\n      exit: \"exit\",\n      initial: \"exit\",\n      variants: TRANSITION_VARIANTS.fade,\n      ...getBackdropProps()\n    });\n  }, [backdrop, disableAnimation, getBackdropProps]);\n  return /* @__PURE__ */jsxs(\"div\", {\n    tabIndex: -1,\n    children: [backdropContent, /* @__PURE__ */jsx(RemoveScroll, {\n      forwardProps: true,\n      enabled: shouldBlockScroll && isOpen,\n      removeScrollBar: false,\n      children: disableAnimation ? /* @__PURE__ */jsx(\"div\", {\n        className: slots.wrapper({\n          class: classNames == null ? void 0 : classNames.wrapper\n        }),\n        children: content\n      }) : /* @__PURE__ */jsx(motion.div, {\n        animate: \"enter\",\n        className: slots.wrapper({\n          class: classNames == null ? void 0 : classNames.wrapper\n        }),\n        exit: \"exit\",\n        initial: \"exit\",\n        variants: scaleInOut,\n        ...motionProps,\n        children: content\n      })\n    })]\n  });\n});\nModalContent.displayName = \"NextUI.ModalContent\";\nvar modal_content_default = ModalContent;\nexport { modal_content_default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}