{"ast":null,"code":"import o from \"react\";\nimport { useMenu as t } from \"@react-aria/menu\";\nimport { useTreeState as r } from \"@react-stately/tree\";\nimport { mergeProps as e } from \"@react-aria/utils\";\nimport { useDOMRef as i, useSyncRef as n } from \"../utils/dom\";\nimport { useDropdownContext as m } from \"./dropdown-context\";\nimport a from \"./dropdown-section\";\nimport s from \"./dropdown-item\";\nimport { StyledDropdownMenu as p } from \"./dropdown.styles\";\nimport c from \"../utils/clsx\";\nimport { __DEV__ as l } from \"../utils/assertion\";\nimport { jsx as d } from \"react/jsx-runtime\";\nconst f = o.forwardRef((o, l) => {\n  const {\n      css: f = {},\n      as: u,\n      color: x = \"default\",\n      textColor: w = \"default\",\n      variant: y = \"flat\",\n      ...A\n    } = o,\n    N = m(),\n    v = {\n      ...e(N, A)\n    },\n    C = i(l),\n    j = r(v),\n    {\n      menuProps: k\n    } = t(v, j, C);\n  return n(N, C), d(p, {\n    ref: C,\n    as: u,\n    css: {\n      ...f\n    },\n    className: c(\"nextui-dropdown-menu\", o.className),\n    ...k,\n    children: [...j.collection].map(o => {\n      if (\"section\" === o.type) return d(a, {\n        item: o,\n        state: j,\n        onAction: v.onAction,\n        color: x,\n        textColor: w,\n        variant: y\n      }, o.key);\n      let t = d(s, {\n        item: o,\n        state: j,\n        onAction: v.onAction,\n        color: x,\n        textColor: w,\n        variant: y\n      }, o.key);\n      return o.wrapper && (t = o.wrapper(t)), t;\n    })\n  });\n});\nl && (f.displayName = \"NextUI.DropdownMenu\"), f.toString = () => \".nextui-dropdown-menu\";\nexport default f;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}