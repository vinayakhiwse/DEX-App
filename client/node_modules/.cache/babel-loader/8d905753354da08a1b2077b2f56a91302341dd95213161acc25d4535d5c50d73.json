{"ast":null,"code":"import { useRef as $ijHKZ$useRef, useEffect as $ijHKZ$useEffect } from \"react\";\nimport { useSingleSelectListState as $ijHKZ$useSingleSelectListState } from \"@react-stately/list\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n    * Copyright 2020 Adobe. All rights reserved.\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License. You may obtain a copy\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software distributed under\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n    * OF ANY KIND, either express or implied. See the License for the specific language\n    * governing permissions and limitations under the License.\n    */\n\nfunction $76f919a04c5a7d14$export$4ba071daf4e486(props) {\n  var _props_defaultSelectedKey;\n  let state = (0, $ijHKZ$useSingleSelectListState)({\n    ...props,\n    suppressTextValueWarning: true,\n    defaultSelectedKey: (_props_defaultSelectedKey = props.defaultSelectedKey) !== null && _props_defaultSelectedKey !== void 0 ? _props_defaultSelectedKey : $76f919a04c5a7d14$var$findDefaultSelectedKey(props.collection, props.disabledKeys ? new Set(props.disabledKeys) : new Set())\n  });\n  let {\n    selectionManager: selectionManager,\n    collection: collection,\n    selectedKey: currentSelectedKey\n  } = state;\n  let lastSelectedKey = (0, $ijHKZ$useRef)(currentSelectedKey);\n  (0, $ijHKZ$useEffect)(() => {\n    // Ensure a tab is always selected (in case no selected key was specified or if selected item was deleted from collection)\n    let selectedKey = currentSelectedKey;\n    if (selectionManager.isEmpty || !collection.getItem(selectedKey)) {\n      selectedKey = $76f919a04c5a7d14$var$findDefaultSelectedKey(collection, state.disabledKeys);\n      if (selectedKey != null)\n        // directly set selection because replace/toggle selection won't consider disabled keys\n        selectionManager.setSelectedKeys([selectedKey]);\n    }\n    // If the tablist doesn't have focus and the selected key changes or if there isn't a focused key yet, change focused key to the selected key if it exists.\n    if (selectedKey != null && selectionManager.focusedKey == null || !selectionManager.isFocused && selectedKey !== lastSelectedKey.current) selectionManager.setFocusedKey(selectedKey);\n    lastSelectedKey.current = selectedKey;\n  });\n  return {\n    ...state,\n    isDisabled: props.isDisabled || false\n  };\n}\nfunction $76f919a04c5a7d14$var$findDefaultSelectedKey(collection, disabledKeys) {\n  let selectedKey = null;\n  if (collection) {\n    selectedKey = collection.getFirstKey();\n    // loop over tabs until we find one that isn't disabled and select that\n    while (disabledKeys.has(selectedKey) && selectedKey !== collection.getLastKey()) selectedKey = collection.getKeyAfter(selectedKey);\n    // if this check is true, then every item is disabled, it makes more sense to default to the first key than the last\n    if (disabledKeys.has(selectedKey) && selectedKey === collection.getLastKey()) selectedKey = collection.getFirstKey();\n  }\n  return selectedKey;\n}\nexport { $76f919a04c5a7d14$export$4ba071daf4e486 as useTabListState };\n//# sourceMappingURL=module.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}