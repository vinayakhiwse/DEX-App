{"ast":null,"code":"import { filterDOMProps as $kgVYN$filterDOMProps, mergeProps as $kgVYN$mergeProps, useId as $kgVYN$useId } from \"@react-aria/utils\";\nimport { useHover as $kgVYN$useHover, getInteractionModality as $kgVYN$getInteractionModality, isFocusVisible as $kgVYN$isFocusVisible, usePress as $kgVYN$usePress } from \"@react-aria/interactions\";\nimport { useRef as $kgVYN$useRef, useEffect as $kgVYN$useEffect } from \"react\";\nimport { useFocusable as $kgVYN$useFocusable } from \"@react-aria/focus\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n    * Copyright 2020 Adobe. All rights reserved.\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License. You may obtain a copy\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software distributed under\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n    * OF ANY KIND, either express or implied. See the License for the specific language\n    * governing permissions and limitations under the License.\n    */\n\nfunction $326e436e94273fe1$export$1c4b08e0eca38426(props, state) {\n  let domProps = (0, $kgVYN$filterDOMProps)(props, {\n    labelable: true\n  });\n  let {\n    hoverProps: hoverProps\n  } = (0, $kgVYN$useHover)({\n    onHoverStart: () => {\n      return state === null || state === void 0 ? void 0 : state.open(true);\n    },\n    onHoverEnd: () => {\n      return state === null || state === void 0 ? void 0 : state.close();\n    }\n  });\n  return {\n    tooltipProps: (0, $kgVYN$mergeProps)(domProps, hoverProps, {\n      role: \"tooltip\"\n    })\n  };\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $4e1b34546679e357$export$a6da6c504e4bba8b(props, state, ref) {\n  let {\n    isDisabled: isDisabled,\n    trigger: trigger\n  } = props;\n  let tooltipId = (0, $kgVYN$useId)();\n  let isHovered = (0, $kgVYN$useRef)(false);\n  let isFocused = (0, $kgVYN$useRef)(false);\n  let handleShow = () => {\n    if (isHovered.current || isFocused.current) state.open(isFocused.current);\n  };\n  let handleHide = immediate => {\n    if (!isHovered.current && !isFocused.current) state.close(immediate);\n  };\n  (0, $kgVYN$useEffect)(() => {\n    let onKeyDown = e => {\n      if (ref && ref.current)\n        // Escape after clicking something can give it keyboard focus\n        // dismiss tooltip on esc key press\n        {\n          if (e.key === \"Escape\") {\n            e.stopPropagation();\n            state.close(true);\n          }\n        }\n    };\n    if (state.isOpen) {\n      document.addEventListener(\"keydown\", onKeyDown, true);\n      return () => {\n        document.removeEventListener(\"keydown\", onKeyDown, true);\n      };\n    }\n  }, [ref, state]);\n  let onHoverStart = () => {\n    if (trigger === \"focus\") return;\n    // In chrome, if you hover a trigger, then another element obscures it, due to keyboard\n    // interactions for example, hover will end. When hover is restored after that element disappears,\n    // focus moves on for example, then the tooltip will reopen. We check the modality to know if the hover\n    // is the result of moving the mouse.\n    if ((0, $kgVYN$getInteractionModality)() === \"pointer\") isHovered.current = true;else isHovered.current = false;\n    handleShow();\n  };\n  let onHoverEnd = () => {\n    if (trigger === \"focus\") return;\n    // no matter how the trigger is left, we should close the tooltip\n    isFocused.current = false;\n    isHovered.current = false;\n    handleHide();\n  };\n  let onPressStart = () => {\n    // no matter how the trigger is pressed, we should close the tooltip\n    isFocused.current = false;\n    isHovered.current = false;\n    handleHide(true);\n  };\n  let onFocus = () => {\n    let isVisible = (0, $kgVYN$isFocusVisible)();\n    if (isVisible) {\n      isFocused.current = true;\n      handleShow();\n    }\n  };\n  let onBlur = () => {\n    isFocused.current = false;\n    isHovered.current = false;\n    handleHide(true);\n  };\n  let {\n    hoverProps: hoverProps\n  } = (0, $kgVYN$useHover)({\n    isDisabled: isDisabled,\n    onHoverStart: onHoverStart,\n    onHoverEnd: onHoverEnd\n  });\n  let {\n    pressProps: pressProps\n  } = (0, $kgVYN$usePress)({\n    onPressStart: onPressStart\n  });\n  let {\n    focusableProps: focusableProps\n  } = (0, $kgVYN$useFocusable)({\n    isDisabled: isDisabled,\n    onFocus: onFocus,\n    onBlur: onBlur\n  }, ref);\n  return {\n    triggerProps: {\n      \"aria-describedby\": state.isOpen ? tooltipId : undefined,\n      ...(0, $kgVYN$mergeProps)(focusableProps, hoverProps, pressProps)\n    },\n    tooltipProps: {\n      id: tooltipId\n    }\n  };\n}\nexport { $326e436e94273fe1$export$1c4b08e0eca38426 as useTooltip, $4e1b34546679e357$export$a6da6c504e4bba8b as useTooltipTrigger };\n//# sourceMappingURL=module.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}