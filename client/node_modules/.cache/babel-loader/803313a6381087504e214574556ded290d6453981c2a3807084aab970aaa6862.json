{"ast":null,"code":"\"use client\";\n\nimport { HiddenSelect } from \"./chunk-6D5IY2EM.mjs\";\nimport { useSelect } from \"./chunk-VAOWCPVC.mjs\";\n\n// src/select.tsx\nimport { Listbox } from \"@nextui-org/listbox\";\nimport { FreeSoloPopover } from \"@nextui-org/popover\";\nimport { ChevronDownIcon } from \"@nextui-org/shared-icons\";\nimport { Spinner } from \"@nextui-org/spinner\";\nimport { forwardRef } from \"@nextui-org/system\";\nimport { ScrollShadow } from \"@nextui-org/scroll-shadow\";\nimport { cloneElement, useMemo } from \"react\";\nimport { VisuallyHidden } from \"@react-aria/visually-hidden\";\nimport { AnimatePresence } from \"framer-motion\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nfunction Select(props, ref) {\n  const {\n    Component,\n    state,\n    label,\n    hasHelper,\n    isLoading,\n    triggerRef,\n    selectorIcon = /* @__PURE__ */jsx(ChevronDownIcon, {}),\n    description,\n    errorMessage,\n    startContent,\n    endContent,\n    placeholder,\n    renderValue,\n    disableAnimation,\n    getBaseProps,\n    getLabelProps,\n    getTriggerProps,\n    getValueProps,\n    getListboxProps,\n    getPopoverProps,\n    getSpinnerProps,\n    getMainWrapperProps,\n    shouldLabelBeOutside,\n    getInnerWrapperProps,\n    getHiddenSelectProps,\n    getHelperWrapperProps,\n    getListboxWrapperProps,\n    getDescriptionProps,\n    getErrorMessageProps,\n    getSelectorIconProps\n  } = useSelect({\n    ...props,\n    ref\n  });\n  const labelContent = label ? /* @__PURE__ */jsx(\"label\", {\n    ...getLabelProps(),\n    children: label\n  }) : null;\n  const clonedIcon = cloneElement(selectorIcon, getSelectorIconProps());\n  const helperWrapper = useMemo(() => {\n    if (!hasHelper) return null;\n    return /* @__PURE__ */jsx(\"div\", {\n      ...getHelperWrapperProps(),\n      children: errorMessage ? /* @__PURE__ */jsx(\"div\", {\n        ...getErrorMessageProps(),\n        children: errorMessage\n      }) : description ? /* @__PURE__ */jsx(\"div\", {\n        ...getDescriptionProps(),\n        children: description\n      }) : null\n    });\n  }, [hasHelper, errorMessage, description, getHelperWrapperProps, getErrorMessageProps, getDescriptionProps]);\n  const renderSelectedItem = useMemo(() => {\n    if (!state.selectedItems) return placeholder;\n    if (renderValue && typeof renderValue === \"function\") {\n      const mappedItems = [...state.selectedItems].map(item => ({\n        key: item.key,\n        data: item.value,\n        type: item.type,\n        props: item.props,\n        textValue: item.textValue,\n        rendered: item.rendered,\n        \"aria-label\": item[\"aria-label\"]\n      }));\n      return renderValue(mappedItems);\n    }\n    return state.selectedItems.map(item => item.textValue).join(\", \");\n  }, [state.selectedItems, renderValue]);\n  const renderIndicator = useMemo(() => {\n    if (isLoading) {\n      return /* @__PURE__ */jsx(Spinner, {\n        ...getSpinnerProps()\n      });\n    }\n    return clonedIcon;\n  }, [isLoading, clonedIcon, getSpinnerProps]);\n  const popoverContent = useMemo(() => state.isOpen ? /* @__PURE__ */jsx(FreeSoloPopover, {\n    ...getPopoverProps(),\n    state,\n    triggerRef,\n    children: /* @__PURE__ */jsx(ScrollShadow, {\n      ...getListboxWrapperProps(),\n      children: /* @__PURE__ */jsx(Listbox, {\n        ...getListboxProps()\n      })\n    })\n  }) : null, [state.isOpen, getPopoverProps, state, triggerRef, getListboxWrapperProps, getListboxProps]);\n  return /* @__PURE__ */jsxs(\"div\", {\n    ...getBaseProps(),\n    children: [/* @__PURE__ */jsx(HiddenSelect, {\n      ...getHiddenSelectProps()\n    }), shouldLabelBeOutside ? labelContent : null, /* @__PURE__ */jsxs(\"div\", {\n      ...getMainWrapperProps(),\n      children: [/* @__PURE__ */jsxs(Component, {\n        ...getTriggerProps(),\n        children: [!shouldLabelBeOutside ? labelContent : null, /* @__PURE__ */jsxs(\"div\", {\n          ...getInnerWrapperProps(),\n          children: [startContent, /* @__PURE__ */jsxs(\"span\", {\n            ...getValueProps(),\n            children: [renderSelectedItem, state.selectedItems && /* @__PURE__ */jsx(VisuallyHidden, {\n              children: \",\"\n            })]\n          }), endContent]\n        }), renderIndicator]\n      }), helperWrapper]\n    }), disableAnimation ? popoverContent : /* @__PURE__ */jsx(AnimatePresence, {\n      children: popoverContent\n    })]\n  });\n}\nvar select_default = forwardRef(Select);\nSelect.displayName = \"NextUI.Select\";\nexport { select_default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}