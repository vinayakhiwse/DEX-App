{"ast":null,"code":"\"use client\";\n\n// src/ripple.tsx\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport { Fragment, jsx } from \"react/jsx-runtime\";\nvar clamp = (value, min, max) => {\n  return Math.min(Math.max(value, min), max);\n};\nvar Ripple = props => {\n  const {\n    ripples = [],\n    motionProps,\n    color = \"currentColor\",\n    style,\n    onClear\n  } = props;\n  return /* @__PURE__ */jsx(Fragment, {\n    children: ripples.map(ripple => {\n      const duration = clamp(0.01 * ripple.size, 0.2, ripple.size > 100 ? 0.75 : 0.5);\n      return /* @__PURE__ */jsx(AnimatePresence, {\n        mode: \"popLayout\",\n        children: /* @__PURE__ */jsx(motion.span, {\n          animate: {\n            transform: \"scale(2)\",\n            opacity: 0\n          },\n          className: \"nextui-ripple\",\n          exit: {\n            opacity: 0\n          },\n          initial: {\n            transform: \"scale(0)\",\n            opacity: 0.35\n          },\n          style: {\n            position: \"absolute\",\n            backgroundColor: color,\n            borderRadius: \"100%\",\n            transformOrigin: \"center\",\n            pointerEvents: \"none\",\n            zIndex: 10,\n            top: ripple.y,\n            left: ripple.x,\n            width: `${ripple.size}px`,\n            height: `${ripple.size}px`,\n            ...style\n          },\n          transition: {\n            duration\n          },\n          onAnimationEnd: () => onClear(ripple.key),\n          onTransitionEnd: () => onClear(ripple.key),\n          ...motionProps\n        })\n      }, ripple.key);\n    })\n  });\n};\nRipple.displayName = \"NextUI.Ripple\";\nvar ripple_default = Ripple;\nexport { ripple_default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}