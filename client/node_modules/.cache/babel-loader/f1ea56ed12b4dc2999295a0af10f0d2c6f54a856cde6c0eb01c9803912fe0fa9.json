{"ast":null,"code":"import { BaseError } from '../errors/base.js';\nimport { HttpRequestError } from '../errors/request.js';\nimport { ChainDisconnectedError, InternalRpcError, InvalidInputRpcError, InvalidParamsRpcError, InvalidRequestRpcError, JsonRpcVersionUnsupportedError, LimitExceededRpcError, MethodNotFoundRpcError, MethodNotSupportedRpcError, ParseRpcError, ProviderDisconnectedError, ResourceNotFoundRpcError, ResourceUnavailableRpcError, SwitchChainError, TransactionRejectedRpcError, UnauthorizedProviderError, UnknownRpcError, UnsupportedProviderMethodError, UserRejectedRequestError } from '../errors/rpc.js';\nimport { withRetry } from './promise/withRetry.js';\nexport const isDeterministicError = error => {\n  if ('code' in error) return error.code !== -1 && error.code !== -32004 && error.code !== -32005 && error.code !== -32042 && error.code !== -32603;\n  if (error instanceof HttpRequestError && error.status) return error.status !== 403 && error.status !== 408 && error.status !== 413 && error.status !== 429 && error.status !== 500 && error.status !== 502 && error.status !== 503 && error.status !== 504;\n  return false;\n};\nexport function buildRequest(request, {\n  retryDelay = 150,\n  retryCount = 3\n} = {}) {\n  return async args => withRetry(async () => {\n    try {\n      return await request(args);\n    } catch (err_) {\n      const err = err_;\n      switch (err.code) {\n        // -32700\n        case ParseRpcError.code:\n          throw new ParseRpcError(err);\n        // -32600\n        case InvalidRequestRpcError.code:\n          throw new InvalidRequestRpcError(err);\n        // -32601\n        case MethodNotFoundRpcError.code:\n          throw new MethodNotFoundRpcError(err);\n        // -32602\n        case InvalidParamsRpcError.code:\n          throw new InvalidParamsRpcError(err);\n        // -32603\n        case InternalRpcError.code:\n          throw new InternalRpcError(err);\n        // -32000\n        case InvalidInputRpcError.code:\n          throw new InvalidInputRpcError(err);\n        // -32001\n        case ResourceNotFoundRpcError.code:\n          throw new ResourceNotFoundRpcError(err);\n        // -32002\n        case ResourceUnavailableRpcError.code:\n          throw new ResourceUnavailableRpcError(err);\n        // -32003\n        case TransactionRejectedRpcError.code:\n          throw new TransactionRejectedRpcError(err);\n        // -32004\n        case MethodNotSupportedRpcError.code:\n          throw new MethodNotSupportedRpcError(err);\n        // -32005\n        case LimitExceededRpcError.code:\n          throw new LimitExceededRpcError(err);\n        // -32006\n        case JsonRpcVersionUnsupportedError.code:\n          throw new JsonRpcVersionUnsupportedError(err);\n        // 4001\n        case UserRejectedRequestError.code:\n          throw new UserRejectedRequestError(err);\n        // 4100\n        case UnauthorizedProviderError.code:\n          throw new UnauthorizedProviderError(err);\n        // 4200\n        case UnsupportedProviderMethodError.code:\n          throw new UnsupportedProviderMethodError(err);\n        // 4900\n        case ProviderDisconnectedError.code:\n          throw new ProviderDisconnectedError(err);\n        // 4901\n        case ChainDisconnectedError.code:\n          throw new ChainDisconnectedError(err);\n        // 4902\n        case SwitchChainError.code:\n          throw new SwitchChainError(err);\n        // CAIP-25: User Rejected Error\n        // https://docs.walletconnect.com/2.0/specs/clients/sign/error-codes#rejected-caip-25\n        case 5000:\n          throw new UserRejectedRequestError(err);\n        default:\n          if (err_ instanceof BaseError) throw err_;\n          throw new UnknownRpcError(err);\n      }\n    }\n  }, {\n    delay: ({\n      count,\n      error\n    }) => {\n      // If we find a Retry-After header, let's retry after the given time.\n      if (error && error instanceof HttpRequestError) {\n        const retryAfter = error?.headers?.get('Retry-After');\n        if (retryAfter?.match(/\\d/)) return parseInt(retryAfter) * 1000;\n      }\n      // Otherwise, let's retry with an exponential backoff.\n      return ~~(1 << count) * retryDelay;\n    },\n    retryCount,\n    shouldRetry: ({\n      error\n    }) => !isDeterministicError(error)\n  });\n}\n//# sourceMappingURL=buildRequest.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}