{"ast":null,"code":"\"use client\";\n\nimport { table_cell_default } from \"./chunk-MWTZZPYB.mjs\";\nimport { table_checkbox_cell_default } from \"./chunk-ZVKU2CIZ.mjs\";\nimport { table_row_default } from \"./chunk-QURPNGP7.mjs\";\n\n// src/table-body.tsx\nimport { forwardRef } from \"@nextui-org/system\";\nimport { useDOMRef } from \"@nextui-org/react-utils\";\nimport { clsx, dataAttr } from \"@nextui-org/shared-utils\";\nimport { useTableRowGroup } from \"@react-aria/table\";\nimport { filterDOMProps } from \"@nextui-org/react-utils\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { useMemo } from \"react\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar TableBody = forwardRef((props, ref) => {\n  var _a;\n  const {\n    as,\n    className,\n    slots,\n    state,\n    collection,\n    isSelectable,\n    color,\n    disableAnimation,\n    checkboxesProps,\n    selectionMode,\n    classNames,\n    ...otherProps\n  } = props;\n  const Component = as || \"tbody\";\n  const shouldFilterDOMProps = typeof Component === \"string\";\n  const domRef = useDOMRef(ref);\n  const {\n    rowGroupProps\n  } = useTableRowGroup();\n  const tbodyStyles = clsx(classNames == null ? void 0 : classNames.tbody, className);\n  const bodyProps = collection == null ? void 0 : collection.body.props;\n  const isLoading = (bodyProps == null ? void 0 : bodyProps.isLoading) || (bodyProps == null ? void 0 : bodyProps.loadingState) === \"loading\" || (bodyProps == null ? void 0 : bodyProps.loadingState) === \"loadingMore\";\n  const renderRows = useMemo(() => {\n    return [...collection.body.childNodes].map(row => /* @__PURE__ */jsx(table_row_default, {\n      classNames,\n      isSelectable,\n      node: row,\n      slots,\n      state,\n      children: [...row.childNodes].map(cell => cell.props.isSelectionCell ? /* @__PURE__ */jsx(table_checkbox_cell_default, {\n        checkboxesProps,\n        classNames,\n        color,\n        disableAnimation,\n        node: cell,\n        rowKey: row.key,\n        selectionMode,\n        slots,\n        state\n      }, cell.key) : /* @__PURE__ */jsx(table_cell_default, {\n        classNames,\n        node: cell,\n        rowKey: row.key,\n        slots,\n        state\n      }, cell.key))\n    }, row.key));\n  }, [collection.body.childNodes, classNames, isSelectable, slots, state]);\n  let emptyContent;\n  let loadingContent;\n  if (collection.size === 0 && bodyProps.emptyContent) {\n    emptyContent = /* @__PURE__ */jsx(\"tr\", {\n      role: \"row\",\n      children: /* @__PURE__ */jsx(\"td\", {\n        className: slots == null ? void 0 : slots.emptyWrapper({\n          class: classNames == null ? void 0 : classNames.emptyWrapper\n        }),\n        colSpan: collection.columnCount,\n        role: \"gridcell\",\n        children: bodyProps.emptyContent\n      })\n    });\n  }\n  if (isLoading && bodyProps.loadingContent) {\n    loadingContent = /* @__PURE__ */jsx(\"tr\", {\n      role: \"row\",\n      children: /* @__PURE__ */jsx(\"td\", {\n        className: slots == null ? void 0 : slots.loadingWrapper({\n          class: classNames == null ? void 0 : classNames.loadingWrapper\n        }),\n        colSpan: collection.columnCount,\n        role: \"gridcell\",\n        children: bodyProps.loadingContent\n      })\n    });\n  }\n  return /* @__PURE__ */jsxs(Component, {\n    ref: domRef,\n    ...mergeProps(rowGroupProps, filterDOMProps(bodyProps, {\n      enabled: shouldFilterDOMProps\n    }), otherProps),\n    className: (_a = slots.tbody) == null ? void 0 : _a.call(slots, {\n      class: tbodyStyles\n    }),\n    \"data-empty\": dataAttr(collection.size === 0),\n    \"data-loading\": dataAttr(isLoading),\n    children: [renderRows, loadingContent, emptyContent]\n  });\n});\nTableBody.displayName = \"NextUI.TableBody\";\nvar table_body_default = TableBody;\nexport { table_body_default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}