{"ast":null,"code":"import { useRef as o, useMemo as i } from \"react\";\nimport { useRadio as e } from \"@react-aria/radio\";\nimport { useHover as r } from \"@react-aria/interactions\";\nimport a from \"../use-warning\";\nimport { __DEV__ as t } from \"../utils/assertion\";\nimport { useRadioGroupContext as l } from \"./radio-context\";\nexport const useRadio = s => {\n  var d, n, u;\n  const p = l(),\n    {\n      size: c = null != (d = p.size) ? d : \"md\",\n      color: m = null != (n = p.color) ? n : \"default\",\n      labelColor: v = null != (u = p.labelColor) ? u : \"default\",\n      autoFocus: f,\n      isSquared: b = !1,\n      disableAnimation: R = !1,\n      ...h\n    } = s;\n  p && t && (void 0 !== h.checked && a('Remove props \"checked\" if in the Radio.Group.', \"Radio\"), void 0 === h.value && a('Props \"value\" must be defined if in the Radio.Group.', \"Radio\"));\n  const P = o(null),\n    {\n      inputProps: S\n    } = e(h, p.radioGroupState, P),\n    z = i(() => {\n      var o;\n      return null != (o = S.disabled) && o;\n    }, [S.disabled]),\n    {\n      hoverProps: C,\n      isHovered: G\n    } = r({\n      isDisabled: z\n    });\n  return {\n    size: c,\n    color: m,\n    inputRef: P,\n    autoFocus: f,\n    isDisabled: z,\n    labelColor: v,\n    isInvalid: i(() => \"invalid\" === p.validationState, [p.validationState]),\n    isHovered: G,\n    isSquared: b,\n    disableAnimation: R,\n    inputProps: S,\n    hoverProps: C\n  };\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}