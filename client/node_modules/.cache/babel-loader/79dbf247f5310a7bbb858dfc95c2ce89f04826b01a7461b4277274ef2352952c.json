{"ast":null,"code":"// src/index.ts\nimport { useRef, useEffect } from \"react\";\nvar isBrowser = typeof window !== \"undefined\";\nfunction getScrollPosition(element) {\n  if (!isBrowser) return {\n    x: 0,\n    y: 0\n  };\n  if (!element) {\n    return {\n      x: window.scrollX,\n      y: window.scrollY\n    };\n  }\n  return {\n    x: element.scrollLeft,\n    y: element.scrollTop\n  };\n}\nvar useScrollPosition = props => {\n  const {\n    elementRef,\n    delay = 30,\n    callback,\n    isEnabled\n  } = props;\n  const position = useRef(isEnabled ? getScrollPosition(elementRef == null ? void 0 : elementRef.current) : {\n    x: 0,\n    y: 0\n  });\n  let throttleTimeout = null;\n  const handler = () => {\n    const currPos = getScrollPosition(elementRef == null ? void 0 : elementRef.current);\n    if (typeof callback === \"function\") {\n      callback({\n        prevPos: position.current,\n        currPos\n      });\n    }\n    position.current = currPos;\n    throttleTimeout = null;\n  };\n  useEffect(() => {\n    if (!isEnabled) return;\n    const handleScroll = () => {\n      if (delay) {\n        if (throttleTimeout === null) {\n          throttleTimeout = setTimeout(handler, delay);\n        }\n      } else {\n        handler();\n      }\n    };\n    const target = (elementRef == null ? void 0 : elementRef.current) || window;\n    target.addEventListener(\"scroll\", handleScroll);\n    return () => target.removeEventListener(\"scroll\", handleScroll);\n  }, [elementRef == null ? void 0 : elementRef.current, delay, isEnabled]);\n  return position.current;\n};\nexport { useScrollPosition };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}