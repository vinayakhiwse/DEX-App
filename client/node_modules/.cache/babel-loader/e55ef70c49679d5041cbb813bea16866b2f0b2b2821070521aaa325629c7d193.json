{"ast":null,"code":"import { EventEmitter } from \"events\";\nimport { safeJsonParse, safeJsonStringify } from \"@walletconnect/safe-json\";\nimport { formatJsonRpcError, isReactNative, isWsUrl, isLocalhostUrl, parseConnectionError } from \"@walletconnect/jsonrpc-utils\";\nimport { truncateQuery, resolveWebSocketImplementation, hasBuiltInWebSocket } from \"./utils\";\nconst EVENT_EMITTER_MAX_LISTENERS_DEFAULT = 10;\nconst WS = resolveWebSocketImplementation();\nexport class WsConnection {\n  constructor(url) {\n    this.url = url;\n    this.events = new EventEmitter();\n    this.registering = false;\n    if (!isWsUrl(url)) {\n      throw new Error(`Provided URL is not compatible with WebSocket connection: ${url}`);\n    }\n    this.url = url;\n  }\n  get connected() {\n    return typeof this.socket !== \"undefined\";\n  }\n  get connecting() {\n    return this.registering;\n  }\n  on(event, listener) {\n    this.events.on(event, listener);\n  }\n  once(event, listener) {\n    this.events.once(event, listener);\n  }\n  off(event, listener) {\n    this.events.off(event, listener);\n  }\n  removeListener(event, listener) {\n    this.events.removeListener(event, listener);\n  }\n  async open(url = this.url) {\n    await this.register(url);\n  }\n  async close() {\n    return new Promise((resolve, reject) => {\n      if (typeof this.socket === \"undefined\") {\n        reject(new Error(\"Connection already closed\"));\n        return;\n      }\n      this.socket.onclose = event => {\n        this.onClose(event);\n        resolve();\n      };\n      this.socket.close();\n    });\n  }\n  async send(payload, context) {\n    if (typeof this.socket === \"undefined\") {\n      this.socket = await this.register();\n    }\n    try {\n      this.socket.send(safeJsonStringify(payload));\n    } catch (e) {\n      this.onError(payload.id, e);\n    }\n  }\n  register(url = this.url) {\n    if (!isWsUrl(url)) {\n      throw new Error(`Provided URL is not compatible with WebSocket connection: ${url}`);\n    }\n    if (this.registering) {\n      const currentMaxListeners = this.events.getMaxListeners();\n      if (this.events.listenerCount(\"register_error\") >= currentMaxListeners || this.events.listenerCount(\"open\") >= currentMaxListeners) {\n        this.events.setMaxListeners(currentMaxListeners + 1);\n      }\n      return new Promise((resolve, reject) => {\n        this.events.once(\"register_error\", error => {\n          this.resetMaxListeners();\n          reject(error);\n        });\n        this.events.once(\"open\", () => {\n          this.resetMaxListeners();\n          if (typeof this.socket === \"undefined\") {\n            return reject(new Error(\"WebSocket connection is missing or invalid\"));\n          }\n          resolve(this.socket);\n        });\n      });\n    }\n    this.url = url;\n    this.registering = true;\n    return new Promise((resolve, reject) => {\n      const opts = !isReactNative() ? {\n        rejectUnauthorized: !isLocalhostUrl(url)\n      } : undefined;\n      const socket = new WS(url, [], opts);\n      if (hasBuiltInWebSocket()) {\n        socket.onerror = event => {\n          const errorEvent = event;\n          reject(this.emitError(errorEvent.error));\n        };\n      } else {\n        socket.on(\"error\", errorEvent => {\n          reject(this.emitError(errorEvent));\n        });\n      }\n      socket.onopen = () => {\n        this.onOpen(socket);\n        resolve(socket);\n      };\n    });\n  }\n  onOpen(socket) {\n    socket.onmessage = event => this.onPayload(event);\n    socket.onclose = event => this.onClose(event);\n    this.socket = socket;\n    this.registering = false;\n    this.events.emit(\"open\");\n  }\n  onClose(event) {\n    this.socket = undefined;\n    this.registering = false;\n    this.events.emit(\"close\", event);\n  }\n  onPayload(e) {\n    if (typeof e.data === \"undefined\") return;\n    const payload = typeof e.data === \"string\" ? safeJsonParse(e.data) : e.data;\n    this.events.emit(\"payload\", payload);\n  }\n  onError(id, e) {\n    const error = this.parseError(e);\n    const message = error.message || error.toString();\n    const payload = formatJsonRpcError(id, message);\n    this.events.emit(\"payload\", payload);\n  }\n  parseError(e, url = this.url) {\n    return parseConnectionError(e, truncateQuery(url), \"WS\");\n  }\n  resetMaxListeners() {\n    if (this.events.getMaxListeners() > EVENT_EMITTER_MAX_LISTENERS_DEFAULT) {\n      this.events.setMaxListeners(EVENT_EMITTER_MAX_LISTENERS_DEFAULT);\n    }\n  }\n  emitError(errorEvent) {\n    const error = this.parseError(new Error((errorEvent === null || errorEvent === void 0 ? void 0 : errorEvent.message) || `WebSocket connection failed for host: ${truncateQuery(this.url)}`));\n    this.events.emit(\"register_error\", error);\n    return error;\n  }\n}\nexport default WsConnection;\n//# sourceMappingURL=ws.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}