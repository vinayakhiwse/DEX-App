{"ast":null,"code":"// src/utils.ts\nimport clsx from \"clsx\";\nimport { forwardRef as baseForwardRef } from \"react\";\nfunction forwardRef(component) {\n  return baseForwardRef(component);\n}\nvar toIterator = obj => {\n  return {\n    ...obj,\n    [Symbol.iterator]: function () {\n      const keys = Object.keys(this);\n      let index = 0;\n      return {\n        next: () => {\n          if (index >= keys.length) {\n            return {\n              done: true\n            };\n          }\n          const key = keys[index];\n          const value = this[key];\n          index++;\n          return {\n            value: {\n              key,\n              value\n            },\n            done: false\n          };\n        }\n      };\n    }\n  };\n};\nvar mapPropsVariants = (props, variantKeys, removeVariantProps = true) => {\n  if (!variantKeys) {\n    return [props, {}];\n  }\n  const picked = variantKeys.reduce((acc, key) => {\n    if (key in props) {\n      return {\n        ...acc,\n        [key]: props[key]\n      };\n    } else {\n      return acc;\n    }\n  }, {});\n  if (removeVariantProps) {\n    const omitted = Object.keys(props).filter(key => !variantKeys.includes(key)).reduce((acc, key) => ({\n      ...acc,\n      [key]: props[key]\n    }), {});\n    return [omitted, picked];\n  } else {\n    return [props, picked];\n  }\n};\nvar mapPropsVariantsWithCommon = (originalProps, variantKeys, commonKeys) => {\n  const props = Object.keys(originalProps).filter(key => !variantKeys.includes(key) || (commonKeys == null ? void 0 : commonKeys.includes(key))).reduce((acc, key) => ({\n    ...acc,\n    [key]: originalProps[key]\n  }), {});\n  const variants = variantKeys.reduce((acc, key) => ({\n    ...acc,\n    [key]: originalProps[key]\n  }), {});\n  return [props, variants];\n};\nvar cn = clsx;\nexport { forwardRef, toIterator, mapPropsVariants, mapPropsVariantsWithCommon, cn };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}