{"ast":null,"code":"import u, { createContext as ce, createRef as De, useCallback as j, useContext as K, useEffect as w, useMemo as y, useReducer as me, useRef as Pe, useState as ye } from \"react\";\nimport { match as B } from '../../utils/match.js';\nimport { forwardRefWithAs as E, render as A, Features as V } from '../../utils/render.js';\nimport { useSyncRefs as R } from '../../hooks/use-sync-refs.js';\nimport { Keys as Ee } from '../keyboard.js';\nimport { isDisabledReactIssue7711 as Ae } from '../../utils/bugs.js';\nimport { useId as C } from '../../hooks/use-id.js';\nimport { FocusTrap as v } from '../../components/focus-trap/focus-trap.js';\nimport { Portal as H, useNestedPortals as Re } from '../../components/portal/portal.js';\nimport { ForcePortalRoot as G } from '../../internal/portal-force-root.js';\nimport { Description as Ce, useDescriptions as ve } from '../description/description.js';\nimport { useOpenClosed as Oe, State as _ } from '../../internal/open-closed.js';\nimport { useServerHandoffComplete as be } from '../../hooks/use-server-handoff-complete.js';\nimport { StackProvider as he, StackMessage as q } from '../../internal/stack-context.js';\nimport { useOutsideClick as Se } from '../../hooks/use-outside-click.js';\nimport { useOwnerDocument as Le } from '../../hooks/use-owner.js';\nimport { useEventListener as Fe } from '../../hooks/use-event-listener.js';\nimport { useEvent as O } from '../../hooks/use-event.js';\nimport { useDocumentOverflowLockedEffect as ke } from '../../hooks/document-overflow/use-document-overflow.js';\nimport { useInert as z } from '../../hooks/use-inert.js';\nimport { useRootContainers as xe } from '../../hooks/use-root-containers.js';\nvar _e = (o => (o[o.Open = 0] = \"Open\", o[o.Closed = 1] = \"Closed\", o))(_e || {}),\n  Ie = (e => (e[e.SetTitleId = 0] = \"SetTitleId\", e))(Ie || {});\nlet Me = {\n    [0](t, e) {\n      return t.titleId === e.id ? t : {\n        ...t,\n        titleId: e.id\n      };\n    }\n  },\n  I = ce(null);\nI.displayName = \"DialogContext\";\nfunction b(t) {\n  let e = K(I);\n  if (e === null) {\n    let o = new Error(`<${t} /> is missing a parent <Dialog /> component.`);\n    throw Error.captureStackTrace && Error.captureStackTrace(o, b), o;\n  }\n  return e;\n}\nfunction we(t, e, o = () => [document.body]) {\n  ke(t, e, i => {\n    var n;\n    return {\n      containers: [...((n = i.containers) != null ? n : []), o]\n    };\n  });\n}\nfunction Be(t, e) {\n  return B(e.type, Me, t, e);\n}\nlet He = \"div\",\n  Ge = V.RenderStrategy | V.Static;\nfunction Ne(t, e) {\n  var X;\n  let o = C(),\n    {\n      id: i = `headlessui-dialog-${o}`,\n      open: n,\n      onClose: l,\n      initialFocus: s,\n      __demoMode: g = !1,\n      ...T\n    } = t,\n    [m, h] = ye(0),\n    a = Oe();\n  n === void 0 && a !== null && (n = (a & _.Open) === _.Open);\n  let D = Pe(null),\n    Q = R(D, e),\n    f = Le(D),\n    N = t.hasOwnProperty(\"open\") || a !== null,\n    U = t.hasOwnProperty(\"onClose\");\n  if (!N && !U) throw new Error(\"You have to provide an `open` and an `onClose` prop to the `Dialog` component.\");\n  if (!N) throw new Error(\"You provided an `onClose` prop to the `Dialog`, but forgot an `open` prop.\");\n  if (!U) throw new Error(\"You provided an `open` prop to the `Dialog`, but forgot an `onClose` prop.\");\n  if (typeof n != \"boolean\") throw new Error(`You provided an \\`open\\` prop to the \\`Dialog\\`, but the value is not a boolean. Received: ${n}`);\n  if (typeof l != \"function\") throw new Error(`You provided an \\`onClose\\` prop to the \\`Dialog\\`, but the value is not a function. Received: ${l}`);\n  let p = n ? 0 : 1,\n    [S, Z] = me(Be, {\n      titleId: null,\n      descriptionId: null,\n      panelRef: De()\n    }),\n    P = O(() => l(!1)),\n    W = O(r => Z({\n      type: 0,\n      id: r\n    })),\n    L = be() ? g ? !1 : p === 0 : !1,\n    F = m > 1,\n    Y = K(I) !== null,\n    [ee, te] = Re(),\n    {\n      resolveContainers: M,\n      mainTreeNodeRef: k,\n      MainTreeNode: oe\n    } = xe({\n      portals: ee,\n      defaultContainers: [(X = S.panelRef.current) != null ? X : D.current]\n    }),\n    re = F ? \"parent\" : \"leaf\",\n    $ = a !== null ? (a & _.Closing) === _.Closing : !1,\n    ne = (() => Y || $ ? !1 : L)(),\n    le = j(() => {\n      var r, c;\n      return (c = Array.from((r = f == null ? void 0 : f.querySelectorAll(\"body > *\")) != null ? r : []).find(d => d.id === \"headlessui-portal-root\" ? !1 : d.contains(k.current) && d instanceof HTMLElement)) != null ? c : null;\n    }, [k]);\n  z(le, ne);\n  let ae = (() => F ? !0 : L)(),\n    ie = j(() => {\n      var r, c;\n      return (c = Array.from((r = f == null ? void 0 : f.querySelectorAll(\"[data-headlessui-portal]\")) != null ? r : []).find(d => d.contains(k.current) && d instanceof HTMLElement)) != null ? c : null;\n    }, [k]);\n  z(ie, ae);\n  let se = (() => !(!L || F))();\n  Se(M, P, se);\n  let pe = (() => !(F || p !== 0))();\n  Fe(f == null ? void 0 : f.defaultView, \"keydown\", r => {\n    pe && (r.defaultPrevented || r.key === Ee.Escape && (r.preventDefault(), r.stopPropagation(), P()));\n  });\n  let de = (() => !($ || p !== 0 || Y))();\n  we(f, de, M), w(() => {\n    if (p !== 0 || !D.current) return;\n    let r = new ResizeObserver(c => {\n      for (let d of c) {\n        let x = d.target.getBoundingClientRect();\n        x.x === 0 && x.y === 0 && x.width === 0 && x.height === 0 && P();\n      }\n    });\n    return r.observe(D.current), () => r.disconnect();\n  }, [p, D, P]);\n  let [ue, fe] = ve(),\n    ge = y(() => [{\n      dialogState: p,\n      close: P,\n      setTitleId: W\n    }, S], [p, S, P, W]),\n    J = y(() => ({\n      open: p === 0\n    }), [p]),\n    Te = {\n      ref: Q,\n      id: i,\n      role: \"dialog\",\n      \"aria-modal\": p === 0 ? !0 : void 0,\n      \"aria-labelledby\": S.titleId,\n      \"aria-describedby\": ue\n    };\n  return u.createElement(he, {\n    type: \"Dialog\",\n    enabled: p === 0,\n    element: D,\n    onUpdate: O((r, c) => {\n      c === \"Dialog\" && B(r, {\n        [q.Add]: () => h(d => d + 1),\n        [q.Remove]: () => h(d => d - 1)\n      });\n    })\n  }, u.createElement(G, {\n    force: !0\n  }, u.createElement(H, null, u.createElement(I.Provider, {\n    value: ge\n  }, u.createElement(H.Group, {\n    target: D\n  }, u.createElement(G, {\n    force: !1\n  }, u.createElement(fe, {\n    slot: J,\n    name: \"Dialog.Description\"\n  }, u.createElement(v, {\n    initialFocus: s,\n    containers: M,\n    features: L ? B(re, {\n      parent: v.features.RestoreFocus,\n      leaf: v.features.All & ~v.features.FocusLock\n    }) : v.features.None\n  }, u.createElement(te, null, A({\n    ourProps: Te,\n    theirProps: T,\n    slot: J,\n    defaultTag: He,\n    features: Ge,\n    visible: p === 0,\n    name: \"Dialog\"\n  }))))))))), u.createElement(oe, null));\n}\nlet Ue = \"div\";\nfunction We(t, e) {\n  let o = C(),\n    {\n      id: i = `headlessui-dialog-overlay-${o}`,\n      ...n\n    } = t,\n    [{\n      dialogState: l,\n      close: s\n    }] = b(\"Dialog.Overlay\"),\n    g = R(e),\n    T = O(a => {\n      if (a.target === a.currentTarget) {\n        if (Ae(a.currentTarget)) return a.preventDefault();\n        a.preventDefault(), a.stopPropagation(), s();\n      }\n    }),\n    m = y(() => ({\n      open: l === 0\n    }), [l]);\n  return A({\n    ourProps: {\n      ref: g,\n      id: i,\n      \"aria-hidden\": !0,\n      onClick: T\n    },\n    theirProps: n,\n    slot: m,\n    defaultTag: Ue,\n    name: \"Dialog.Overlay\"\n  });\n}\nlet Ye = \"div\";\nfunction $e(t, e) {\n  let o = C(),\n    {\n      id: i = `headlessui-dialog-backdrop-${o}`,\n      ...n\n    } = t,\n    [{\n      dialogState: l\n    }, s] = b(\"Dialog.Backdrop\"),\n    g = R(e);\n  w(() => {\n    if (s.panelRef.current === null) throw new Error(\"A <Dialog.Backdrop /> component is being used, but a <Dialog.Panel /> component is missing.\");\n  }, [s.panelRef]);\n  let T = y(() => ({\n    open: l === 0\n  }), [l]);\n  return u.createElement(G, {\n    force: !0\n  }, u.createElement(H, null, A({\n    ourProps: {\n      ref: g,\n      id: i,\n      \"aria-hidden\": !0\n    },\n    theirProps: n,\n    slot: T,\n    defaultTag: Ye,\n    name: \"Dialog.Backdrop\"\n  })));\n}\nlet Je = \"div\";\nfunction Xe(t, e) {\n  let o = C(),\n    {\n      id: i = `headlessui-dialog-panel-${o}`,\n      ...n\n    } = t,\n    [{\n      dialogState: l\n    }, s] = b(\"Dialog.Panel\"),\n    g = R(e, s.panelRef),\n    T = y(() => ({\n      open: l === 0\n    }), [l]),\n    m = O(a => {\n      a.stopPropagation();\n    });\n  return A({\n    ourProps: {\n      ref: g,\n      id: i,\n      onClick: m\n    },\n    theirProps: n,\n    slot: T,\n    defaultTag: Je,\n    name: \"Dialog.Panel\"\n  });\n}\nlet je = \"h2\";\nfunction Ke(t, e) {\n  let o = C(),\n    {\n      id: i = `headlessui-dialog-title-${o}`,\n      ...n\n    } = t,\n    [{\n      dialogState: l,\n      setTitleId: s\n    }] = b(\"Dialog.Title\"),\n    g = R(e);\n  w(() => (s(i), () => s(null)), [i, s]);\n  let T = y(() => ({\n    open: l === 0\n  }), [l]);\n  return A({\n    ourProps: {\n      ref: g,\n      id: i\n    },\n    theirProps: n,\n    slot: T,\n    defaultTag: je,\n    name: \"Dialog.Title\"\n  });\n}\nlet Ve = E(Ne),\n  qe = E($e),\n  ze = E(Xe),\n  Qe = E(We),\n  Ze = E(Ke),\n  _t = Object.assign(Ve, {\n    Backdrop: qe,\n    Panel: ze,\n    Overlay: Qe,\n    Title: Ze,\n    Description: Ce\n  });\nexport { _t as Dialog };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}