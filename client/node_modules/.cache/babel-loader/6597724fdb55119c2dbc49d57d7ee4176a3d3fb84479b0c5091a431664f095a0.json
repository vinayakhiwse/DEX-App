{"ast":null,"code":"import i, { useMemo as e } from \"react\";\nimport { mergeProps as s } from \"@react-aria/utils\";\nimport { useFocusRing as r } from \"@react-aria/focus\";\nimport { VisuallyHidden as a } from \"@react-aria/visually-hidden\";\nimport o from \"../utils/clsx\";\nimport { __DEV__ as t } from \"../utils/assertion\";\nimport { useFocusableRef as d } from \"../utils/dom\";\nimport { useRadio as l } from \"./use-radio\";\nimport { StyledRadioText as c, StyledRadioPoint as n, StyledRadioLabel as m, StyledRadioDescription as u, StyledRadioContainer as p } from \"./radio.styles\";\nimport { jsx as f } from \"react/jsx-runtime\";\nimport { jsxs as h } from \"react/jsx-runtime\";\nexport const Radio = i.forwardRef((i, t) => {\n  const {\n      className: x,\n      as: b,\n      css: v,\n      children: N,\n      label: R,\n      description: k,\n      ...I\n    } = i,\n    {\n      size: j,\n      color: D,\n      inputRef: F,\n      labelColor: y,\n      isHovered: P,\n      isSquared: S,\n      isInvalid: q,\n      isDisabled: z,\n      autoFocus: A,\n      disableAnimation: C,\n      hoverProps: H,\n      inputProps: V\n    } = l({\n      ...I,\n      children: null != N ? N : R\n    }),\n    g = d(t, F),\n    {\n      focusProps: w,\n      isFocusVisible: U\n    } = r({\n      autoFocus: A\n    }),\n    $ = e(() => P ? \"is-hovered\" : z ? \"is-disabled\" : V.checked ? \"checked\" : \"uncheked\", [z, V.checked, P]);\n  return h(m, {\n    ref: g,\n    ...H,\n    className: o(\"nextui-radio-label\", `nextui-radio--${$}`, x),\n    as: b,\n    css: v,\n    size: j,\n    color: D,\n    \"data-state\": $,\n    isSquared: S,\n    isHovered: P,\n    isInvalid: q,\n    isChecked: V.checked,\n    isDisabled: z,\n    disableAnimation: C,\n    children: [h(p, {\n      className: \"nextui-radio-container\",\n      children: [f(n, {\n        className: \"nextui-radio-point\",\n        isFocusVisible: U,\n        ...w,\n        children: f(a, {\n          children: f(\"input\", {\n            ref: F,\n            className: \"nextui-radio-input\",\n            ...s(V, w)\n          })\n        })\n      }), f(c, {\n        color: y,\n        isInvalid: q,\n        isDisabled: z,\n        className: \"nextui-radio-label\",\n        children: N\n      })]\n    }), k && f(u, {\n      className: \"nextui-radio-description\",\n      isInvalid: q,\n      isDisabled: z,\n      children: k\n    })]\n  });\n});\nt && (Radio.displayName = \"NextUI.Radio\"), Radio.toString = () => \".nextui-radio\";\nexport default Radio;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}