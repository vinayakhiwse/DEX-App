{"ast":null,"code":"\"use client\";\n\n// src/use-navbar.ts\nimport { mapPropsVariants } from \"@nextui-org/system\";\nimport { navbar } from \"@nextui-org/theme\";\nimport { useDOMRef } from \"@nextui-org/react-utils\";\nimport { clsx, dataAttr } from \"@nextui-org/shared-utils\";\nimport { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport { mergeProps, useResizeObserver } from \"@react-aria/utils\";\nimport { useScrollPosition } from \"@nextui-org/use-scroll-position\";\nimport { useControlledState } from \"@react-stately/utils\";\nfunction useNavbar(originalProps) {\n  var _a;\n  const [props, variantProps] = mapPropsVariants(originalProps, navbar.variantKeys);\n  const {\n    ref,\n    as,\n    parentRef,\n    height = \"4rem\",\n    shouldHideOnScroll = false,\n    disableScrollHandler = false,\n    onScrollPositionChange,\n    isMenuOpen: isMenuOpenProp,\n    isMenuDefaultOpen,\n    onMenuOpenChange = () => {},\n    motionProps,\n    className,\n    classNames,\n    ...otherProps\n  } = props;\n  const Component = as || \"nav\";\n  const domRef = useDOMRef(ref);\n  const prevWidth = useRef(0);\n  const navHeight = useRef(0);\n  const [isHidden, setIsHidden] = useState(false);\n  const handleMenuOpenChange = useCallback(isOpen => {\n    onMenuOpenChange(isOpen || false);\n  }, [onMenuOpenChange]);\n  const [isMenuOpen, setIsMenuOpen] = useControlledState(isMenuOpenProp, isMenuDefaultOpen, handleMenuOpenChange);\n  const updateWidth = () => {\n    if (domRef.current) {\n      const width = domRef.current.offsetWidth;\n      if (width !== prevWidth.current) {\n        prevWidth.current = width;\n      }\n    }\n  };\n  useResizeObserver({\n    ref: domRef,\n    onResize: () => {\n      var _a2;\n      const currentWidth = (_a2 = domRef.current) == null ? void 0 : _a2.offsetWidth;\n      if (currentWidth !== prevWidth.current) {\n        updateWidth();\n        setIsMenuOpen(false);\n      }\n    }\n  });\n  useEffect(() => {\n    var _a2;\n    updateWidth();\n    navHeight.current = ((_a2 = domRef.current) == null ? void 0 : _a2.offsetHeight) || 0;\n  }, []);\n  const slots = useMemo(() => navbar({\n    ...variantProps,\n    hideOnScroll: shouldHideOnScroll\n  }), [...Object.values(variantProps), shouldHideOnScroll]);\n  const baseStyles = clsx(classNames == null ? void 0 : classNames.base, className);\n  useScrollPosition({\n    elementRef: parentRef,\n    isEnabled: shouldHideOnScroll || !disableScrollHandler,\n    callback: ({\n      prevPos,\n      currPos\n    }) => {\n      onScrollPositionChange == null ? void 0 : onScrollPositionChange(currPos.y);\n      if (shouldHideOnScroll) {\n        setIsHidden(prev => {\n          const next = currPos.y > prevPos.y && currPos.y > navHeight.current;\n          return next !== prev ? next : prev;\n        });\n      }\n    }\n  });\n  const getBaseProps = (props2 = {}) => ({\n    ...mergeProps(otherProps, props2),\n    \"data-hidden\": dataAttr(isHidden),\n    \"data-menu-open\": dataAttr(isMenuOpen),\n    ref: domRef,\n    className: slots.base({\n      class: clsx(baseStyles, props2 == null ? void 0 : props2.className)\n    }),\n    style: {\n      \"--navbar-height\": height,\n      ...(props2 == null ? void 0 : props2.style)\n    }\n  });\n  const getWrapperProps = (props2 = {}) => ({\n    ...props2,\n    \"data-menu-open\": dataAttr(isMenuOpen),\n    className: slots.wrapper({\n      class: clsx(classNames == null ? void 0 : classNames.wrapper, props2 == null ? void 0 : props2.className)\n    })\n  });\n  return {\n    Component,\n    slots,\n    domRef,\n    height,\n    isHidden,\n    disableAnimation: (_a = originalProps.disableAnimation) != null ? _a : false,\n    shouldHideOnScroll,\n    isMenuOpen,\n    classNames,\n    setIsMenuOpen,\n    motionProps,\n    getBaseProps,\n    getWrapperProps\n  };\n}\nexport { useNavbar };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}