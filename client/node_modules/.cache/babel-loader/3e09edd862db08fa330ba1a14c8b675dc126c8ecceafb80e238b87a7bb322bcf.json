{"ast":null,"code":"import { BaseError } from './base.js';\nexport class ChainDoesNotSupportContract extends BaseError {\n  constructor({\n    blockNumber,\n    chain,\n    contract\n  }) {\n    super(`Chain \"${chain.name}\" does not support contract \"${contract.name}\".`, {\n      metaMessages: ['This could be due to any of the following:', ...(blockNumber && contract.blockCreated && contract.blockCreated > blockNumber ? [`- The contract \"${contract.name}\" was not deployed until block ${contract.blockCreated} (current block ${blockNumber}).`] : [`- The chain does not have the contract \"${contract.name}\" configured.`])]\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'ChainDoesNotSupportContract'\n    });\n  }\n}\nexport class ChainMismatchError extends BaseError {\n  constructor({\n    chain,\n    currentChainId\n  }) {\n    super(`The current chain of the wallet (id: ${currentChainId}) does not match the target chain for the transaction (id: ${chain.id} – ${chain.name}).`, {\n      metaMessages: [`Current Chain ID:  ${currentChainId}`, `Expected Chain ID: ${chain.id} – ${chain.name}`]\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'ChainMismatchError'\n    });\n  }\n}\nexport class ChainNotFoundError extends BaseError {\n  constructor() {\n    super(['No chain was provided to the request.', 'Please provide a chain with the `chain` argument on the Action, or by supplying a `chain` to WalletClient.'].join('\\n'));\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'ChainNotFoundError'\n    });\n  }\n}\nexport class ClientChainNotConfiguredError extends BaseError {\n  constructor() {\n    super('No chain was provided to the Client.');\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'ClientChainNotConfiguredError'\n    });\n  }\n}\nexport class InvalidChainIdError extends BaseError {\n  constructor({\n    chainId\n  }) {\n    super(`Chain ID \"${chainId}\" is invalid.`);\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'InvalidChainIdError'\n    });\n  }\n}\n//# sourceMappingURL=chain.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}