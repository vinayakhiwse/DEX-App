{"ast":null,"code":"import { InvalidAddressError } from '../../errors/address.js';\nimport { BaseError } from '../../errors/base.js';\nimport { InvalidChainIdError } from '../../errors/chain.js';\nimport { FeeCapTooHighError, TipAboveFeeCapError } from '../../errors/node.js';\nimport { isAddress } from '../../utils/address/isAddress.js';\nimport { concatHex } from '../../utils/data/concat.js';\nimport { trim } from '../../utils/data/trim.js';\nimport { toHex } from '../../utils/encoding/toHex.js';\nimport { toRlp } from '../../utils/encoding/toRlp.js';\nimport { serializeAccessList } from '../../utils/transaction/serializeAccessList.js';\nimport { serializeTransaction } from '../../utils/transaction/serializeTransaction.js';\nexport const serializeTransactionCelo = (tx, signature) => {\n  // Handle CIP-42 transactions\n  if (isCIP42(tx)) return serializeTransactionCIP42(tx, signature);\n  // Handle other transaction types\n  return serializeTransaction(tx, signature);\n};\nexport const serializersCelo = {\n  transaction: serializeTransactionCelo\n};\n// There shall be a typed transaction with the code 0x7c that has the following format:\n// 0x7c || rlp([chain_id, nonce, max_priority_fee_per_gas, max_fee_per_gas, gas_limit, feecurrency, gatewayFeeRecipient, gatewayfee, destination, amount, data, access_list, signature_y_parity, signature_r, signature_s]).\n// This will be in addition to the type 0x02 transaction as specified in EIP-1559.\nfunction serializeTransactionCIP42(transaction, signature) {\n  assertTransactionCIP42(transaction);\n  const {\n    chainId,\n    gas,\n    nonce,\n    to,\n    value,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    accessList,\n    feeCurrency,\n    gatewayFeeRecipient,\n    gatewayFee,\n    data\n  } = transaction;\n  const serializedTransaction = [toHex(chainId), nonce ? toHex(nonce) : '0x', maxPriorityFeePerGas ? toHex(maxPriorityFeePerGas) : '0x', maxFeePerGas ? toHex(maxFeePerGas) : '0x', gas ? toHex(gas) : '0x', feeCurrency ?? '0x', gatewayFeeRecipient ?? '0x', gatewayFee ? toHex(gatewayFee) : '0x', to ?? '0x', value ? toHex(value) : '0x', data ?? '0x', serializeAccessList(accessList)];\n  if (signature) {\n    serializedTransaction.push(signature.v === 27n ? '0x' : toHex(1),\n    // yParity\n    trim(signature.r), trim(signature.s));\n  }\n  return concatHex(['0x7c', toRlp(serializedTransaction)]);\n}\n//////////////////////////////////////////////////////////////////////////////\n// Utilities\n// process as CIP42 if any of these fields are present. realistically gatewayfee is not used but is part of spec\nfunction isCIP42(transaction) {\n  if ('maxFeePerGas' in transaction && 'maxPriorityFeePerGas' in transaction && ('feeCurrency' in transaction || 'gatewayFee' in transaction || 'gatewayFeeRecipient' in transaction)) return true;\n  return false;\n}\n// maxFeePerGas must be less than 2^256 - 1: however writing like that caused exceptions to be raised\nconst MAX_MAX_FEE_PER_GAS = 115792089237316195423570985008687907853269984665640564039457584007913129639935n;\nexport function assertTransactionCIP42(transaction) {\n  const {\n    chainId,\n    maxPriorityFeePerGas,\n    gasPrice,\n    maxFeePerGas,\n    to,\n    feeCurrency,\n    gatewayFee,\n    gatewayFeeRecipient\n  } = transaction;\n  if (chainId <= 0) throw new InvalidChainIdError({\n    chainId\n  });\n  if (to && !isAddress(to)) throw new InvalidAddressError({\n    address: to\n  });\n  if (gasPrice) throw new BaseError('`gasPrice` is not a valid CIP-42 Transaction attribute.');\n  if (maxFeePerGas && maxFeePerGas > MAX_MAX_FEE_PER_GAS) throw new FeeCapTooHighError({\n    maxFeePerGas\n  });\n  if (maxPriorityFeePerGas && maxFeePerGas && maxPriorityFeePerGas > maxFeePerGas) throw new TipAboveFeeCapError({\n    maxFeePerGas,\n    maxPriorityFeePerGas\n  });\n  if (gatewayFee && !gatewayFeeRecipient || gatewayFeeRecipient && !gatewayFee) {\n    throw new BaseError('`gatewayFee` and `gatewayFeeRecipient` must be provided together.');\n  }\n  if (feeCurrency && !feeCurrency?.startsWith('0x')) {\n    throw new BaseError('`feeCurrency` MUST be a token address for CIP-42 transactions.');\n  }\n  if (!feeCurrency && !gatewayFeeRecipient) {\n    throw new BaseError('Either `feeCurrency` or `gatewayFeeRecipient` must be provided for CIP-42 transactions.');\n  }\n}\n//# sourceMappingURL=serializers.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}