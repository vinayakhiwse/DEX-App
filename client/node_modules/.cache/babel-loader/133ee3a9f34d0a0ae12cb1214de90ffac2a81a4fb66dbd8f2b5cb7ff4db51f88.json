{"ast":null,"code":"import { ChainNotConfiguredForConnectorError, ConnectorNotFoundError } from \"./chunk-UGBGYVBH.js\";\nimport { normalizeChainId } from \"./chunk-OQILYQDO.js\";\nimport { Connector, __privateAdd, __privateGet, __privateSet } from \"./chunk-W65LBPLT.js\";\n\n// src/injected.ts\nimport { ResourceUnavailableRpcError, SwitchChainError, UserRejectedRequestError, createWalletClient, custom, getAddress, numberToHex } from \"viem\";\n\n// src/utils/getInjectedName.ts\nfunction getInjectedName(ethereum) {\n  if (!ethereum) return \"Injected\";\n  const getName = provider => {\n    if (provider.isApexWallet) return \"Apex Wallet\";\n    if (provider.isAvalanche) return \"Core Wallet\";\n    if (provider.isBackpack) return \"Backpack\";\n    if (provider.isBifrost) return \"Bifrost Wallet\";\n    if (provider.isBitKeep) return \"BitKeep\";\n    if (provider.isBitski) return \"Bitski\";\n    if (provider.isBlockWallet) return \"BlockWallet\";\n    if (provider.isBraveWallet) return \"Brave Wallet\";\n    if (provider.isCoin98) return \"Coin98 Wallet\";\n    if (provider.isCoinbaseWallet) return \"Coinbase Wallet\";\n    if (provider.isDawn) return \"Dawn Wallet\";\n    if (provider.isDefiant) return \"Defiant\";\n    if (provider.isDesig) return \"Desig Wallet\";\n    if (provider.isEnkrypt) return \"Enkrypt\";\n    if (provider.isExodus) return \"Exodus\";\n    if (provider.isFordefi) return \"Fordefi\";\n    if (provider.isFrame) return \"Frame\";\n    if (provider.isFrontier) return \"Frontier Wallet\";\n    if (provider.isGamestop) return \"GameStop Wallet\";\n    if (provider.isHaqqWallet) return \"HAQQ Wallet\";\n    if (provider.isHyperPay) return \"HyperPay Wallet\";\n    if (provider.isImToken) return \"ImToken\";\n    if (provider.isHaloWallet) return \"Halo Wallet\";\n    if (provider.isKuCoinWallet) return \"KuCoin Wallet\";\n    if (provider.isMathWallet) return \"MathWallet\";\n    if (provider.isNovaWallet) return \"Nova Wallet\";\n    if (provider.isOkxWallet || provider.isOKExWallet) return \"OKX Wallet\";\n    if (provider.isOneInchIOSWallet || provider.isOneInchAndroidWallet) return \"1inch Wallet\";\n    if (provider.isOpera) return \"Opera\";\n    if (provider.isPhantom) return \"Phantom\";\n    if (provider.isPortal) return \"Ripio Portal\";\n    if (provider.isRabby) return \"Rabby Wallet\";\n    if (provider.isRainbow) return \"Rainbow\";\n    if (provider.isStatus) return \"Status\";\n    if (provider.isSubWallet) return \"SubWallet\";\n    if (provider.isTalisman) return \"Talisman\";\n    if (provider.isTally) return \"Taho\";\n    if (provider.isTokenPocket) return \"TokenPocket\";\n    if (provider.isTokenary) return \"Tokenary\";\n    if (provider.isTrust || provider.isTrustWallet) return \"Trust Wallet\";\n    if (provider.isTTWallet) return \"TTWallet\";\n    if (provider.isXDEFI) return \"XDEFI Wallet\";\n    if (provider.isZeal) return \"Zeal\";\n    if (provider.isZerion) return \"Zerion\";\n    if (provider.isMetaMask) return \"MetaMask\";\n  };\n  if (ethereum.providers?.length) {\n    const nameSet = /* @__PURE__ */new Set();\n    let unknownCount = 1;\n    for (const provider of ethereum.providers) {\n      let name = getName(provider);\n      if (!name) {\n        name = `Unknown Wallet #${unknownCount}`;\n        unknownCount += 1;\n      }\n      nameSet.add(name);\n    }\n    const names = [...nameSet];\n    if (names.length) return names;\n    return names[0] ?? \"Injected\";\n  }\n  return getName(ethereum) ?? \"Injected\";\n}\n\n// src/injected.ts\nvar _provider;\nvar InjectedConnector = class extends Connector {\n  constructor({\n    chains,\n    options: options_\n  } = {}) {\n    const options = {\n      shimDisconnect: true,\n      getProvider() {\n        if (typeof window === \"undefined\") return;\n        const ethereum = window.ethereum;\n        if (ethereum?.providers) return ethereum.providers[0];\n        return ethereum;\n      },\n      ...options_\n    };\n    super({\n      chains,\n      options\n    });\n    this.id = \"injected\";\n    __privateAdd(this, _provider, void 0);\n    this.shimDisconnectKey = `${this.id}.shimDisconnect`;\n    this.onAccountsChanged = accounts => {\n      if (accounts.length === 0) this.emit(\"disconnect\");else this.emit(\"change\", {\n        account: getAddress(accounts[0])\n      });\n    };\n    this.onChainChanged = chainId => {\n      const id = normalizeChainId(chainId);\n      const unsupported = this.isChainUnsupported(id);\n      this.emit(\"change\", {\n        chain: {\n          id,\n          unsupported\n        }\n      });\n    };\n    this.onDisconnect = async error => {\n      if (error.code === 1013) {\n        const provider = await this.getProvider();\n        if (provider) {\n          const isAuthorized = await this.getAccount();\n          if (isAuthorized) return;\n        }\n      }\n      this.emit(\"disconnect\");\n      if (this.options.shimDisconnect) this.storage?.removeItem(this.shimDisconnectKey);\n    };\n    const provider = options.getProvider();\n    if (typeof options.name === \"string\") this.name = options.name;else if (provider) {\n      const detectedName = getInjectedName(provider);\n      if (options.name) this.name = options.name(detectedName);else {\n        if (typeof detectedName === \"string\") this.name = detectedName;else this.name = detectedName[0];\n      }\n    } else this.name = \"Injected\";\n    this.ready = !!provider;\n  }\n  async connect({\n    chainId\n  } = {}) {\n    try {\n      const provider = await this.getProvider();\n      if (!provider) throw new ConnectorNotFoundError();\n      if (provider.on) {\n        provider.on(\"accountsChanged\", this.onAccountsChanged);\n        provider.on(\"chainChanged\", this.onChainChanged);\n        provider.on(\"disconnect\", this.onDisconnect);\n      }\n      this.emit(\"message\", {\n        type: \"connecting\"\n      });\n      const accounts = await provider.request({\n        method: \"eth_requestAccounts\"\n      });\n      const account = getAddress(accounts[0]);\n      let id = await this.getChainId();\n      let unsupported = this.isChainUnsupported(id);\n      if (chainId && id !== chainId) {\n        const chain = await this.switchChain(chainId);\n        id = chain.id;\n        unsupported = this.isChainUnsupported(id);\n      }\n      if (this.options.shimDisconnect) this.storage?.setItem(this.shimDisconnectKey, true);\n      return {\n        account,\n        chain: {\n          id,\n          unsupported\n        }\n      };\n    } catch (error) {\n      if (this.isUserRejectedRequestError(error)) throw new UserRejectedRequestError(error);\n      if (error.code === -32002) throw new ResourceUnavailableRpcError(error);\n      throw error;\n    }\n  }\n  async disconnect() {\n    const provider = await this.getProvider();\n    if (!provider?.removeListener) return;\n    provider.removeListener(\"accountsChanged\", this.onAccountsChanged);\n    provider.removeListener(\"chainChanged\", this.onChainChanged);\n    provider.removeListener(\"disconnect\", this.onDisconnect);\n    if (this.options.shimDisconnect) this.storage?.removeItem(this.shimDisconnectKey);\n  }\n  async getAccount() {\n    const provider = await this.getProvider();\n    if (!provider) throw new ConnectorNotFoundError();\n    const accounts = await provider.request({\n      method: \"eth_accounts\"\n    });\n    return getAddress(accounts[0]);\n  }\n  async getChainId() {\n    const provider = await this.getProvider();\n    if (!provider) throw new ConnectorNotFoundError();\n    return provider.request({\n      method: \"eth_chainId\"\n    }).then(normalizeChainId);\n  }\n  async getProvider() {\n    const provider = this.options.getProvider();\n    if (provider) __privateSet(this, _provider, provider);\n    return __privateGet(this, _provider);\n  }\n  async getWalletClient({\n    chainId\n  } = {}) {\n    const [provider, account] = await Promise.all([this.getProvider(), this.getAccount()]);\n    const chain = this.chains.find(x => x.id === chainId);\n    if (!provider) throw new Error(\"provider is required.\");\n    return createWalletClient({\n      account,\n      chain,\n      transport: custom(provider)\n    });\n  }\n  async isAuthorized() {\n    try {\n      if (this.options.shimDisconnect && !this.storage?.getItem(this.shimDisconnectKey)) return false;\n      const provider = await this.getProvider();\n      if (!provider) throw new ConnectorNotFoundError();\n      const account = await this.getAccount();\n      return !!account;\n    } catch {\n      return false;\n    }\n  }\n  async switchChain(chainId) {\n    const provider = await this.getProvider();\n    if (!provider) throw new ConnectorNotFoundError();\n    const id = numberToHex(chainId);\n    try {\n      await Promise.all([provider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId: id\n        }]\n      }), new Promise(res => this.on(\"change\", ({\n        chain\n      }) => {\n        if (chain?.id === chainId) res();\n      }))]);\n      return this.chains.find(x => x.id === chainId) ?? {\n        id: chainId,\n        name: `Chain ${id}`,\n        network: `${id}`,\n        nativeCurrency: {\n          name: \"Ether\",\n          decimals: 18,\n          symbol: \"ETH\"\n        },\n        rpcUrls: {\n          default: {\n            http: [\"\"]\n          },\n          public: {\n            http: [\"\"]\n          }\n        }\n      };\n    } catch (error) {\n      const chain = this.chains.find(x => x.id === chainId);\n      if (!chain) throw new ChainNotConfiguredForConnectorError({\n        chainId,\n        connectorId: this.id\n      });\n      if (error.code === 4902 || error?.data?.originalError?.code === 4902) {\n        try {\n          await provider.request({\n            method: \"wallet_addEthereumChain\",\n            params: [{\n              chainId: id,\n              chainName: chain.name,\n              nativeCurrency: chain.nativeCurrency,\n              rpcUrls: [chain.rpcUrls.public?.http[0] ?? \"\"],\n              blockExplorerUrls: this.getBlockExplorerUrls(chain)\n            }]\n          });\n          const currentChainId = await this.getChainId();\n          if (currentChainId !== chainId) throw new UserRejectedRequestError(new Error(\"User rejected switch after adding network.\"));\n          return chain;\n        } catch (error2) {\n          throw new UserRejectedRequestError(error2);\n        }\n      }\n      if (this.isUserRejectedRequestError(error)) throw new UserRejectedRequestError(error);\n      throw new SwitchChainError(error);\n    }\n  }\n  async watchAsset({\n    address,\n    decimals = 18,\n    image,\n    symbol\n  }) {\n    const provider = await this.getProvider();\n    if (!provider) throw new ConnectorNotFoundError();\n    return provider.request({\n      method: \"wallet_watchAsset\",\n      params: {\n        type: \"ERC20\",\n        options: {\n          address,\n          decimals,\n          image,\n          symbol\n        }\n      }\n    });\n  }\n  isUserRejectedRequestError(error) {\n    return error.code === 4001;\n  }\n};\n_provider = new WeakMap();\nexport { InjectedConnector };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}