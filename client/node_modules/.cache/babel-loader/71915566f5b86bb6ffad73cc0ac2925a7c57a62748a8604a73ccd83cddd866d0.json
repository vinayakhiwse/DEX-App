{"ast":null,"code":"import t, { useMemo as o, useState as e, useRef as r } from \"react\";\nimport i from \"../tooltip\";\nimport n from \"../utils/with-defaults\";\nimport p from \"./snippet-icon\";\nimport s from \"../use-clipboard\";\nimport { StyledSnippet as l, StyledSnippetPre as c, StyledSnippetCopyButton as m } from \"./snippet.styles\";\nimport { __DEV__ as u } from \"../utils/assertion\";\nimport { jsx as a } from \"react/jsx-runtime\";\nimport { jsxs as d } from \"react/jsx-runtime\";\nconst x = ({\n  bordered: t,\n  children: n,\n  symbol: u,\n  showTooltip: x,\n  text: f,\n  tooltipCopyText: y,\n  tooltipCopiedText: h,\n  tooltipColor: C,\n  copy: b,\n  ...T\n}) => {\n  const [N, $] = e(!1),\n    {\n      copy: j\n    } = s(),\n    w = r(null),\n    A = f && Array.isArray(f),\n    g = o(() => \"prevent\" !== b, [b]),\n    k = o(() => A ? (t => t.reduce((t, o) => o ? t ? `${t}\\n${o}` : o : t, \"\"))(f) : n ? w.current ? w.current.textContent : \"\" : f, [w.current, n, f]),\n    v = o(() => {\n      const t = u.trim();\n      return t ? `${t} ` : \"\";\n    }, [u]),\n    S = () => {\n      k && g && (j(k), \"slient\" !== b && $(!0));\n    };\n  return d(l, {\n    ...T,\n    children: [A ? f.map((t, o) => a(c, {\n      css: {\n        \"&:before\": {\n          content: v,\n          us: \"none\"\n        }\n      },\n      className: \"nextui-snippet-pre\",\n      children: t\n    }, `${o}-${t}`)) : a(c, {\n      css: {\n        \"&:before\": {\n          content: v,\n          us: \"none\"\n        }\n      },\n      className: \"nextui-snippet-pre\",\n      ref: w,\n      children: n || f\n    }), g && \"slient\" !== b ? a(i, {\n      hideArrow: !0,\n      rounded: !0,\n      color: C,\n      content: N ? h : y,\n      onVisibleChange: () => {\n        setTimeout(() => {\n          N && $(!1);\n        }, 400);\n      },\n      children: a(m, {\n        className: \"nextui-snippet-copy-button\",\n        onClick: S,\n        children: a(p, {})\n      })\n    }) : \"prevent\" !== b && a(m, {\n      className: \"nextui-snippet-copy-button\",\n      onClick: S,\n      children: a(p, {})\n    })]\n  });\n};\nu && (x.displayName = \"NextUI.Snippet\"), x.toString = () => \".nextui-snippet\";\nconst f = t.memo(x);\nexport default n(f, {\n  symbol: \"$\",\n  showTooltip: !0,\n  copy: \"default\",\n  tooltipColor: \"default\",\n  tooltipCopyText: \"Copy\",\n  tooltipCopiedText: \"Copied\"\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}