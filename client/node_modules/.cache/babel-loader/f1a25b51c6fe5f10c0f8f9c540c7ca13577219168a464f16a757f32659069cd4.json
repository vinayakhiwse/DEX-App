{"ast":null,"code":"import { cn, mapPropsVariants } from \"./chunk-SF6SJHAM.mjs\";\n\n// src/extend-variants.js\nimport * as React from \"react\";\n\n// ../theme/src/utils/tv.ts\nimport { tv as tvBase } from \"tailwind-variants\";\n\n// ../theme/src/types.ts\nvar spacingScaleKeys = [\"0\", \"xs\", \"sm\", \"md\", \"lg\", \"xl\", \"2xl\", \"3xl\", \"4xl\", \"5xl\", \"6xl\", \"7xl\", \"8xl\", \"9xl\", \"1\", \"2\", \"3\", \"3.5\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"20\", \"24\", \"28\", \"32\", \"36\", \"40\", \"44\", \"48\", \"52\", \"56\", \"60\", \"64\", \"72\", \"80\", \"96\"];\nvar mappedSpacingScaleKeys = spacingScaleKeys.map(key => `unit-${key}`);\n\n// ../theme/src/utils/tv.ts\nvar COMMON_UNITS = [\"small\", \"medium\", \"large\"];\nvar tv = (options, config) => {\n  var _a, _b, _c;\n  return tvBase(options, {\n    ...config,\n    twMerge: (_a = config == null ? void 0 : config.twMerge) != null ? _a : true,\n    twMergeConfig: {\n      ...(config == null ? void 0 : config.twMergeConfig),\n      theme: {\n        ...((_b = config == null ? void 0 : config.twMergeConfig) == null ? void 0 : _b.theme),\n        opacity: [\"disabled\"],\n        spacing: [\"divider\", \"unit\", ...mappedSpacingScaleKeys],\n        borderWidth: COMMON_UNITS,\n        borderRadius: COMMON_UNITS\n      },\n      classGroups: {\n        ...((_c = config == null ? void 0 : config.twMergeConfig) == null ? void 0 : _c.classGroups),\n        shadow: [{\n          shadow: COMMON_UNITS\n        }],\n        \"font-size\": [{\n          text: [\"tiny\", ...COMMON_UNITS]\n        }],\n        \"bg-image\": [\"bg-stripe-gradient\"],\n        \"min-w\": [{\n          \"min-w\": [\"unit\", ...mappedSpacingScaleKeys]\n        }],\n        \"min-h\": [{\n          \"min-h\": [\"unit\", ...mappedSpacingScaleKeys]\n        }]\n      }\n    }\n  });\n};\n\n// src/extend-variants.js\nfunction getSlots(variants) {\n  return variants ? Object.values(variants).flatMap(Object.values).reduce((acc, slot) => {\n    if (typeof slot === \"object\" && slot !== null && !(slot instanceof String)) {\n      Object.keys(slot).forEach(key => {\n        if (!acc.hasOwnProperty(key)) {\n          acc[key] = \"\";\n        }\n      });\n    }\n    return acc;\n  }, {}) : {};\n}\nfunction extendVariants(BaseComponent, styles = {}, opts = {}) {\n  var _a, _b;\n  const {\n    variants,\n    defaultVariants,\n    compoundVariants\n  } = styles || {};\n  const slots = getSlots(variants);\n  const hasSlots = typeof slots === \"object\" && Object.keys(slots).length !== 0;\n  const customTv = tv({\n    variants,\n    defaultVariants,\n    compoundVariants,\n    ...(hasSlots && {\n      slots\n    })\n  }, {\n    twMerge: (_a = opts.twMerge) != null ? _a : true,\n    twMergeConfig: (_b = opts.twMergeConfig) != null ? _b : {}\n  });\n  const ForwardedComponent = React.forwardRef((originalProps, ref) => {\n    var _a2;\n    const [baseProps, variantProps] = mapPropsVariants(originalProps, customTv.variantKeys, false);\n    const newProps = {\n      ...defaultVariants,\n      ...baseProps,\n      ref\n    };\n    let classNames = {};\n    const result = React.useMemo(() => customTv(variantProps), [...Object.values(variantProps)]);\n    if (!hasSlots) {\n      newProps.className = cn(result, originalProps.className);\n    } else {\n      Object.entries(result).forEach(([key, value]) => {\n        const slotResult = value();\n        if (typeof slotResult === \"string\") {\n          classNames[key] = slotResult;\n        }\n      });\n      Object.entries((_a2 = originalProps.classNames) != null ? _a2 : {}).forEach(([key, value]) => {\n        classNames[key] = cn(classNames[key], value);\n      });\n    }\n    if (Object.keys(classNames).length !== 0) {\n      newProps.classNames = classNames;\n    }\n    return React.createElement(BaseComponent, newProps);\n  });\n  ForwardedComponent.displayName = `Extended(${BaseComponent.displayName || BaseComponent.name})`;\n  return ForwardedComponent;\n}\nexport { extendVariants };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}