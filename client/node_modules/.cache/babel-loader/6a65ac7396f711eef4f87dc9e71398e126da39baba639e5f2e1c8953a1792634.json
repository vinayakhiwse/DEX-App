{"ast":null,"code":"\"use client\";\n\n// src/use-dropdown.ts\nimport { useMenuTriggerState } from \"@react-stately/menu\";\nimport { useMenuTrigger } from \"@react-aria/menu\";\nimport { dropdown } from \"@nextui-org/theme\";\nimport { clsx } from \"@nextui-org/shared-utils\";\nimport { mergeRefs } from \"@nextui-org/react-utils\";\nimport { useMemo, useRef } from \"react\";\nimport { mergeProps } from \"@react-aria/utils\";\nfunction useDropdown(props) {\n  const {\n    as,\n    triggerRef: triggerRefProp,\n    isOpen,\n    defaultOpen,\n    onOpenChange,\n    type = \"menu\",\n    trigger = \"press\",\n    placement = \"bottom\",\n    isDisabled = false,\n    closeOnSelect = true,\n    shouldBlockScroll = true,\n    classNames: classNamesProp,\n    disableAnimation = false,\n    onClose,\n    className,\n    ...otherProps\n  } = props;\n  const Component = as || \"div\";\n  const triggerRef = useRef(null);\n  const menuTriggerRef = triggerRefProp || triggerRef;\n  const menuRef = useRef(null);\n  const popoverRef = useRef(null);\n  const state = useMenuTriggerState({\n    trigger,\n    isOpen,\n    defaultOpen,\n    onOpenChange: isOpen2 => {\n      onOpenChange == null ? void 0 : onOpenChange(isOpen2);\n      if (!isOpen2) {\n        onClose == null ? void 0 : onClose();\n      }\n    }\n  });\n  const {\n    menuTriggerProps,\n    menuProps\n  } = useMenuTrigger({\n    type,\n    trigger,\n    isDisabled\n  }, state, menuTriggerRef);\n  const classNames = useMemo(() => dropdown({\n    className\n  }), [className]);\n  const onMenuAction = menuCloseOnSelect => {\n    if (menuCloseOnSelect !== void 0 && !menuCloseOnSelect) {\n      return;\n    }\n    if (closeOnSelect) {\n      state.close();\n    }\n  };\n  const getPopoverProps = (props2 = {}) => ({\n    state,\n    placement,\n    ref: popoverRef,\n    disableAnimation,\n    shouldBlockScroll,\n    scrollRef: menuRef,\n    triggerRef: menuTriggerRef,\n    ...mergeProps(otherProps, props2),\n    classNames: {\n      ...classNamesProp,\n      ...props2.classNames,\n      base: clsx(classNames, classNamesProp == null ? void 0 : classNamesProp.base, props2.className),\n      arrow: clsx(classNamesProp == null ? void 0 : classNamesProp.arrow)\n    }\n  });\n  const getMenuTriggerProps = (props2 = {}, _ref = null) => {\n    const {\n      onKeyDown,\n      onPress,\n      onPressStart,\n      ...otherMenuTriggerProps\n    } = menuTriggerProps;\n    return {\n      ...mergeProps(otherMenuTriggerProps, props2),\n      ref: mergeRefs(_ref, triggerRef)\n    };\n  };\n  const getMenuProps = (props2, _ref = null) => {\n    return {\n      ref: mergeRefs(_ref, menuRef),\n      menuProps,\n      ...mergeProps(props2, {\n        onAction: () => onMenuAction(props2 == null ? void 0 : props2.closeOnSelect)\n      })\n    };\n  };\n  return {\n    Component,\n    menuRef,\n    menuProps,\n    classNames,\n    closeOnSelect,\n    onClose: state.close,\n    autoFocus: state.focusStrategy || true,\n    disableAnimation,\n    getPopoverProps,\n    getMenuProps,\n    getMenuTriggerProps\n  };\n}\nexport { useDropdown };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}