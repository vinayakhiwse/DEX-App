{"ast":null,"code":"import m, { Fragment as Y, createContext as Z, useContext as B, useEffect as F, useMemo as $, useRef as C, useState as J } from \"react\";\nimport { Features as ce, forwardRefWithAs as X, render as ee, RenderStrategy as N } from '../../utils/render.js';\nimport { OpenClosedProvider as pe, State as E, useOpenClosed as te } from '../../internal/open-closed.js';\nimport { match as L } from '../../utils/match.js';\nimport { useIsMounted as he } from '../../hooks/use-is-mounted.js';\nimport { useIsoMorphicEffect as ve } from '../../hooks/use-iso-morphic-effect.js';\nimport { useLatestValue as I } from '../../hooks/use-latest-value.js';\nimport { useServerHandoffComplete as ne } from '../../hooks/use-server-handoff-complete.js';\nimport { useSyncRefs as re } from '../../hooks/use-sync-refs.js';\nimport { useTransition as ge } from '../../hooks/use-transition.js';\nimport { useEvent as b } from '../../hooks/use-event.js';\nimport { useDisposables as Ce } from '../../hooks/use-disposables.js';\nimport { classNames as ie } from '../../utils/class-names.js';\nimport { useFlags as Ee } from '../../hooks/use-flags.js';\nfunction S(t = \"\") {\n  return t.split(\" \").filter(n => n.trim().length > 1);\n}\nlet _ = Z(null);\n_.displayName = \"TransitionContext\";\nvar be = (r => (r.Visible = \"visible\", r.Hidden = \"hidden\", r))(be || {});\nfunction Se() {\n  let t = B(_);\n  if (t === null) throw new Error(\"A <Transition.Child /> is used but it is missing a parent <Transition /> or <Transition.Root />.\");\n  return t;\n}\nfunction Ne() {\n  let t = B(M);\n  if (t === null) throw new Error(\"A <Transition.Child /> is used but it is missing a parent <Transition /> or <Transition.Root />.\");\n  return t;\n}\nlet M = Z(null);\nM.displayName = \"NestingContext\";\nfunction U(t) {\n  return \"children\" in t ? U(t.children) : t.current.filter(({\n    el: n\n  }) => n.current !== null).filter(({\n    state: n\n  }) => n === \"visible\").length > 0;\n}\nfunction oe(t, n) {\n  let r = I(t),\n    s = C([]),\n    y = he(),\n    D = Ce(),\n    c = b((i, e = N.Hidden) => {\n      let a = s.current.findIndex(({\n        el: o\n      }) => o === i);\n      a !== -1 && (L(e, {\n        [N.Unmount]() {\n          s.current.splice(a, 1);\n        },\n        [N.Hidden]() {\n          s.current[a].state = \"hidden\";\n        }\n      }), D.microTask(() => {\n        var o;\n        !U(s) && y.current && ((o = r.current) == null || o.call(r));\n      }));\n    }),\n    x = b(i => {\n      let e = s.current.find(({\n        el: a\n      }) => a === i);\n      return e ? e.state !== \"visible\" && (e.state = \"visible\") : s.current.push({\n        el: i,\n        state: \"visible\"\n      }), () => c(i, N.Unmount);\n    }),\n    p = C([]),\n    h = C(Promise.resolve()),\n    u = C({\n      enter: [],\n      leave: [],\n      idle: []\n    }),\n    v = b((i, e, a) => {\n      p.current.splice(0), n && (n.chains.current[e] = n.chains.current[e].filter(([o]) => o !== i)), n == null || n.chains.current[e].push([i, new Promise(o => {\n        p.current.push(o);\n      })]), n == null || n.chains.current[e].push([i, new Promise(o => {\n        Promise.all(u.current[e].map(([f, P]) => P)).then(() => o());\n      })]), e === \"enter\" ? h.current = h.current.then(() => n == null ? void 0 : n.wait.current).then(() => a(e)) : a(e);\n    }),\n    d = b((i, e, a) => {\n      Promise.all(u.current[e].splice(0).map(([o, f]) => f)).then(() => {\n        var o;\n        (o = p.current.shift()) == null || o();\n      }).then(() => a(e));\n    });\n  return $(() => ({\n    children: s,\n    register: x,\n    unregister: c,\n    onStart: v,\n    onStop: d,\n    wait: h,\n    chains: u\n  }), [x, c, s, v, d, u, h]);\n}\nfunction xe() {}\nlet Pe = [\"beforeEnter\", \"afterEnter\", \"beforeLeave\", \"afterLeave\"];\nfunction se(t) {\n  var r;\n  let n = {};\n  for (let s of Pe) n[s] = (r = t[s]) != null ? r : xe;\n  return n;\n}\nfunction Re(t) {\n  let n = C(se(t));\n  return F(() => {\n    n.current = se(t);\n  }, [t]), n;\n}\nlet ye = \"div\",\n  ae = ce.RenderStrategy;\nfunction De(t, n) {\n  var K, Q;\n  let {\n      beforeEnter: r,\n      afterEnter: s,\n      beforeLeave: y,\n      afterLeave: D,\n      enter: c,\n      enterFrom: x,\n      enterTo: p,\n      entered: h,\n      leave: u,\n      leaveFrom: v,\n      leaveTo: d,\n      ...i\n    } = t,\n    e = C(null),\n    a = re(e, n),\n    o = (K = i.unmount) == null || K ? N.Unmount : N.Hidden,\n    {\n      show: f,\n      appear: P,\n      initial: T\n    } = Se(),\n    [l, j] = J(f ? \"visible\" : \"hidden\"),\n    q = Ne(),\n    {\n      register: O,\n      unregister: V\n    } = q;\n  F(() => O(e), [O, e]), F(() => {\n    if (o === N.Hidden && e.current) {\n      if (f && l !== \"visible\") {\n        j(\"visible\");\n        return;\n      }\n      return L(l, {\n        [\"hidden\"]: () => V(e),\n        [\"visible\"]: () => O(e)\n      });\n    }\n  }, [l, e, O, V, f, o]);\n  let k = I({\n      base: S(i.className),\n      enter: S(c),\n      enterFrom: S(x),\n      enterTo: S(p),\n      entered: S(h),\n      leave: S(u),\n      leaveFrom: S(v),\n      leaveTo: S(d)\n    }),\n    w = Re({\n      beforeEnter: r,\n      afterEnter: s,\n      beforeLeave: y,\n      afterLeave: D\n    }),\n    G = ne();\n  F(() => {\n    if (G && l === \"visible\" && e.current === null) throw new Error(\"Did you forget to passthrough the `ref` to the actual DOM node?\");\n  }, [e, l, G]);\n  let ue = T && !P,\n    z = P && f && T,\n    Te = (() => !G || ue ? \"idle\" : f ? \"enter\" : \"leave\")(),\n    H = Ee(0),\n    de = b(g => L(g, {\n      enter: () => {\n        H.addFlag(E.Opening), w.current.beforeEnter();\n      },\n      leave: () => {\n        H.addFlag(E.Closing), w.current.beforeLeave();\n      },\n      idle: () => {}\n    })),\n    fe = b(g => L(g, {\n      enter: () => {\n        H.removeFlag(E.Opening), w.current.afterEnter();\n      },\n      leave: () => {\n        H.removeFlag(E.Closing), w.current.afterLeave();\n      },\n      idle: () => {}\n    })),\n    A = oe(() => {\n      j(\"hidden\"), V(e);\n    }, q);\n  ge({\n    immediate: z,\n    container: e,\n    classes: k,\n    direction: Te,\n    onStart: I(g => {\n      A.onStart(e, g, de);\n    }),\n    onStop: I(g => {\n      A.onStop(e, g, fe), g === \"leave\" && !U(A) && (j(\"hidden\"), V(e));\n    })\n  });\n  let R = i,\n    me = {\n      ref: a\n    };\n  return z ? R = {\n    ...R,\n    className: ie(i.className, ...k.current.enter, ...k.current.enterFrom)\n  } : (R.className = ie(i.className, (Q = e.current) == null ? void 0 : Q.className), R.className === \"\" && delete R.className), m.createElement(M.Provider, {\n    value: A\n  }, m.createElement(pe, {\n    value: L(l, {\n      [\"visible\"]: E.Open,\n      [\"hidden\"]: E.Closed\n    }) | H.flags\n  }, ee({\n    ourProps: me,\n    theirProps: R,\n    defaultTag: ye,\n    features: ae,\n    visible: l === \"visible\",\n    name: \"Transition.Child\"\n  })));\n}\nfunction He(t, n) {\n  let {\n      show: r,\n      appear: s = !1,\n      unmount: y = !0,\n      ...D\n    } = t,\n    c = C(null),\n    x = re(c, n);\n  ne();\n  let p = te();\n  if (r === void 0 && p !== null && (r = (p & E.Open) === E.Open), ![!0, !1].includes(r)) throw new Error(\"A <Transition /> is used but it is missing a `show={true | false}` prop.\");\n  let [h, u] = J(r ? \"visible\" : \"hidden\"),\n    v = oe(() => {\n      u(\"hidden\");\n    }),\n    [d, i] = J(!0),\n    e = C([r]);\n  ve(() => {\n    d !== !1 && e.current[e.current.length - 1] !== r && (e.current.push(r), i(!1));\n  }, [e, r]);\n  let a = $(() => ({\n    show: r,\n    appear: s,\n    initial: d\n  }), [r, s, d]);\n  F(() => {\n    if (r) u(\"visible\");else if (!U(v)) u(\"hidden\");else {\n      let T = c.current;\n      if (!T) return;\n      let l = T.getBoundingClientRect();\n      l.x === 0 && l.y === 0 && l.width === 0 && l.height === 0 && u(\"hidden\");\n    }\n  }, [r, v]);\n  let o = {\n      unmount: y\n    },\n    f = b(() => {\n      var T;\n      d && i(!1), (T = t.beforeEnter) == null || T.call(t);\n    }),\n    P = b(() => {\n      var T;\n      d && i(!1), (T = t.beforeLeave) == null || T.call(t);\n    });\n  return m.createElement(M.Provider, {\n    value: v\n  }, m.createElement(_.Provider, {\n    value: a\n  }, ee({\n    ourProps: {\n      ...o,\n      as: Y,\n      children: m.createElement(le, {\n        ref: x,\n        ...o,\n        ...D,\n        beforeEnter: f,\n        beforeLeave: P\n      })\n    },\n    theirProps: {},\n    defaultTag: Y,\n    features: ae,\n    visible: h === \"visible\",\n    name: \"Transition\"\n  })));\n}\nfunction Fe(t, n) {\n  let r = B(_) !== null,\n    s = te() !== null;\n  return m.createElement(m.Fragment, null, !r && s ? m.createElement(W, {\n    ref: n,\n    ...t\n  }) : m.createElement(le, {\n    ref: n,\n    ...t\n  }));\n}\nlet W = X(He),\n  le = X(De),\n  Le = X(Fe),\n  tt = Object.assign(W, {\n    Child: Le,\n    Root: W\n  });\nexport { tt as Transition };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}