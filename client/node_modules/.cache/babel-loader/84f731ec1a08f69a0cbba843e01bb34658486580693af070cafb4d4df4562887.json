{"ast":null,"code":"import e, { useRef as o, useMemo as s } from \"react\";\nimport { mergeProps as i } from \"@react-aria/utils\";\nimport { useFocusRing as r } from \"@react-aria/focus\";\nimport { useHover as t, usePress as a } from \"@react-aria/interactions\";\nimport { useMenuItem as d } from \"@react-aria/menu\";\nimport c from \"../utils/checkmark\";\nimport { useDropdownContext as n } from \"./dropdown-context\";\nimport { StyledDropdownItem as p, StyledDropdownItemKbd as l, StyledDropdownItemContent as m, StyledDropdownItemIconWrapper as u, StyledDropdownItemContentWrapper as h, StyledDropdownItemDescription as f } from \"./dropdown.styles\";\nimport x from \"../utils/clsx\";\nimport { __DEV__ as b } from \"../utils/assertion\";\nimport { jsx as w } from \"react/jsx-runtime\";\nimport { jsxs as v } from \"react/jsx-runtime\";\nconst N = ({\n  as: e,\n  css: b,\n  item: N,\n  state: y,\n  color: D,\n  icon: P,\n  command: S,\n  description: g,\n  textColor: C,\n  variant: k,\n  autoFocus: F,\n  isVirtualized: j,\n  withDivider: A,\n  dividerWeight: I,\n  onAction: M,\n  className: V\n}) => {\n  const {\n      onClose: W,\n      closeOnSelect: O,\n      disableAnimation: z,\n      borderWeight: H\n    } = n(),\n    {\n      rendered: K,\n      key: U\n    } = N,\n    $ = y.selectionManager.isSelected(U),\n    q = y.selectionManager.focusedKey === N.key,\n    B = y.disabledKeys.has(U),\n    E = o(null),\n    {\n      pressProps: G,\n      isPressed: J\n    } = a({\n      ref: E,\n      isDisabled: B\n    }),\n    {\n      isFocusVisible: L,\n      focusProps: Q\n    } = r({\n      autoFocus: F\n    }),\n    {\n      hoverProps: R,\n      isHovered: T\n    } = t({\n      isDisabled: B\n    }),\n    X = \"none\" !== y.selectionManager.selectionMode && !B,\n    {\n      menuItemProps: Y,\n      labelProps: Z,\n      descriptionProps: _,\n      keyboardShortcutProps: ee\n    } = d({\n      key: U,\n      onClose: W,\n      isSelected: $,\n      isDisabled: B,\n      \"aria-label\": N[\"aria-label\"],\n      closeOnSelect: O,\n      isVirtualized: j,\n      onAction: M\n    }, y, E),\n    oe = s(() => T ? \"hovered\" : $ ? \"selected\" : J ? \"pressed\" : B ? \"disabled\" : \"ready\", [$, B, T, J]),\n    se = s(() => N.props.textColor ? N.props.textColor : N.props.color && \"default\" === C ? N.props.color : C, [C, N.props.color, N.props.textColor]),\n    ie = s(() => g || N.props.description, [g, N.props.description]),\n    re = s(() => S || N.props.command, [S, N.props.command]),\n    te = s(() => P || N.props.icon, [P, N.props.icon]);\n  return v(p, {\n    ref: E,\n    ...i(Y, R, G, Q),\n    as: N.props.as || e,\n    css: {\n      ...i(b, N.props.css)\n    },\n    \"data-state\": oe,\n    color: N.props.color || D,\n    variant: N.props.variant || k,\n    textColor: se,\n    isFocused: q,\n    isFocusVisible: L,\n    shouldShowOutline: L && \"shadow\" === k,\n    isHovered: T,\n    isSelected: $,\n    isDisabled: B,\n    isPressed: J,\n    isSelectable: X,\n    withDivider: A || N.props.withDivider,\n    withDescription: !!ie,\n    dividerWeight: I || N.props.dividerWeight || H,\n    disableAnimation: z,\n    className: x(\"nextui-dropdown-item\", {\n      \"is-disabled\": B,\n      \"is-selected\": $,\n      \"is-selectable\": X,\n      \"is-hovered\": T,\n      \"is-focused\": q,\n      \"is-pressed\": J\n    }, V, N.props.className),\n    children: [te && w(u, {\n      className: \"nextui-dropdown-item-icon-wrapper\",\n      children: te\n    }), ie ? v(h, {\n      children: [w(m, {\n        className: \"nextui-dropdown-item-content\",\n        ...Z,\n        children: K\n      }), w(f, {\n        className: \"nextui-dropdown-item-description\",\n        hasIcon: !!te,\n        hasCommand: !!re,\n        ..._,\n        children: ie\n      })]\n    }) : w(m, {\n      className: \"nextui-dropdown-item-content\",\n      ...Z,\n      children: K\n    }), re && w(l, {\n      className: \"nextui-dropdown-item-command\",\n      ...ee,\n      children: re\n    }), $ && w(c, {\n      css: {\n        ml: \"$4\"\n      }\n    })]\n  });\n};\nb && (N.displayName = \"NextUI.DropdownItem\"), N.toString = () => \".nextui-dropdown-item\";\nexport default N;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}