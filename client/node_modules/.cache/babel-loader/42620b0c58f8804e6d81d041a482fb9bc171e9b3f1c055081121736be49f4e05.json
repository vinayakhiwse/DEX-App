{"ast":null,"code":"import { isObject } from \"./chunk-MCFSCOSB.mjs\";\n\n// src/object.ts\nvar renameProp = (oldProp, newProp, {\n  [oldProp]: old,\n  ...others\n}) => ({\n  [newProp]: old,\n  ...others\n});\nvar copyObject = obj => {\n  if (!isObject(obj)) return obj;\n  if (obj instanceof Array) return [...obj];\n  return {\n    ...obj\n  };\n};\nvar omitObject = (obj, omitKeys) => {\n  if (!isObject(obj)) return obj;\n  if (obj instanceof Array) return [...obj];\n  const newObj = {\n    ...obj\n  };\n  omitKeys.forEach(key => newObj[key] && delete newObj[key]);\n  return newObj;\n};\nvar cleanObject = obj => {\n  if (!isObject(obj)) return obj;\n  if (obj instanceof Array) return [...obj];\n  const newObj = {\n    ...obj\n  };\n  Object.keys(newObj).forEach(key => {\n    if (newObj[key] === void 0 || newObj[key] === null) {\n      delete newObj[key];\n    }\n  });\n  return newObj;\n};\nvar cleanObjectKeys = (obj, keys = []) => {\n  if (!isObject(obj)) return obj;\n  if (obj instanceof Array) return [...obj];\n  const newObj = {\n    ...obj\n  };\n  keys.forEach(key => {\n    if (newObj[key]) {\n      delete newObj[key];\n    }\n  });\n  return newObj;\n};\nvar getKeyValue = (obj, key) => {\n  if (!isObject(obj)) return obj;\n  if (obj instanceof Array) return [...obj];\n  return obj[key];\n};\nvar getProp = (obj, path, fallback, index) => {\n  const key = typeof path === \"string\" ? path.split(\".\") : [path];\n  for (index = 0; index < key.length; index += 1) {\n    if (!obj) break;\n    obj = obj[key[index]];\n  }\n  return obj === void 0 ? fallback : obj;\n};\nvar arrayToObject = arr => {\n  if (!arr.length || !Array.isArray(arr)) return {};\n  return arr.reduce((acc, item) => {\n    return {\n      ...acc,\n      ...item\n    };\n  }, {});\n};\nfunction compact(object) {\n  const clone = Object.assign({}, object);\n  for (let key in clone) {\n    if (clone[key] === void 0) delete clone[key];\n  }\n  return clone;\n}\nexport { renameProp, copyObject, omitObject, cleanObject, cleanObjectKeys, getKeyValue, getProp, arrayToObject, compact };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}