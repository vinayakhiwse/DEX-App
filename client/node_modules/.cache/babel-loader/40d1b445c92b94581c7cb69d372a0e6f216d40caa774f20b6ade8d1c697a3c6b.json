{"ast":null,"code":"import { useMemo as e, useRef as o } from \"react\";\nimport { useToggleState as l } from \"@react-stately/toggle\";\nimport { useCheckbox as t, useCheckboxGroupItem as i } from \"@react-aria/checkbox\";\nimport { __DEV__ as n } from \"../utils/assertion\";\nimport { useCheckboxGroupContext as r } from \"./checkbox-context\";\nexport const useCheckbox = a => {\n  var u, s, d;\n  const c = r(),\n    {\n      size: m = null != (u = null == c ? void 0 : c.size) ? u : \"md\",\n      color: p = null != (s = null == c ? void 0 : c.color) ? s : \"default\",\n      labelColor: b = null != (d = null == c ? void 0 : c.labelColor) ? d : \"default\",\n      lineThrough: h,\n      isRounded: f = !1,\n      disableAnimation: v = !1,\n      isIndeterminate: x = !1,\n      ...C\n    } = a;\n  if (c && n) {\n    const e = \"The Checkbox.Group is being used, `%s` will be ignored. Use the `%s` of the Checkbox.Group instead.\";\n    \"isSelected\" in C && console.warn(e, \"isSelected\", \"value\"), \"defaultSelected\" in C && console.warn(e, \"defaultSelected\", \"defaultValue\");\n  }\n  const g = o(null),\n    k = e(() => {\n      var e, o;\n      return {\n        ...C,\n        isIndeterminate: x,\n        value: null != (e = C.value) ? e : \"\",\n        isRequired: null != (o = C.isRequired) && o\n      };\n    }, [x, C]),\n    {\n      inputProps: S\n    } = c ? i({\n      ...k,\n      validationState: C.validationState\n    }, c.groupState, g) : t(k, l(k), g);\n  return {\n    size: m,\n    color: p,\n    labelColor: b,\n    isRounded: f,\n    lineThrough: h,\n    disableAnimation: v,\n    isIndeterminate: x,\n    inputRef: g,\n    inputProps: S\n  };\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}