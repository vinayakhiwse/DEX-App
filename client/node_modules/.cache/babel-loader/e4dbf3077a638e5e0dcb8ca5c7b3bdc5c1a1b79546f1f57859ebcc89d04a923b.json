{"ast":null,"code":"import { Eip1559FeesNotSupportedError } from '../../errors/fee.js';\nimport { hexToBigInt } from '../../utils/encoding/fromHex.js';\nimport { getBlock } from './getBlock.js';\nimport { getGasPrice } from './getGasPrice.js';\n/**\n * Returns an estimate for the max priority fee per gas (in wei) for a\n * transaction to be likely included in the next block.\n * Defaults to [`chain.fees.defaultPriorityFee`](/docs/clients/chains.html#fees-defaultpriorityfee) if set.\n *\n * - Docs: https://viem.sh/docs/actions/public/estimateMaxPriorityFeePerGas.html\n *\n * @param client - Client to use\n * @returns An estimate (in wei) for the max priority fee per gas. {@link EstimateMaxPriorityFeePerGasReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { estimateMaxPriorityFeePerGas } from 'viem/actions'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const maxPriorityFeePerGas = await estimateMaxPriorityFeePerGas(client)\n * // 10000000n\n */\nexport async function estimateMaxPriorityFeePerGas(client, args) {\n  return internal_estimateMaxPriorityFeePerGas(client, args);\n}\nexport async function internal_estimateMaxPriorityFeePerGas(client, args) {\n  const {\n    block: block_,\n    chain = client.chain,\n    request\n  } = args || {};\n  if (typeof chain?.fees?.defaultPriorityFee === 'function') {\n    const block = block_ || (await getBlock(client));\n    return chain.fees.defaultPriorityFee({\n      block,\n      client,\n      request\n    });\n  } else if (chain?.fees?.defaultPriorityFee) return chain?.fees?.defaultPriorityFee;\n  try {\n    const maxPriorityFeePerGasHex = await client.request({\n      method: 'eth_maxPriorityFeePerGas'\n    });\n    return hexToBigInt(maxPriorityFeePerGasHex);\n  } catch {\n    // If the RPC Provider does not support `eth_maxPriorityFeePerGas`\n    // fall back to calculating it manually via `gasPrice - baseFeePerGas`.\n    // See: https://github.com/ethereum/pm/issues/328#:~:text=eth_maxPriorityFeePerGas%20after%20London%20will%20effectively%20return%20eth_gasPrice%20%2D%20baseFee\n    const [block, gasPrice] = await Promise.all([block_ ? Promise.resolve(block_) : getBlock(client), getGasPrice(client)]);\n    if (typeof block.baseFeePerGas !== 'bigint') throw new Eip1559FeesNotSupportedError();\n    const maxPriorityFeePerGas = gasPrice - block.baseFeePerGas;\n    if (maxPriorityFeePerGas < 0n) return 0n;\n    return maxPriorityFeePerGas;\n  }\n}\n//# sourceMappingURL=estimateMaxPriorityFeePerGas.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}