{"ast":null,"code":"import { contract } from \"./contract\";\nimport { toWei } from \"./ether-utils\";\nexport const TransactionRecord = async () => {\n  try {\n    const TransactionObj = await contract();\n    const count = await TransactionObj.transactionCount();\n    const newCount = Number(toWei(count.toString())) / 1000000000000000000;\n    let transactionArray = [];\n    for (let i = 0; i < newCount; i++) {\n      const data = await TransactionObj.transaction(i);\n      const newDate = formatTimestamp(data.timestamp);\n      console.log(\"timestampuuj....\", newDate);\n      transactionArray.push({\n        ...data,\n        newDate\n      });\n    }\n    return transactionArray;\n  } catch (error) {\n    console.log(error);\n  }\n};\n_c = TransactionRecord;\nconst formatTimestamp = timestamp => {\n  const date = new Date(timestamp * 1000); // Convert seconds to milliseconds\n  return date.toLocaleString(); // Use toLocaleString for a localized date and time format\n};\nvar _c;\n$RefreshReg$(_c, \"TransactionRecord\");","map":{"version":3,"names":["contract","toWei","TransactionRecord","TransactionObj","count","transactionCount","newCount","Number","toString","transactionArray","i","data","transaction","newDate","formatTimestamp","timestamp","console","log","push","error","_c","date","Date","toLocaleString","$RefreshReg$"],"sources":["/home/hp/Desktop/client/src/utils/transactionRecord.js"],"sourcesContent":["import { contract } from \"./contract\";\nimport { toWei } from \"./ether-utils\";\n\nexport const TransactionRecord = async () => {\n  try {\n    const TransactionObj = await contract();\n    const count = await TransactionObj.transactionCount();\n    const newCount = Number(toWei(count.toString())) / 1000000000000000000;\n    let transactionArray = [];\n    for (let i = 0; i < newCount; i++) {\n      const data = await TransactionObj.transaction(i);\n      const newDate = formatTimestamp(data.timestamp);\n      console.log(\"timestampuuj....\", newDate);\n      transactionArray.push({ ...data, newDate });\n    }\n    return transactionArray;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst formatTimestamp = (timestamp) => {\n  const date = new Date(timestamp * 1000); // Convert seconds to milliseconds\n  return date.toLocaleString(); // Use toLocaleString for a localized date and time format\n};\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,YAAY;AACrC,SAASC,KAAK,QAAQ,eAAe;AAErC,OAAO,MAAMC,iBAAiB,GAAG,MAAAA,CAAA,KAAY;EAC3C,IAAI;IACF,MAAMC,cAAc,GAAG,MAAMH,QAAQ,CAAC,CAAC;IACvC,MAAMI,KAAK,GAAG,MAAMD,cAAc,CAACE,gBAAgB,CAAC,CAAC;IACrD,MAAMC,QAAQ,GAAGC,MAAM,CAACN,KAAK,CAACG,KAAK,CAACI,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAG,mBAAmB;IACtE,IAAIC,gBAAgB,GAAG,EAAE;IACzB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,QAAQ,EAAEI,CAAC,EAAE,EAAE;MACjC,MAAMC,IAAI,GAAG,MAAMR,cAAc,CAACS,WAAW,CAACF,CAAC,CAAC;MAChD,MAAMG,OAAO,GAAGC,eAAe,CAACH,IAAI,CAACI,SAAS,CAAC;MAC/CC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEJ,OAAO,CAAC;MACxCJ,gBAAgB,CAACS,IAAI,CAAC;QAAE,GAAGP,IAAI;QAAEE;MAAQ,CAAC,CAAC;IAC7C;IACA,OAAOJ,gBAAgB;EACzB,CAAC,CAAC,OAAOU,KAAK,EAAE;IACdH,OAAO,CAACC,GAAG,CAACE,KAAK,CAAC;EACpB;AACF,CAAC;AAACC,EAAA,GAhBWlB,iBAAiB;AAkB9B,MAAMY,eAAe,GAAIC,SAAS,IAAK;EACrC,MAAMM,IAAI,GAAG,IAAIC,IAAI,CAACP,SAAS,GAAG,IAAI,CAAC,CAAC,CAAC;EACzC,OAAOM,IAAI,CAACE,cAAc,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC;AAAC,IAAAH,EAAA;AAAAI,YAAA,CAAAJ,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}