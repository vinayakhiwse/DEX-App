{"ast":null,"code":"\"use client\";\n\n// src/use-avatar-group.ts\nimport { avatarGroup } from \"@nextui-org/theme\";\nimport { useDOMRef } from \"@nextui-org/react-utils\";\nimport { clsx, compact } from \"@nextui-org/shared-utils\";\nimport { getValidChildren } from \"@nextui-org/react-utils\";\nimport { cloneElement, useMemo } from \"react\";\nfunction useAvatarGroup(props = {}) {\n  const {\n    as,\n    ref,\n    max = 5,\n    total,\n    size,\n    color,\n    radius,\n    children,\n    isBordered,\n    isDisabled,\n    isGrid,\n    renderCount,\n    className,\n    ...otherProps\n  } = props;\n  const domRef = useDOMRef(ref);\n  const Component = as || \"div\";\n  const context = useMemo(() => ({\n    size,\n    color,\n    radius,\n    isGrid,\n    isBordered,\n    isDisabled\n  }), [size, color, radius, isGrid, isBordered, isDisabled]);\n  const classNames = useMemo(() => avatarGroup({\n    className,\n    isGrid\n  }), [className, isGrid]);\n  const validChildren = getValidChildren(children);\n  const childrenWithinMax = max ? validChildren.slice(0, max) : validChildren;\n  const remainingCount = total ? total : max != null ? validChildren.length - max : -1;\n  const clones = childrenWithinMax.map((child, index) => {\n    const isFirstAvatar = index === 0;\n    const isLastAvatar = index === childrenWithinMax.length - 1;\n    const childProps = {\n      className: clsx(isFirstAvatar ? \"ml-0\" : !isGrid ? \"-ml-2\" : \"\", isLastAvatar && remainingCount < 1 ? \"hover:-translate-x-0\" : \"\")\n    };\n    return cloneElement(child, compact(childProps));\n  });\n  const getAvatarGroupProps = () => {\n    return {\n      ref: domRef,\n      className: classNames,\n      role: \"group\",\n      ...otherProps\n    };\n  };\n  return {\n    Component,\n    context,\n    remainingCount,\n    clones,\n    renderCount,\n    getAvatarGroupProps\n  };\n}\nexport { useAvatarGroup };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}