{"ast":null,"code":"\"use client\";\n\nimport { useAvatarGroupContext } from \"./chunk-PM5WBSHT.mjs\";\n\n// src/use-avatar.ts\nimport { avatar } from \"@nextui-org/theme\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { useDOMRef } from \"@nextui-org/react-utils\";\nimport { clsx, safeText, dataAttr } from \"@nextui-org/shared-utils\";\nimport { useFocusRing } from \"@react-aria/focus\";\nimport { useMemo, useCallback } from \"react\";\nimport { useImage } from \"@nextui-org/use-image\";\nimport { useHover } from \"@react-aria/interactions\";\nfunction useAvatar(props = {}) {\n  var _a, _b, _c, _d, _e;\n  const groupContext = useAvatarGroupContext();\n  const isInGroup = !!groupContext;\n  const {\n    as,\n    ref,\n    src,\n    name,\n    icon,\n    classNames,\n    fallback,\n    alt = name || \"avatar\",\n    imgRef: imgRefProp,\n    color = (_a = groupContext == null ? void 0 : groupContext.color) != null ? _a : \"default\",\n    radius = (_b = groupContext == null ? void 0 : groupContext.radius) != null ? _b : \"full\",\n    size = (_c = groupContext == null ? void 0 : groupContext.size) != null ? _c : \"md\",\n    isBordered = (_d = groupContext == null ? void 0 : groupContext.isBordered) != null ? _d : false,\n    isDisabled = (_e = groupContext == null ? void 0 : groupContext.isDisabled) != null ? _e : false,\n    isFocusable = false,\n    getInitials = safeText,\n    ignoreFallback = false,\n    showFallback: showFallbackProp = false,\n    ImgComponent = \"img\",\n    imgProps,\n    className,\n    onError,\n    ...otherProps\n  } = props;\n  const Component = as || \"span\";\n  const domRef = useDOMRef(ref);\n  const imgRef = useDOMRef(imgRefProp);\n  const {\n    isFocusVisible,\n    isFocused,\n    focusProps\n  } = useFocusRing();\n  const {\n    isHovered,\n    hoverProps\n  } = useHover({\n    isDisabled\n  });\n  const imageStatus = useImage({\n    src,\n    onError,\n    ignoreFallback\n  });\n  const isImgLoaded = imageStatus === \"loaded\";\n  const showFallback = (!src || !isImgLoaded) && showFallbackProp;\n  const slots = useMemo(() => {\n    var _a2;\n    return avatar({\n      color,\n      radius,\n      size,\n      isBordered,\n      isDisabled,\n      isInGroup,\n      isInGridGroup: (_a2 = groupContext == null ? void 0 : groupContext.isGrid) != null ? _a2 : false\n    });\n  }, [color, radius, size, isBordered, isDisabled, isInGroup, groupContext == null ? void 0 : groupContext.isGrid]);\n  const baseStyles = clsx(classNames == null ? void 0 : classNames.base, className);\n  const canBeFocused = useMemo(() => {\n    return isFocusable || as === \"button\";\n  }, [isFocusable, as]);\n  const getAvatarProps = useCallback((props2 = {}) => ({\n    ref: domRef,\n    tabIndex: canBeFocused ? 0 : -1,\n    \"data-hover\": dataAttr(isHovered),\n    \"data-focus\": dataAttr(isFocused),\n    \"data-focus-visible\": dataAttr(isFocusVisible),\n    className: slots.base({\n      class: clsx(baseStyles, props2 == null ? void 0 : props2.className)\n    }),\n    ...mergeProps(otherProps, hoverProps, canBeFocused ? focusProps : {})\n  }), [canBeFocused, slots, baseStyles, focusProps, otherProps]);\n  const getImageProps = useCallback((props2 = {}) => ({\n    ref: imgRef,\n    src,\n    \"data-loaded\": dataAttr(isImgLoaded),\n    className: slots.img({\n      class: classNames == null ? void 0 : classNames.img\n    }),\n    ...mergeProps(imgProps, props2)\n  }), [slots, isImgLoaded, imgProps, src, imgRef]);\n  return {\n    Component,\n    ImgComponent,\n    src,\n    alt,\n    icon,\n    name,\n    imgRef,\n    slots,\n    classNames,\n    fallback,\n    isImgLoaded,\n    showFallback,\n    ignoreFallback,\n    getInitials,\n    getAvatarProps,\n    getImageProps\n  };\n}\nexport { useAvatar };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}