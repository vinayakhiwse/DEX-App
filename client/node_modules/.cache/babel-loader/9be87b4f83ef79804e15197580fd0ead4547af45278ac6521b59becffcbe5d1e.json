{"ast":null,"code":"/* [Multicall3](https://github.com/mds1/multicall) */\nexport const multicall3Abi = [{\n  inputs: [{\n    components: [{\n      name: 'target',\n      type: 'address'\n    }, {\n      name: 'allowFailure',\n      type: 'bool'\n    }, {\n      name: 'callData',\n      type: 'bytes'\n    }],\n    name: 'calls',\n    type: 'tuple[]'\n  }],\n  name: 'aggregate3',\n  outputs: [{\n    components: [{\n      name: 'success',\n      type: 'bool'\n    }, {\n      name: 'returnData',\n      type: 'bytes'\n    }],\n    name: 'returnData',\n    type: 'tuple[]'\n  }],\n  stateMutability: 'view',\n  type: 'function'\n}];\nconst universalResolverErrors = [{\n  inputs: [],\n  name: 'ResolverNotFound',\n  type: 'error'\n}, {\n  inputs: [],\n  name: 'ResolverWildcardNotSupported',\n  type: 'error'\n}];\nexport const universalResolverResolveAbi = [...universalResolverErrors, {\n  name: 'resolve',\n  type: 'function',\n  stateMutability: 'view',\n  inputs: [{\n    name: 'name',\n    type: 'bytes'\n  }, {\n    name: 'data',\n    type: 'bytes'\n  }],\n  outputs: [{\n    name: '',\n    type: 'bytes'\n  }, {\n    name: 'address',\n    type: 'address'\n  }]\n}];\nexport const universalResolverReverseAbi = [...universalResolverErrors, {\n  name: 'reverse',\n  type: 'function',\n  stateMutability: 'view',\n  inputs: [{\n    type: 'bytes',\n    name: 'reverseName'\n  }],\n  outputs: [{\n    type: 'string',\n    name: 'resolvedName'\n  }, {\n    type: 'address',\n    name: 'resolvedAddress'\n  }, {\n    type: 'address',\n    name: 'reverseResolver'\n  }, {\n    type: 'address',\n    name: 'resolver'\n  }]\n}];\nexport const textResolverAbi = [{\n  name: 'text',\n  type: 'function',\n  stateMutability: 'view',\n  inputs: [{\n    name: 'name',\n    type: 'bytes32'\n  }, {\n    name: 'key',\n    type: 'string'\n  }],\n  outputs: [{\n    name: '',\n    type: 'string'\n  }]\n}];\nexport const addressResolverAbi = [{\n  name: 'addr',\n  type: 'function',\n  stateMutability: 'view',\n  inputs: [{\n    name: 'name',\n    type: 'bytes32'\n  }],\n  outputs: [{\n    name: '',\n    type: 'address'\n  }]\n}, {\n  name: 'addr',\n  type: 'function',\n  stateMutability: 'view',\n  inputs: [{\n    name: 'name',\n    type: 'bytes32'\n  }, {\n    name: 'coinType',\n    type: 'uint256'\n  }],\n  outputs: [{\n    name: '',\n    type: 'bytes'\n  }]\n}];\n// ERC-1271\n// isValidSignature(bytes32 hash, bytes signature) → bytes4 magicValue\nexport const smartAccountAbi = [{\n  name: 'isValidSignature',\n  type: 'function',\n  stateMutability: 'view',\n  inputs: [{\n    name: 'hash',\n    type: 'bytes32'\n  }, {\n    name: 'signature',\n    type: 'bytes'\n  }],\n  outputs: [{\n    name: '',\n    type: 'bytes4'\n  }]\n}];\n// ERC-6492 - universal deployless signature validator contract\n// constructor(address _signer, bytes32 _hash, bytes _signature) → bytes4 returnValue\n// returnValue is either 0x1 (valid) or 0x0 (invalid)\nexport const universalSignatureValidatorAbi = [{\n  inputs: [{\n    internalType: 'address',\n    name: '_signer',\n    type: 'address'\n  }, {\n    internalType: 'bytes32',\n    name: '_hash',\n    type: 'bytes32'\n  }, {\n    internalType: 'bytes',\n    name: '_signature',\n    type: 'bytes'\n  }],\n  stateMutability: 'nonpayable',\n  type: 'constructor'\n}];\n//# sourceMappingURL=abis.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}