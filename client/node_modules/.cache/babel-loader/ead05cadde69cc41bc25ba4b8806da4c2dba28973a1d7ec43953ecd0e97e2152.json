{"ast":null,"code":"'use client';\n\nimport { extends as _extends } from './_virtual/_rollupPluginBabelHelpers.mjs';\nimport * as React from 'react';\nimport { persistQueryClientRestore, persistQueryClientSubscribe } from '@tanstack/query-persist-client-core';\nimport { QueryClientProvider, IsRestoringProvider } from '@tanstack/react-query';\nconst PersistQueryClientProvider = ({\n  client,\n  children,\n  persistOptions,\n  onSuccess,\n  ...props\n}) => {\n  const [isRestoring, setIsRestoring] = React.useState(true);\n  const refs = React.useRef({\n    persistOptions,\n    onSuccess\n  });\n  const didRestore = React.useRef(false);\n  React.useEffect(() => {\n    refs.current = {\n      persistOptions,\n      onSuccess\n    };\n  });\n  React.useEffect(() => {\n    const options = {\n      ...refs.current.persistOptions,\n      queryClient: client\n    };\n    if (!didRestore.current) {\n      didRestore.current = true;\n      setIsRestoring(true);\n      persistQueryClientRestore(options).then(async () => {\n        try {\n          await (refs.current.onSuccess == null ? void 0 : refs.current.onSuccess());\n        } finally {\n          setIsRestoring(false);\n        }\n      });\n    }\n    return isRestoring ? undefined : persistQueryClientSubscribe(options);\n  }, [client, isRestoring]);\n  return /*#__PURE__*/React.createElement(QueryClientProvider, _extends({\n    client: client\n  }, props), /*#__PURE__*/React.createElement(IsRestoringProvider, {\n    value: isRestoring\n  }, children));\n};\nexport { PersistQueryClientProvider };\n//# sourceMappingURL=PersistQueryClientProvider.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}