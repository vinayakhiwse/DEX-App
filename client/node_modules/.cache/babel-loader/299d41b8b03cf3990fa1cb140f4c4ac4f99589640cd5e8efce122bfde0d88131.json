{"ast":null,"code":"import e, { useMemo as i } from \"react\";\nimport { mergeProps as s } from \"@react-aria/utils\";\nimport { useFocusRing as c } from \"@react-aria/focus\";\nimport { useHover as a } from \"@react-aria/interactions\";\nimport { usePress as o } from \"@react-aria/interactions\";\nimport { VisuallyHidden as r } from \"@react-aria/visually-hidden\";\nimport t from \"../utils/clsx\";\nimport { __DEV__ as n } from \"../utils/assertion\";\nimport { useFocusableRef as d } from \"../utils/dom\";\nimport { useCheckbox as l } from \"./use-checkbox\";\nimport { StyledCheckboxLabel as m, StyledCheckboxContainer as h, StyledCheckboxMask as u, StyledIconCheck as b, StyledIconCheckFirstLine as k, StyledIconCheckSecondLine as x, StyledCheckboxText as p } from \"./checkbox.styles\";\nimport { jsx as f } from \"react/jsx-runtime\";\nimport { jsxs as N } from \"react/jsx-runtime\";\nconst A = e.forwardRef((e, n) => {\n  const {\n      className: A,\n      as: C,\n      css: I,\n      children: v,\n      label: D,\n      ...j\n    } = e,\n    {\n      size: F,\n      color: P,\n      labelColor: R,\n      isRounded: g,\n      lineThrough: y,\n      disableAnimation: z,\n      isIndeterminate: H,\n      inputRef: T,\n      inputProps: V\n    } = l({\n      ...j,\n      children: null != v ? v : D\n    }),\n    w = d(n, T),\n    {\n      hoverProps: S,\n      isHovered: U\n    } = a({\n      isDisabled: V.disabled\n    }),\n    {\n      pressProps: $\n    } = o({\n      isDisabled: V.disabled\n    }),\n    {\n      focusProps: q,\n      isFocusVisible: B\n    } = c({\n      autoFocus: V.autoFocus\n    }),\n    E = i(() => U ? \"hovered\" : H && V.checked ? \"mixed\" : V.checked ? \"checked\" : \"uncheked\", [U, H, V.checked]);\n  return N(m, {\n    ref: w,\n    ...s(S, $),\n    className: t(\"nextui-checkbox-label\", `nextui-checkbox--${E}`, A),\n    as: C,\n    css: I,\n    size: F,\n    isDisabled: V.disabled,\n    disableAnimation: z,\n    children: [N(h, {\n      className: \"nextui-checkbox-container\",\n      color: P,\n      isRounded: g,\n      isHovered: U,\n      isDisabled: V.disabled,\n      isFocusVisible: B,\n      disableAnimation: z,\n      ...q,\n      children: [f(r, {\n        children: f(\"input\", {\n          ref: T,\n          className: \"nextui-checkbox-input\",\n          ...s(V, q)\n        })\n      }), f(u, {\n        className: \"nextui-checkbox-mask\",\n        isChecked: V.checked,\n        isIndeterminate: H,\n        disableAnimation: z,\n        children: N(b, {\n          className: \"nextui-icon-check\",\n          size: F,\n          isChecked: V.checked,\n          isIndeterminate: H,\n          disableAnimation: z,\n          children: [f(k, {\n            className: \"nextui-icon-check-line1\",\n            isChecked: V.checked,\n            isIndeterminate: H,\n            disableAnimation: z\n          }), f(x, {\n            className: \"nextui-icon-check-line2\",\n            isChecked: V.checked,\n            isIndeterminate: H,\n            disableAnimation: z\n          })]\n        })\n      })]\n    }), (v || D) && f(p, {\n      className: \"nextui-checkbox-text\",\n      color: R,\n      lineThrough: y,\n      isChecked: V.checked,\n      isDisabled: V.disabled,\n      disableAnimation: z,\n      children: v || D\n    })]\n  });\n});\nn && (A.displayName = \"NextUI.Checkbox\"), A.toString = () => \".nextui-checkbox\";\nexport default A;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}