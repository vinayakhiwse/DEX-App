{"ast":null,"code":"import { normalColors as t, simpleColors as r } from \"./prop-types\";\nexport const getCssVar = t => {\n  if (\"undefined\" != typeof document || !t) {\n    const r = isCssVar(t) ? t.replace(\"var(\", \"\").replace(\")\", \"\") : `--${t}`;\n    return getComputedStyle(document.documentElement).getPropertyValue(r);\n  }\n  return \"\";\n};\nexport const isCssVar = t => !(!t || 0 !== (null == t ? void 0 : t.indexOf(\"var(\")));\nexport const isHex = t => /#[a-fA-F0-9]{3,6}/g.test(t);\nexport const hexToRGBA = (t, r = 1) => {\n  let e = 0,\n    o = 0,\n    n = 0;\n  return 4 == t.length ? (e = \"0x\" + t[1] + t[1], o = \"0x\" + t[2] + t[2], n = \"0x\" + t[3] + t[3]) : 7 == t.length && (e = \"0x\" + t[1] + t[2], o = \"0x\" + t[3] + t[4], n = \"0x\" + t[5] + t[6]), `rgba(${+e}, ${+o},${+n},${r})`;\n};\nexport const isNormalColor = r => {\n  let e = t.find(t => t === r);\n  return null != e;\n};\nexport const isSimpleColor = t => {\n  let e = r.find(r => r === t);\n  return null != e;\n};\nexport const isColor = t => {\n  let r = new Option().style;\n  return r.color = t, r.color == t;\n};\nexport const hexToRgb = t => {\n  const r = t.replace(/^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i, (t, r, e, o) => `${r}${r}${e}${e}${o}${o}`),\n    e = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(r);\n  if (!e) throw new Error(`Next UI: Unsupported ${t} color.`);\n  return [Number.parseInt(e[1], 16), Number.parseInt(e[2], 16), Number.parseInt(e[3], 16)];\n};\nexport const hexFromString = (t, r = \"\", e = !1) => {\n  const o = t.match(/#[a-fA-F0-9]{6}|#[a-fA-F0-9]{3}$/g);\n  return o && o.length > 0 ? e ? o[o.length - 1] : o : r;\n};\nexport const colorToRgbValues = t => {\n  const r = isCssVar(t) ? getCssVar(t) : t;\n  if (\"#\" === r.charAt(0)) return hexToRgb(r);\n  const e = r.replace(/ /g, \"\"),\n    o = r.substr(0, 4),\n    n = e.match(/\\((.+)\\)/);\n  if (!o.startsWith(\"rgb\") || !n) throw new Error('Next UI: Only support [\"RGB\", \"RGBA\", \"HEX\"] color.');\n  return n[1].split(\",\").map(t => Number.parseFloat(t));\n};\nexport const addColorAlpha = (t, r = 1) => {\n  if (!t) return \"\";\n  const e = isCssVar(t) ? getCssVar(t) : t;\n  if (/#[a-fA-F0-9]{3,6}/g.test(e)) return hexToRGBA(e, r);\n  if (!/^#|rgb|RGB/.test(e)) return e;\n  const [o, n, s] = colorToRgbValues(e);\n  return `rgba(${o}, ${n}, ${s}, ${r > 1 ? 1 : r < 0 ? 0 : r})`;\n};\nfunction e(t, r) {\n  return r = r || 2, (new Array(r).join(\"0\") + t).slice(-r);\n}\nexport const invertHex = (t, r = !0) => {\n  let o = isCssVar(t) ? getCssVar(t) : t;\n  if (0 === o.indexOf(\"#\") && (o = o.slice(1)), 3 === o.length && (o = o[0] + o[0] + o[1] + o[1] + o[2] + o[2]), 6 !== o.length) return t;\n  let n = parseInt(o.slice(0, 2), 16),\n    s = parseInt(o.slice(2, 4), 16),\n    l = parseInt(o.slice(4, 6), 16);\n  return r ? .299 * n + .587 * s + .114 * l > 186 ? \"#000000\" : \"#FFFFFF\" : (n = 255 - n, s = 255 - s, l = 255 - l, \"#\" + e(n.toString(16)) + e(s.toString(16)) + e(l.toString(16)));\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}