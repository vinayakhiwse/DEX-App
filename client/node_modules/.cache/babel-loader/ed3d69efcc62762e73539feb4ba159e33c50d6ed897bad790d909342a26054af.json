{"ast":null,"code":"\"use client\";\n\n// src/use-accordion.ts\nimport { filterDOMProps } from \"@nextui-org/react-utils\";\nimport React, { useCallback } from \"react\";\nimport { useTreeState } from \"@react-stately/tree\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { accordion } from \"@nextui-org/theme\";\nimport { useDOMRef } from \"@nextui-org/react-utils\";\nimport { useMemo, useState } from \"react\";\nimport { useReactAriaAccordion } from \"@nextui-org/use-aria-accordion\";\nfunction useAccordion(props) {\n  const {\n    ref,\n    as,\n    children,\n    className,\n    items,\n    variant,\n    motionProps,\n    expandedKeys,\n    disabledKeys,\n    selectedKeys,\n    defaultExpandedKeys,\n    selectionMode = \"single\",\n    selectionBehavior = \"toggle\",\n    keepContentMounted = false,\n    disallowEmptySelection,\n    defaultSelectedKeys,\n    onExpandedChange,\n    onSelectionChange,\n    dividerProps = {},\n    isCompact = false,\n    isDisabled = false,\n    showDivider = true,\n    hideIndicator = false,\n    disableAnimation = false,\n    disableIndicatorAnimation = false,\n    itemClasses,\n    ...otherProps\n  } = props;\n  const [focusedKey, setFocusedKey] = useState(null);\n  const Component = as || \"div\";\n  const shouldFilterDOMProps = typeof Component === \"string\";\n  const domRef = useDOMRef(ref);\n  const classNames = useMemo(() => accordion({\n    variant,\n    className\n  }), [variant, className]);\n  const treeChildren = useMemo(() => {\n    let treeChildren2 = [];\n    React.Children.map(children, child => {\n      var _a;\n      if (React.isValidElement(child) && typeof ((_a = child.props) == null ? void 0 : _a.children) !== \"string\") {\n        const clonedChild = React.cloneElement(child, {\n          hasChildItems: false\n        });\n        treeChildren2.push(clonedChild);\n      } else {\n        treeChildren2.push(child);\n      }\n    });\n    return treeChildren2;\n  }, [children]);\n  const commonProps = {\n    children: treeChildren,\n    items\n  };\n  const expandableProps = {\n    expandedKeys,\n    defaultExpandedKeys,\n    onExpandedChange\n  };\n  const treeProps = {\n    disabledKeys,\n    selectedKeys,\n    selectionMode,\n    selectionBehavior,\n    disallowEmptySelection,\n    defaultSelectedKeys: defaultSelectedKeys != null ? defaultSelectedKeys : defaultExpandedKeys,\n    onSelectionChange,\n    ...commonProps,\n    ...expandableProps\n  };\n  const state = useTreeState(treeProps);\n  state.selectionManager.setFocusedKey = key => {\n    setFocusedKey(key);\n  };\n  const {\n    accordionProps\n  } = useReactAriaAccordion({\n    ...commonProps,\n    ...expandableProps\n  }, state, domRef);\n  const values = useMemo(() => ({\n    state,\n    focusedKey,\n    motionProps,\n    isCompact,\n    isDisabled,\n    hideIndicator,\n    disableAnimation,\n    keepContentMounted,\n    disableIndicatorAnimation\n  }), [focusedKey, isCompact, isDisabled, hideIndicator, selectedKeys, disableAnimation, keepContentMounted, state == null ? void 0 : state.expandedKeys.values, disableIndicatorAnimation, state.expandedKeys.size, state.disabledKeys.size, motionProps]);\n  const getBaseProps = useCallback((props2 = {}) => {\n    return {\n      ref: domRef,\n      className: classNames,\n      \"data-orientation\": \"vertical\",\n      ...mergeProps(accordionProps, filterDOMProps(otherProps, {\n        enabled: shouldFilterDOMProps\n      }), props2)\n    };\n  }, []);\n  const handleFocusChanged = useCallback((isFocused, key) => {\n    isFocused && setFocusedKey(key);\n  }, []);\n  return {\n    Component,\n    values,\n    state,\n    focusedKey,\n    getBaseProps,\n    isSplitted: variant === \"splitted\",\n    classNames,\n    showDivider,\n    dividerProps,\n    disableAnimation,\n    handleFocusChanged,\n    itemClasses\n  };\n}\nexport { useAccordion };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}