{"ast":null,"code":"\"use client\";\n\nimport { useNavbarContext } from \"./chunk-CLWTNWD4.mjs\";\n\n// src/navbar-menu-toggle.tsx\nimport { useAriaToggleButton } from \"@nextui-org/use-aria-toggle-button\";\nimport { forwardRef } from \"@nextui-org/system\";\nimport { useDOMRef } from \"@nextui-org/react-utils\";\nimport { clsx, dataAttr } from \"@nextui-org/shared-utils\";\nimport { useToggleState } from \"@react-stately/toggle\";\nimport { useFocusRing } from \"@react-aria/focus\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { useHover } from \"@react-aria/interactions\";\nimport { useMemo } from \"react\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar NavbarMenuToggle = forwardRef((props, ref) => {\n  var _a;\n  const {\n    as,\n    icon,\n    className,\n    onChange,\n    autoFocus,\n    srOnlyText: srOnlyTextProp,\n    ...otherProps\n  } = props;\n  const Component = as || \"button\";\n  const domRef = useDOMRef(ref);\n  const {\n    slots,\n    classNames,\n    isMenuOpen,\n    setIsMenuOpen\n  } = useNavbarContext();\n  const handleChange = isOpen => {\n    onChange == null ? void 0 : onChange(isOpen);\n    setIsMenuOpen(isOpen);\n  };\n  const state = useToggleState({\n    ...otherProps,\n    isSelected: isMenuOpen,\n    onChange: handleChange\n  });\n  const {\n    buttonProps,\n    isPressed\n  } = useAriaToggleButton(props, state, domRef);\n  const {\n    isFocusVisible,\n    focusProps\n  } = useFocusRing({\n    autoFocus\n  });\n  const {\n    isHovered,\n    hoverProps\n  } = useHover({});\n  const toggleStyles = clsx(classNames == null ? void 0 : classNames.toggle, className);\n  const child = useMemo(() => {\n    if (typeof icon === \"function\") {\n      return icon(isMenuOpen != null ? isMenuOpen : false);\n    }\n    return icon || /* @__PURE__ */jsx(\"span\", {\n      className: slots.toggleIcon({\n        class: classNames == null ? void 0 : classNames.toggleIcon\n      })\n    });\n  }, [icon, slots.toggleIcon, classNames == null ? void 0 : classNames.toggleIcon]);\n  const srOnlyText = useMemo(() => {\n    if (srOnlyTextProp) {\n      return srOnlyTextProp;\n    }\n    return state.isSelected ? \"close navigation menu\" : \"open navigation menu\";\n  }, [srOnlyTextProp, isMenuOpen]);\n  return /* @__PURE__ */jsxs(Component, {\n    ref: domRef,\n    className: (_a = slots.toggle) == null ? void 0 : _a.call(slots, {\n      class: toggleStyles\n    }),\n    \"data-focus-visible\": dataAttr(isFocusVisible),\n    \"data-hover\": dataAttr(isHovered),\n    \"data-open\": dataAttr(isMenuOpen),\n    \"data-pressed\": dataAttr(isPressed),\n    ...mergeProps(buttonProps, focusProps, hoverProps, otherProps),\n    children: [/* @__PURE__ */jsx(\"span\", {\n      className: slots.srOnly(),\n      children: srOnlyText\n    }), child]\n  });\n});\nNavbarMenuToggle.displayName = \"NextUI.NavbarMenuToggle\";\nvar navbar_menu_toggle_default = NavbarMenuToggle;\nexport { navbar_menu_toggle_default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}