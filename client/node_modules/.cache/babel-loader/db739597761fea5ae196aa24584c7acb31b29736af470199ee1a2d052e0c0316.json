{"ast":null,"code":"\"use client\";\n\n// src/tab.tsx\nimport { forwardRef } from \"@nextui-org/system\";\nimport { useDOMRef, filterDOMProps } from \"@nextui-org/react-utils\";\nimport { clsx, dataAttr } from \"@nextui-org/shared-utils\";\nimport { chain, mergeProps } from \"@react-aria/utils\";\nimport scrollIntoView from \"scroll-into-view-if-needed\";\nimport { useFocusRing } from \"@react-aria/focus\";\nimport { useTab } from \"@react-aria/tabs\";\nimport { useHover } from \"@react-aria/interactions\";\nimport { motion } from \"framer-motion\";\nimport { useIsMounted } from \"@nextui-org/use-is-mounted\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar Tab = forwardRef((props, ref) => {\n  var _a;\n  const {\n    className,\n    as,\n    item,\n    state,\n    classNames,\n    isDisabled: isDisabledProp,\n    listRef,\n    slots,\n    motionProps,\n    disableAnimation,\n    disableCursorAnimation,\n    onClick,\n    ...otherProps\n  } = props;\n  const {\n    key\n  } = item;\n  const domRef = useDOMRef(ref);\n  const Component = as || \"button\";\n  const shouldFilterDOMProps = typeof Component === \"string\";\n  const {\n    tabProps,\n    isSelected,\n    isDisabled: isDisabledItem,\n    isPressed\n  } = useTab({\n    key\n  }, state, domRef);\n  const isDisabled = isDisabledProp || isDisabledItem;\n  const {\n    focusProps,\n    isFocused,\n    isFocusVisible\n  } = useFocusRing();\n  const {\n    hoverProps,\n    isHovered\n  } = useHover({\n    isDisabled\n  });\n  const tabStyles = clsx(classNames == null ? void 0 : classNames.tab, className);\n  const [, isMounted] = useIsMounted({\n    rerender: true\n  });\n  const handleClick = () => {\n    chain(onClick, tabProps.onClick);\n    if (!(domRef == null ? void 0 : domRef.current) || !(listRef == null ? void 0 : listRef.current)) return;\n    scrollIntoView(domRef.current, {\n      scrollMode: \"if-needed\",\n      behavior: \"smooth\",\n      block: \"end\",\n      inline: \"end\",\n      boundary: listRef == null ? void 0 : listRef.current\n    });\n  };\n  return /* @__PURE__ */jsxs(Component, {\n    ref: domRef,\n    \"data-disabled\": dataAttr(isDisabledItem),\n    \"data-focus\": dataAttr(isFocused),\n    \"data-focus-visible\": dataAttr(isFocusVisible),\n    \"data-hover\": dataAttr(isHovered),\n    \"data-hover-unselected\": dataAttr((isHovered || isPressed) && !isSelected),\n    \"data-pressed\": dataAttr(isPressed),\n    \"data-selected\": dataAttr(isSelected),\n    \"data-slot\": \"tab\",\n    ...mergeProps(tabProps, !isDisabled ? {\n      ...focusProps,\n      ...hoverProps\n    } : {}, filterDOMProps(otherProps, {\n      enabled: shouldFilterDOMProps,\n      omitPropNames: /* @__PURE__ */new Set([\"title\"])\n    })),\n    className: (_a = slots.tab) == null ? void 0 : _a.call(slots, {\n      class: tabStyles\n    }),\n    title: otherProps == null ? void 0 : otherProps.titleValue,\n    type: Component === \"button\" ? \"button\" : void 0,\n    onClick: handleClick,\n    children: [isSelected && !disableAnimation && !disableCursorAnimation && isMounted ? /* @__PURE__ */jsx(motion.span, {\n      className: slots.cursor({\n        class: classNames == null ? void 0 : classNames.cursor\n      }),\n      \"data-slot\": \"cursor\",\n      layoutDependency: false,\n      layoutId: \"cursor\",\n      transition: {\n        type: \"spring\",\n        bounce: 0.15,\n        duration: 0.5\n      },\n      ...motionProps\n    }) : null, /* @__PURE__ */jsx(\"div\", {\n      className: slots.tabContent({\n        class: classNames == null ? void 0 : classNames.tabContent\n      }),\n      \"data-slot\": \"tabContent\",\n      children: item.rendered\n    })]\n  });\n});\nTab.displayName = \"NextUI.Tab\";\nvar tab_default = Tab;\nexport { tab_default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}