{"ast":null,"code":"import { AbiDecodingDataSizeTooSmallError, AbiDecodingZeroDataError, InvalidAbiDecodingTypeError } from '../../errors/abi.js';\nimport { checksumAddress } from '../address/getAddress.js';\nimport { size } from '../data/size.js';\nimport { slice } from '../data/slice.js';\nimport { trim } from '../data/trim.js';\nimport { hexToBigInt, hexToBool, hexToNumber, hexToString } from '../encoding/fromHex.js';\nimport { getArrayComponents } from './encodeAbiParameters.js';\nexport function decodeAbiParameters(params, data) {\n  if (data === '0x' && params.length > 0) throw new AbiDecodingZeroDataError();\n  if (size(data) && size(data) < 32) throw new AbiDecodingDataSizeTooSmallError({\n    data,\n    params: params,\n    size: size(data)\n  });\n  return decodeParams({\n    data,\n    params: params\n  });\n}\nfunction decodeParams({\n  data,\n  params\n}) {\n  const decodedValues = [];\n  let position = 0;\n  for (let i = 0; i < params.length; i++) {\n    if (position >= size(data)) throw new AbiDecodingDataSizeTooSmallError({\n      data,\n      params,\n      size: size(data)\n    });\n    const param = params[i];\n    const {\n      consumed,\n      value\n    } = decodeParam({\n      data,\n      param,\n      position\n    });\n    decodedValues.push(value);\n    // Step across the data by the amount of data consumed by this parameter.\n    position += consumed;\n  }\n  return decodedValues;\n}\nfunction decodeParam({\n  data,\n  param,\n  position\n}) {\n  const arrayComponents = getArrayComponents(param.type);\n  if (arrayComponents) {\n    const [length, type] = arrayComponents;\n    return decodeArray(data, {\n      length,\n      param: {\n        ...param,\n        type: type\n      },\n      position\n    });\n  }\n  if (param.type === 'tuple') {\n    return decodeTuple(data, {\n      param: param,\n      position\n    });\n  }\n  if (param.type === 'string') {\n    return decodeString(data, {\n      position\n    });\n  }\n  if (param.type.startsWith('bytes')) {\n    return decodeBytes(data, {\n      param,\n      position\n    });\n  }\n  const value = slice(data, position, position + 32, {\n    strict: true\n  });\n  if (param.type.startsWith('uint') || param.type.startsWith('int')) {\n    return decodeNumber(value, {\n      param\n    });\n  }\n  if (param.type === 'address') {\n    return decodeAddress(value);\n  }\n  if (param.type === 'bool') {\n    return decodeBool(value);\n  }\n  throw new InvalidAbiDecodingTypeError(param.type, {\n    docsPath: '/docs/contract/decodeAbiParameters'\n  });\n}\nfunction decodeAddress(value) {\n  return {\n    consumed: 32,\n    value: checksumAddress(slice(value, -20))\n  };\n}\nfunction decodeArray(data, {\n  param,\n  length,\n  position\n}) {\n  // If the length of the array is not known in advance (dynamic array),\n  // we will need to decode the offset of the array data.\n  if (!length) {\n    // Get the offset of the array data.\n    const offset = hexToNumber(slice(data, position, position + 32, {\n      strict: true\n    }));\n    // Get the length of the array from the offset.\n    const length = hexToNumber(slice(data, offset, offset + 32, {\n      strict: true\n    }));\n    let consumed = 0;\n    const value = [];\n    for (let i = 0; i < length; ++i) {\n      const decodedChild = decodeParam({\n        data: slice(data, offset + 32),\n        param,\n        position: consumed\n      });\n      consumed += decodedChild.consumed;\n      value.push(decodedChild.value);\n    }\n    return {\n      value,\n      consumed: 32\n    };\n  }\n  // If the length of the array is known in advance,\n  // and the length of an element deeply nested in the array is not known,\n  // we need to decode the offset of the array data.\n  if (hasDynamicChild(param)) {\n    // Get the child type of the array.\n    const arrayComponents = getArrayComponents(param.type);\n    // If the child type is not known, the array is dynamic.\n    const dynamicChild = !arrayComponents?.[0];\n    let consumed = 0;\n    const value = [];\n    for (let i = 0; i < length; ++i) {\n      const offset = hexToNumber(slice(data, position, position + 32, {\n        strict: true\n      }));\n      const decodedChild = decodeParam({\n        data: slice(data, offset),\n        param,\n        position: dynamicChild ? consumed : i * 32\n      });\n      consumed += decodedChild.consumed;\n      value.push(decodedChild.value);\n    }\n    return {\n      value,\n      consumed: 32\n    };\n  }\n  // If the length of the array is known in advance,\n  // and the length of each element in the array is known,\n  // the array data is encoded contiguously after the array.\n  let consumed = 0;\n  const value = [];\n  for (let i = 0; i < length; ++i) {\n    const decodedChild = decodeParam({\n      data,\n      param,\n      position: position + consumed\n    });\n    consumed += decodedChild.consumed;\n    value.push(decodedChild.value);\n  }\n  return {\n    value,\n    consumed\n  };\n}\nfunction decodeBool(value) {\n  return {\n    consumed: 32,\n    value: hexToBool(value)\n  };\n}\nfunction decodeBytes(data, {\n  param,\n  position\n}) {\n  const [_, size] = param.type.split('bytes');\n  if (!size) {\n    // If we don't have a size, we're dealing with a dynamic-size array\n    // so we need to read the offset of the data part first.\n    const offset = hexToNumber(slice(data, position, position + 32, {\n      strict: true\n    }));\n    const length = hexToNumber(slice(data, offset, offset + 32, {\n      strict: true\n    }));\n    // If there is no length, we have zero data.\n    if (length === 0) return {\n      consumed: 32,\n      value: '0x'\n    };\n    const value = slice(data, offset + 32, offset + 32 + length, {\n      strict: true\n    });\n    return {\n      consumed: 32,\n      value\n    };\n  }\n  const value = slice(data, position, position + parseInt(size), {\n    strict: true\n  });\n  return {\n    consumed: 32,\n    value\n  };\n}\nfunction decodeNumber(value, {\n  param\n}) {\n  const signed = param.type.startsWith('int');\n  const size = parseInt(param.type.split('int')[1] || '256');\n  return {\n    consumed: 32,\n    value: size > 48 ? hexToBigInt(value, {\n      signed\n    }) : hexToNumber(value, {\n      signed\n    })\n  };\n}\nfunction decodeString(data, {\n  position\n}) {\n  const offset = hexToNumber(slice(data, position, position + 32, {\n    strict: true\n  }));\n  const length = hexToNumber(slice(data, offset, offset + 32, {\n    strict: true\n  }));\n  // If there is no length, we have zero data (empty string).\n  if (length === 0) return {\n    consumed: 32,\n    value: ''\n  };\n  const value = hexToString(trim(slice(data, offset + 32, offset + 32 + length, {\n    strict: true\n  })));\n  return {\n    consumed: 32,\n    value\n  };\n}\nfunction decodeTuple(data, {\n  param,\n  position\n}) {\n  // Tuples can have unnamed components (i.e. they are arrays), so we must\n  // determine whether the tuple is named or unnamed. In the case of a named\n  // tuple, the value will be an object where each property is the name of the\n  // component. In the case of an unnamed tuple, the value will be an array.\n  const hasUnnamedChild = param.components.length === 0 || param.components.some(({\n    name\n  }) => !name);\n  // Initialize the value to an object or an array, depending on whether the\n  // tuple is named or unnamed.\n  const value = hasUnnamedChild ? [] : {};\n  let consumed = 0;\n  // If the tuple has a dynamic child, we must first decode the offset to the\n  // tuple data.\n  if (hasDynamicChild(param)) {\n    const offset = hexToNumber(slice(data, position, position + 32, {\n      strict: true\n    }));\n    // Decode each component of the tuple, starting at the offset.\n    for (let i = 0; i < param.components.length; ++i) {\n      const component = param.components[i];\n      const decodedChild = decodeParam({\n        data: slice(data, offset),\n        param: component,\n        position: consumed\n      });\n      consumed += decodedChild.consumed;\n      value[hasUnnamedChild ? i : component?.name] = decodedChild.value;\n    }\n    return {\n      consumed: 32,\n      value\n    };\n  }\n  // If the tuple has static children, we can just decode each component\n  // in sequence.\n  for (let i = 0; i < param.components.length; ++i) {\n    const component = param.components[i];\n    const decodedChild = decodeParam({\n      data,\n      param: component,\n      position: position + consumed\n    });\n    consumed += decodedChild.consumed;\n    value[hasUnnamedChild ? i : component?.name] = decodedChild.value;\n  }\n  return {\n    consumed,\n    value\n  };\n}\nfunction hasDynamicChild(param) {\n  const {\n    type\n  } = param;\n  if (type === 'string') return true;\n  if (type === 'bytes') return true;\n  if (type.endsWith('[]')) return true;\n  if (type === 'tuple') return param.components?.some(hasDynamicChild);\n  const arrayComponents = getArrayComponents(param.type);\n  if (arrayComponents && hasDynamicChild({\n    ...param,\n    type: arrayComponents[1]\n  })) return true;\n  return false;\n}\n//# sourceMappingURL=decodeAbiParameters.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}