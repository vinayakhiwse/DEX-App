{"ast":null,"code":"\"use client\";\n\n// src/use-card.ts\nimport { card } from \"@nextui-org/theme\";\nimport { useCallback, useMemo } from \"react\";\nimport { chain, mergeProps } from \"@react-aria/utils\";\nimport { useFocusRing } from \"@react-aria/focus\";\nimport { useHover } from \"@react-aria/interactions\";\nimport { useAriaButton } from \"@nextui-org/use-aria-button\";\nimport { mapPropsVariants } from \"@nextui-org/system\";\nimport { clsx, dataAttr } from \"@nextui-org/shared-utils\";\nimport { filterDOMProps } from \"@nextui-org/react-utils\";\nimport { useDOMRef } from \"@nextui-org/react-utils\";\nimport { useRipple } from \"@nextui-org/ripple\";\nfunction useCard(originalProps) {\n  const [props, variantProps] = mapPropsVariants(originalProps, card.variantKeys);\n  const {\n    ref,\n    as,\n    children,\n    disableRipple = false,\n    onClick,\n    onPress,\n    autoFocus,\n    className,\n    classNames,\n    allowTextSelectionOnPress = true,\n    ...otherProps\n  } = props;\n  const domRef = useDOMRef(ref);\n  const Component = as || (originalProps.isPressable ? \"button\" : \"div\");\n  const shouldFilterDOMProps = typeof Component === \"string\";\n  const baseStyles = clsx(classNames == null ? void 0 : classNames.base, className);\n  const {\n    onClick: onRippleClickHandler,\n    onClear: onClearRipple,\n    ripples\n  } = useRipple();\n  const handleClick = e => {\n    if (!originalProps.disableAnimation && !disableRipple && domRef.current) {\n      onRippleClickHandler(e);\n    }\n  };\n  const {\n    buttonProps,\n    isPressed\n  } = useAriaButton({\n    onPress,\n    elementType: as,\n    isDisabled: !originalProps.isPressable,\n    onClick: chain(onClick, handleClick),\n    allowTextSelectionOnPress,\n    ...otherProps\n  }, domRef);\n  const {\n    hoverProps,\n    isHovered\n  } = useHover({\n    isDisabled: !originalProps.isHoverable,\n    ...otherProps\n  });\n  const {\n    isFocusVisible,\n    isFocused,\n    focusProps\n  } = useFocusRing({\n    autoFocus\n  });\n  const slots = useMemo(() => card({\n    ...variantProps\n  }), [...Object.values(variantProps)]);\n  const context = useMemo(() => ({\n    isDisabled: originalProps.isDisabled,\n    isFooterBlurred: originalProps.isFooterBlurred,\n    disableAnimation: originalProps.disableAnimation,\n    fullWidth: originalProps.fullWidth,\n    slots,\n    classNames\n  }), [slots, classNames, originalProps.isDisabled, originalProps.isFooterBlurred, originalProps.disableAnimation, originalProps.fullWidth]);\n  const getCardProps = useCallback((props2 = {}) => {\n    return {\n      ref: domRef,\n      className: slots.base({\n        class: baseStyles\n      }),\n      tabIndex: originalProps.isPressable ? 0 : -1,\n      \"data-hover\": dataAttr(isHovered),\n      \"data-pressed\": dataAttr(isPressed),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-focus-visible\": dataAttr(isFocusVisible),\n      \"data-disabled\": dataAttr(originalProps.isDisabled),\n      ...mergeProps(originalProps.isPressable ? {\n        ...buttonProps,\n        ...focusProps,\n        role: \"button\"\n      } : {}, originalProps.isHoverable ? hoverProps : {}, filterDOMProps(otherProps, {\n        enabled: shouldFilterDOMProps\n      }), filterDOMProps(props2))\n    };\n  }, [domRef, slots, baseStyles, shouldFilterDOMProps, originalProps.isPressable, originalProps.isHoverable, originalProps.isDisabled, isHovered, isPressed, isFocusVisible, buttonProps, focusProps, hoverProps, otherProps]);\n  const getRippleProps = useCallback(() => ({\n    ripples,\n    onClear: onClearRipple\n  }), [ripples, onClearRipple]);\n  return {\n    context,\n    domRef,\n    Component,\n    classNames,\n    children,\n    isHovered,\n    isPressed,\n    isPressable: originalProps.isPressable,\n    isHoverable: originalProps.isHoverable,\n    disableAnimation: originalProps.disableAnimation,\n    disableRipple,\n    handleClick,\n    isFocusVisible,\n    getCardProps,\n    getRippleProps\n  };\n}\nexport { useCard };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}