{"ast":null,"code":"import { BytesSizeMismatchError } from '../errors/abi.js';\nimport { InvalidAddressError } from '../errors/address.js';\nimport { isAddress } from './address/isAddress.js';\nimport { size } from './data/size.js';\nimport { numberToHex } from './encoding/toHex.js';\nimport { bytesRegex, integerRegex } from './regex.js';\nimport { hashDomain } from './signature/hashTypedData.js';\nexport function validateTypedData({\n  domain,\n  message,\n  primaryType,\n  types: types_\n}) {\n  const types = types_;\n  const validateData = (struct, value_) => {\n    for (const param of struct) {\n      const {\n        name,\n        type: type_\n      } = param;\n      const type = type_;\n      const value = value_[name];\n      const integerMatch = type.match(integerRegex);\n      if (integerMatch && (typeof value === 'number' || typeof value === 'bigint')) {\n        const [_type, base, size_] = integerMatch;\n        // If number cannot be cast to a sized hex value, it is out of range\n        // and will throw.\n        numberToHex(value, {\n          signed: base === 'int',\n          size: parseInt(size_) / 8\n        });\n      }\n      if (type === 'address' && typeof value === 'string' && !isAddress(value)) throw new InvalidAddressError({\n        address: value\n      });\n      const bytesMatch = type.match(bytesRegex);\n      if (bytesMatch) {\n        const [_type, size_] = bytesMatch;\n        if (size_ && size(value) !== parseInt(size_)) throw new BytesSizeMismatchError({\n          expectedSize: parseInt(size_),\n          givenSize: size(value)\n        });\n      }\n      const struct = types[type];\n      if (struct) validateData(struct, value);\n    }\n  };\n  // Validate domain types.\n  if (types.EIP712Domain && domain) validateData(types.EIP712Domain, domain);\n  if (primaryType !== 'EIP712Domain') {\n    // Validate message types.\n    const type = types[primaryType];\n    validateData(type, message);\n  }\n}\nexport function getTypesForEIP712Domain({\n  domain\n}) {\n  return [typeof domain?.name === 'string' && {\n    name: 'name',\n    type: 'string'\n  }, domain?.version && {\n    name: 'version',\n    type: 'string'\n  }, typeof domain?.chainId === 'number' && {\n    name: 'chainId',\n    type: 'uint256'\n  }, domain?.verifyingContract && {\n    name: 'verifyingContract',\n    type: 'address'\n  }, domain?.salt && {\n    name: 'salt',\n    type: 'bytes32'\n  }].filter(Boolean);\n}\nexport function domainSeparator({\n  domain\n}) {\n  return hashDomain({\n    domain,\n    types: {\n      EIP712Domain: getTypesForEIP712Domain({\n        domain\n      })\n    }\n  });\n}\n//# sourceMappingURL=typedData.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}