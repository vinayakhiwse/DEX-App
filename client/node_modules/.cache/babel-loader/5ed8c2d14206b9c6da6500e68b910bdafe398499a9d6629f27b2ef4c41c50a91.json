{"ast":null,"code":"export function parseUnits(value, decimals) {\n  let [integer, fraction = '0'] = value.split('.');\n  const negative = integer.startsWith('-');\n  if (negative) integer = integer.slice(1);\n  // trim leading zeros.\n  fraction = fraction.replace(/(0+)$/, '');\n  // round off if the fraction is larger than the number of decimals.\n  if (decimals === 0) {\n    if (Math.round(Number(`.${fraction}`)) === 1) integer = `${BigInt(integer) + 1n}`;\n    fraction = '';\n  } else if (fraction.length > decimals) {\n    const [left, unit, right] = [fraction.slice(0, decimals - 1), fraction.slice(decimals - 1, decimals), fraction.slice(decimals)];\n    const rounded = Math.round(Number(`${unit}.${right}`));\n    if (rounded > 9) fraction = `${BigInt(left) + BigInt(1)}0`.padStart(left.length + 1, '0');else fraction = `${left}${rounded}`;\n    if (fraction.length > decimals) {\n      fraction = fraction.slice(1);\n      integer = `${BigInt(integer) + 1n}`;\n    }\n    fraction = fraction.slice(0, decimals);\n  } else {\n    fraction = fraction.padEnd(decimals, '0');\n  }\n  return BigInt(`${negative ? '-' : ''}${integer}${fraction}`);\n}\n//# sourceMappingURL=parseUnits.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}