{"ast":null,"code":"import { contract, tokenContract } from \"./contract\";\nimport { toEth, toWei } from \"./ether-utils\";\nimport { BigNumber } from \"ethers\";\n\n//here we swapping the Ether into Token.\nexport const swapEthToToken = async (tokenName, amount) => {\n  try {\n    const tx = {\n      value: toWei(amount)\n    };\n    console.log(\"amouunt....\", tx);\n    const contractObj = await contract();\n    const data = await contractObj.swapEthtoToken(tokenName, tx);\n    const receipt = await data.wait();\n    return receipt;\n  } catch (error) {\n    console.log(\"error\", error);\n  }\n};\n\n//here we swapping the token into ether.\nexport const SwapTokenToEth = async (tokenName, amount) => {\n  try {\n    const contractObj = await contract();\n    const data = await contractObj.swapTokentoEth(tokenName, toWei(amount));\n    console.log(\"swapTokenToEth....\", data);\n    const receipt = await data.wait();\n    return receipt;\n  } catch (error) {\n    console.log(\"error\", error);\n  }\n};\n\n//we need to approve tokens approve to be transferred from our account to the contract.\n_c = SwapTokenToEth;\nexport const increaseAllowances = async (tokenName, amount) => {\n  try {\n    const contractObj = await contract();\n    const address = await contractObj.getTokenAddress(tokenName);\n    const tokenContractObj = await tokenContract(address);\n    const data = await tokenContractObj.approve(`0xe0BC862364d91EDB074041c98B8Df99DC6A1558C`, toWei(amount));\n    const receipt = await data.wait();\n    console.log(\"increaseAllowances..\", receipt);\n    return receipt;\n  } catch (error) {\n    console.log(\"error\", error);\n  }\n};\n\n//here we checking valid allowances..\nexport const hasValidAllowance = async (owner, tokenName, amount) => {\n  console.log(\"hasValidAllowamce..\", owner, tokenName, amount);\n  try {\n    const contractObj = await contract();\n    const address = await contractObj.getTokenAddress(tokenName);\n    const tokenContractObj = await tokenContract(address);\n    const data = await tokenContractObj.allowance(owner, `0x766F7F15f33d7A369e538c38bA7CeBC97f777c9e`);\n    console.log(\"datahasValidAllowamce.....\", data);\n    const result = BigNumber.from(data.toString()).gte(BigNumber.from(toWei(amount)));\n    console.log(\"hasvalidallowance..\", result);\n    return result;\n  } catch (error) {\n    console.log(\"error\", error);\n  }\n};\n\n//here we swapping the token to token.\nexport async function swapTokenToToken(srcToken, destToken, amount) {\n  try {\n    const contractObj = await contract();\n    const data = await contractObj.swapTokenToToken(srcToken, destToken, toWei(amount));\n    const receipt = await data.wait();\n    return receipt;\n  } catch (error) {\n    console.log(\"error\", error);\n  }\n}\n\n//here we getting token balance by using address of token and tokenName.\nexport const getTokenBalance = async (tokenName, address) => {\n  const contractObj = await contract();\n  const balance = contractObj.getBalance(tokenName, address);\n  return balance;\n};\n\n//here we getting token address by using tokenName.\nexport async function getTokenAddress(tokenName) {\n  try {\n    const contractObj = await contract();\n    const address = await contractObj.getTokenAddress(tokenName);\n    return address;\n  } catch (e) {\n    return e;\n  }\n}\n\n//here we getting the balance of smart contract here...\n\nexport async function getEthBalnce() {\n  try {\n    const contractObj = await contract();\n    const balance = await contractObj.getEthBalance();\n    console.log(\"baljioikgmk\", balance);\n    const newBalance = toEth(balance.toString());\n    return newBalance;\n  } catch (error) {\n    console.log(error);\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"SwapTokenToEth\");","map":{"version":3,"names":["contract","tokenContract","toEth","toWei","BigNumber","swapEthToToken","tokenName","amount","tx","value","console","log","contractObj","data","swapEthtoToken","receipt","wait","error","SwapTokenToEth","swapTokentoEth","_c","increaseAllowances","address","getTokenAddress","tokenContractObj","approve","hasValidAllowance","owner","allowance","result","from","toString","gte","swapTokenToToken","srcToken","destToken","getTokenBalance","balance","getBalance","e","getEthBalnce","getEthBalance","newBalance","$RefreshReg$"],"sources":["/home/hp/Desktop/client/src/utils/queries.js"],"sourcesContent":["import { contract, tokenContract } from \"./contract\";\nimport { toEth, toWei } from \"./ether-utils\";\nimport { BigNumber } from \"ethers\";\n\n//here we swapping the Ether into Token.\nexport const swapEthToToken = async (tokenName, amount) => {\n  try {\n    const tx = { value: toWei(amount) };\n    console.log(\"amouunt....\", tx);\n    const contractObj = await contract();\n    const data = await contractObj.swapEthtoToken(tokenName, tx);\n    const receipt = await data.wait();\n    return receipt;\n  } catch (error) {\n    console.log(\"error\", error);\n  }\n};\n\n//here we swapping the token into ether.\nexport const SwapTokenToEth = async (tokenName, amount) => {\n  try {\n    const contractObj = await contract();\n    const data = await contractObj.swapTokentoEth(tokenName, toWei(amount));\n    console.log(\"swapTokenToEth....\", data);\n    const receipt = await data.wait();\n    return receipt;\n  } catch (error) {\n    console.log(\"error\", error);\n  }\n};\n\n//we need to approve tokens approve to be transferred from our account to the contract.\nexport const increaseAllowances = async (tokenName, amount) => {\n  try {\n    const contractObj = await contract();\n    const address = await contractObj.getTokenAddress(tokenName);\n    const tokenContractObj = await tokenContract(address);\n    const data = await tokenContractObj.approve(\n      `0xe0BC862364d91EDB074041c98B8Df99DC6A1558C`,\n      toWei(amount)\n    );\n    const receipt = await data.wait();\n    console.log(\"increaseAllowances..\", receipt);\n    return receipt;\n  } catch (error) {\n    console.log(\"error\", error);\n  }\n};\n\n//here we checking valid allowances..\nexport const hasValidAllowance = async (owner, tokenName, amount) => {\n  console.log(\"hasValidAllowamce..\", owner, tokenName, amount);\n  try {\n    const contractObj = await contract();\n    const address = await contractObj.getTokenAddress(tokenName);\n    const tokenContractObj = await tokenContract(address);\n    const data = await tokenContractObj.allowance(\n      owner,\n      `0x766F7F15f33d7A369e538c38bA7CeBC97f777c9e`\n    );\n    console.log(\"datahasValidAllowamce.....\", data);\n    const result = BigNumber.from(data.toString()).gte(\n      BigNumber.from(toWei(amount))\n    );\n    console.log(\"hasvalidallowance..\", result);\n    return result;\n  } catch (error) {\n    console.log(\"error\", error);\n  }\n};\n\n//here we swapping the token to token.\nexport async function swapTokenToToken(srcToken, destToken, amount) {\n  try {\n    const contractObj = await contract();\n    const data = await contractObj.swapTokenToToken(\n      srcToken,\n      destToken,\n      toWei(amount)\n    );\n\n    const receipt = await data.wait();\n    return receipt;\n  } catch (error) {\n    console.log(\"error\", error);\n  }\n}\n\n//here we getting token balance by using address of token and tokenName.\nexport const getTokenBalance = async (tokenName, address) => {\n  const contractObj = await contract();\n  const balance = contractObj.getBalance(tokenName, address);\n  return balance;\n};\n\n//here we getting token address by using tokenName.\nexport async function getTokenAddress(tokenName) {\n  try {\n    const contractObj = await contract();\n    const address = await contractObj.getTokenAddress(tokenName);\n    return address;\n  } catch (e) {\n    return e;\n  }\n}\n\n//here we getting the balance of smart contract here...\n\nexport async function getEthBalnce() {\n  try {\n    const contractObj = await contract();\n    const balance = await contractObj.getEthBalance();\n    console.log(\"baljioikgmk\", balance);\n    const newBalance = toEth(balance.toString());\n    return newBalance;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}