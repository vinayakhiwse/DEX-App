{"ast":null,"code":"import $iFADg$react, { useContext as $iFADg$useContext, useState as $iFADg$useState, useEffect as $iFADg$useEffect, useMemo as $iFADg$useMemo, useCallback as $iFADg$useCallback, useRef as $iFADg$useRef } from \"react\";\nimport { useIsSSR as $iFADg$useIsSSR } from \"@react-aria/ssr\";\nimport { MessageDictionary as $iFADg$MessageDictionary, MessageFormatter as $iFADg$MessageFormatter } from \"@internationalized/message\";\nimport { DateFormatter as $iFADg$DateFormatter } from \"@internationalized/date\";\nimport { NumberFormatter as $iFADg$NumberFormatter } from \"@internationalized/number\";\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\nvar $18f2051aff69b9bf$exports = {};\n$parcel$export($18f2051aff69b9bf$exports, \"I18nProvider\", () => $18f2051aff69b9bf$export$a54013f0d02a8f82);\n$parcel$export($18f2051aff69b9bf$exports, \"useLocale\", () => $18f2051aff69b9bf$export$43bb16f9c6d9e3f7);\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // https://en.wikipedia.org/wiki/Right-to-left\nconst $148a7a147e38ea7f$var$RTL_SCRIPTS = new Set(['Arab', 'Syrc', 'Samr', 'Mand', 'Thaa', 'Mend', 'Nkoo', 'Adlm', 'Rohg', 'Hebr']);\nconst $148a7a147e38ea7f$var$RTL_LANGS = new Set(['ae', 'ar', 'arc', 'bcc', 'bqi', 'ckb', 'dv', 'fa', 'glk', 'he', 'ku', 'mzn', 'nqo', 'pnb', 'ps', 'sd', 'ug', 'ur', 'yi']);\nfunction $148a7a147e38ea7f$export$702d680b21cbd764(locale) {\n  // If the Intl.Locale API is available, use it to get the script for the locale.\n  // This is more accurate than guessing by language, since languages can be written in multiple scripts.\n  // @ts-ignore\n  if (Intl.Locale) {\n    // @ts-ignore\n    let script = new Intl.Locale(locale).maximize().script;\n    return $148a7a147e38ea7f$var$RTL_SCRIPTS.has(script);\n  }\n  // If not, just guess by the language (first part of the locale)\n  let lang = locale.split('-')[0];\n  return $148a7a147e38ea7f$var$RTL_LANGS.has(lang);\n}\nfunction $1e5a04cdaf7d1af8$export$f09106e7c6677ec5() {\n  // @ts-ignore\n  let locale = typeof navigator !== 'undefined' && (navigator.language || navigator.userLanguage) || 'en-US';\n  try {\n    // @ts-ignore\n    Intl.DateTimeFormat.supportedLocalesOf([locale]);\n  } catch (_err) {\n    locale = 'en-US';\n  }\n  return {\n    locale: locale,\n    direction: $148a7a147e38ea7f$export$702d680b21cbd764(locale) ? 'rtl' : 'ltr'\n  };\n}\nlet $1e5a04cdaf7d1af8$var$currentLocale = $1e5a04cdaf7d1af8$export$f09106e7c6677ec5();\nlet $1e5a04cdaf7d1af8$var$listeners = new Set();\nfunction $1e5a04cdaf7d1af8$var$updateLocale() {\n  $1e5a04cdaf7d1af8$var$currentLocale = $1e5a04cdaf7d1af8$export$f09106e7c6677ec5();\n  for (let listener of $1e5a04cdaf7d1af8$var$listeners) listener($1e5a04cdaf7d1af8$var$currentLocale);\n}\nfunction $1e5a04cdaf7d1af8$export$188ec29ebc2bdc3a() {\n  let isSSR = $iFADg$useIsSSR();\n  let [defaultLocale, setDefaultLocale] = $iFADg$useState($1e5a04cdaf7d1af8$var$currentLocale);\n  $iFADg$useEffect(() => {\n    if ($1e5a04cdaf7d1af8$var$listeners.size === 0) window.addEventListener('languagechange', $1e5a04cdaf7d1af8$var$updateLocale);\n    $1e5a04cdaf7d1af8$var$listeners.add(setDefaultLocale);\n    return () => {\n      $1e5a04cdaf7d1af8$var$listeners.delete(setDefaultLocale);\n      if ($1e5a04cdaf7d1af8$var$listeners.size === 0) window.removeEventListener('languagechange', $1e5a04cdaf7d1af8$var$updateLocale);\n    };\n  }, []);\n  // We cannot determine the browser's language on the server, so default to\n  // en-US. This will be updated after hydration on the client to the correct value.\n  if (isSSR) return {\n    locale: 'en-US',\n    direction: 'ltr'\n  };\n  return defaultLocale;\n}\nconst $18f2051aff69b9bf$var$I18nContext = /*#__PURE__*/$iFADg$react.createContext(null);\nfunction $18f2051aff69b9bf$export$a54013f0d02a8f82(props) {\n  let {\n    locale: locale,\n    children: children\n  } = props;\n  let defaultLocale = $1e5a04cdaf7d1af8$export$188ec29ebc2bdc3a();\n  let value = locale ? {\n    locale: locale,\n    direction: $148a7a147e38ea7f$export$702d680b21cbd764(locale) ? 'rtl' : 'ltr'\n  } : defaultLocale;\n  return /*#__PURE__*/$iFADg$react.createElement($18f2051aff69b9bf$var$I18nContext.Provider, {\n    value: value\n  }, children);\n}\nfunction $18f2051aff69b9bf$export$43bb16f9c6d9e3f7() {\n  let defaultLocale = $1e5a04cdaf7d1af8$export$188ec29ebc2bdc3a();\n  let context = $iFADg$useContext($18f2051aff69b9bf$var$I18nContext);\n  return context || defaultLocale;\n}\nvar $321bc95feeb923dd$exports = {};\n$parcel$export($321bc95feeb923dd$exports, \"useMessageFormatter\", () => $321bc95feeb923dd$export$ec23bf898b1eed85);\nconst $321bc95feeb923dd$var$cache = new WeakMap();\nfunction $321bc95feeb923dd$var$getCachedDictionary(strings) {\n  let dictionary = $321bc95feeb923dd$var$cache.get(strings);\n  if (!dictionary) {\n    dictionary = new $iFADg$MessageDictionary(strings);\n    $321bc95feeb923dd$var$cache.set(strings, dictionary);\n  }\n  return dictionary;\n}\nfunction $321bc95feeb923dd$export$ec23bf898b1eed85(strings) {\n  let {\n    locale: locale\n  } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();\n  let dictionary = $iFADg$useMemo(() => $321bc95feeb923dd$var$getCachedDictionary(strings), [strings]);\n  let formatter = $iFADg$useMemo(() => new $iFADg$MessageFormatter(locale, dictionary), [locale, dictionary]);\n  return $iFADg$useCallback((key, variables) => formatter.format(key, variables), [formatter]);\n}\nvar $896ba0a80a8f4d36$exports = {};\n$parcel$export($896ba0a80a8f4d36$exports, \"useDateFormatter\", () => $896ba0a80a8f4d36$export$85fd5fdf27bacc79);\nfunction $896ba0a80a8f4d36$export$85fd5fdf27bacc79(options) {\n  // Reuse last options object if it is shallowly equal, which allows the useMemo result to also be reused.\n  let lastOptions = $iFADg$useRef(null);\n  if (options && lastOptions.current && $896ba0a80a8f4d36$var$isEqual(options, lastOptions.current)) options = lastOptions.current;\n  lastOptions.current = options;\n  let {\n    locale: locale\n  } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();\n  return $iFADg$useMemo(() => new $iFADg$DateFormatter(locale, options), [locale, options]);\n}\nfunction $896ba0a80a8f4d36$var$isEqual(a, b) {\n  if (a === b) return true;\n  let aKeys = Object.keys(a);\n  let bKeys = Object.keys(b);\n  if (aKeys.length !== bKeys.length) return false;\n  for (let key of aKeys) {\n    if (b[key] !== a[key]) return false;\n  }\n  return true;\n}\nvar $a916eb452884faea$exports = {};\n$parcel$export($a916eb452884faea$exports, \"useNumberFormatter\", () => $a916eb452884faea$export$b7a616150fdb9f44);\nfunction $a916eb452884faea$export$b7a616150fdb9f44(options = {}) {\n  let {\n    locale: locale\n  } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();\n  return $iFADg$useMemo(() => new $iFADg$NumberFormatter(locale, options), [locale, options]);\n}\nvar $325a3faab7a68acd$exports = {};\n$parcel$export($325a3faab7a68acd$exports, \"useCollator\", () => $325a3faab7a68acd$export$a16aca283550c30d);\nlet $325a3faab7a68acd$var$cache = new Map();\nfunction $325a3faab7a68acd$export$a16aca283550c30d(options) {\n  let {\n    locale: locale\n  } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');\n  if ($325a3faab7a68acd$var$cache.has(cacheKey)) return $325a3faab7a68acd$var$cache.get(cacheKey);\n  let formatter = new Intl.Collator(locale, options);\n  $325a3faab7a68acd$var$cache.set(cacheKey, formatter);\n  return formatter;\n}\nvar $bb77f239b46e8c72$exports = {};\n$parcel$export($bb77f239b46e8c72$exports, \"useFilter\", () => $bb77f239b46e8c72$export$3274cf84b703fff);\nfunction $bb77f239b46e8c72$export$3274cf84b703fff(options) {\n  let collator = $325a3faab7a68acd$export$a16aca283550c30d({\n    usage: 'search',\n    ...options\n  });\n  // TODO(later): these methods don't currently support the ignorePunctuation option.\n  return {\n    startsWith(string, substring) {\n      if (substring.length === 0) return true;\n      // Normalize both strings so we can slice safely\n      // TODO: take into account the ignorePunctuation option as well...\n      string = string.normalize('NFC');\n      substring = substring.normalize('NFC');\n      return collator.compare(string.slice(0, substring.length), substring) === 0;\n    },\n    endsWith(string, substring) {\n      if (substring.length === 0) return true;\n      string = string.normalize('NFC');\n      substring = substring.normalize('NFC');\n      return collator.compare(string.slice(-substring.length), substring) === 0;\n    },\n    contains(string, substring) {\n      if (substring.length === 0) return true;\n      string = string.normalize('NFC');\n      substring = substring.normalize('NFC');\n      let scan = 0;\n      let sliceLen = substring.length;\n      for (; scan + sliceLen <= string.length; scan++) {\n        let slice = string.slice(scan, scan + sliceLen);\n        if (collator.compare(substring, slice) === 0) return true;\n      }\n      return false;\n    }\n  };\n}\nexport { $18f2051aff69b9bf$export$a54013f0d02a8f82 as I18nProvider, $18f2051aff69b9bf$export$43bb16f9c6d9e3f7 as useLocale, $321bc95feeb923dd$export$ec23bf898b1eed85 as useMessageFormatter, $896ba0a80a8f4d36$export$85fd5fdf27bacc79 as useDateFormatter, $a916eb452884faea$export$b7a616150fdb9f44 as useNumberFormatter, $325a3faab7a68acd$export$a16aca283550c30d as useCollator, $bb77f239b46e8c72$export$3274cf84b703fff as useFilter };\n//# sourceMappingURL=module.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}