{"ast":null,"code":"import a, { useMemo as t, useState as r, useRef as s, useEffect as e } from \"react\";\nimport { useFocusRing as o } from \"@react-aria/focus\";\nimport { mergeProps as i } from \"@react-aria/utils\";\nimport { useDOMRef as n } from \"../utils/dom\";\nimport { __DEV__ as l } from \"../utils/assertion\";\nimport c from \"./avatar.styles\";\nimport m from \"../utils/clsx\";\nimport { jsx as u } from \"react/jsx-runtime\";\nimport { jsxs as p } from \"react/jsx-runtime\";\nconst v = a => (null == a ? void 0 : a.length) <= 4 ? a : null == a ? void 0 : a.slice(0, 3);\nexport const Avatar = a.forwardRef((a, l) => {\n  const {\n      as: x,\n      src: d,\n      css: f,\n      text: N,\n      icon: g,\n      alt: b,\n      className: y,\n      ...A\n    } = a,\n    h = n(l),\n    j = !d,\n    [F, V] = r(!1),\n    w = s(null),\n    {\n      isFocusVisible: I,\n      focusProps: L\n    } = o();\n  e(() => {\n    var a;\n    (null == w || null == (a = w.current) ? void 0 : a.complete) && V(!0);\n  }, []);\n  const P = t(() => !F && d ? \"loading\" : \"ready\", [d, F]);\n  return p(c, {\n    ref: h,\n    as: x,\n    ...i(A, L),\n    className: m({\n      \"only-text-avatar\": j\n    }, y),\n    \"data-state\": P,\n    isFocusVisible: I,\n    css: i(\"button\" === x ? {\n      appearance: \"none\",\n      outline: \"none\",\n      border: \"none\",\n      cursor: \"pointer\"\n    } : {}, f),\n    children: [u(\"span\", {\n      className: \"nextui-avatar-bg\"\n    }), !j && u(\"img\", {\n      ref: w,\n      className: m(\"nextui-avatar-img\", `nextui-avatar--${P}`, {\n        \"nextui-avatar-ready\": F\n      }),\n      src: d,\n      alt: b,\n      \"data-state\": P,\n      onLoad: () => V(!0)\n    }), j && !g && N && u(\"span\", {\n      className: \"nextui-avatar-text\",\n      children: v(N)\n    }), g && u(\"span\", {\n      className: \"nextui-avatar-icon\",\n      children: g\n    })]\n  });\n});\nl && (Avatar.displayName = \"NextUI.Avatar\"), Avatar.toString = () => \".nextui-avatar\";\nexport default Avatar;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}