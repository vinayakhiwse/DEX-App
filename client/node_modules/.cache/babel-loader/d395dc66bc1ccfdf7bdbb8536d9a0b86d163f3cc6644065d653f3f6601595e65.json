{"ast":null,"code":"\"use client\";\n\n// src/use-progress.ts\nimport { mapPropsVariants } from \"@nextui-org/system\";\nimport { progress } from \"@nextui-org/theme\";\nimport { useDOMRef } from \"@nextui-org/react-utils\";\nimport { clampPercentage, clsx, dataAttr } from \"@nextui-org/shared-utils\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { useMemo, useCallback } from \"react\";\nimport { useIsMounted } from \"@nextui-org/use-is-mounted\";\nimport { useProgressBar as useAriaProgress } from \"@react-aria/progress\";\nfunction useProgress(originalProps) {\n  const [props, variantProps] = mapPropsVariants(originalProps, progress.variantKeys);\n  const {\n    ref,\n    as,\n    id,\n    className,\n    classNames,\n    label,\n    valueLabel,\n    value = 0,\n    minValue = 0,\n    maxValue = 100,\n    showValueLabel = false,\n    formatOptions = {\n      style: \"percent\"\n    },\n    ...otherProps\n  } = props;\n  const Component = as || \"div\";\n  const domRef = useDOMRef(ref);\n  const baseStyles = clsx(classNames == null ? void 0 : classNames.base, className);\n  const [, isMounted] = useIsMounted({\n    rerender: true,\n    delay: 100\n  });\n  const isIndeterminate = originalProps.isIndeterminate;\n  const {\n    progressBarProps,\n    labelProps\n  } = useAriaProgress({\n    id,\n    label,\n    value,\n    minValue,\n    maxValue,\n    valueLabel,\n    formatOptions,\n    isIndeterminate,\n    \"aria-labelledby\": originalProps[\"aria-labelledby\"],\n    \"aria-label\": originalProps[\"aria-label\"]\n  });\n  const slots = useMemo(() => progress({\n    ...variantProps\n  }), [...Object.values(variantProps)]);\n  const selfMounted = originalProps.disableAnimation ? true : isMounted;\n  const percentage = useMemo(() => isIndeterminate || !selfMounted ? void 0 : clampPercentage((value - minValue) / (maxValue - minValue) * 100), [selfMounted, isIndeterminate, value, minValue, maxValue]);\n  const getProgressBarProps = useCallback((props2 = {}) => ({\n    ref: domRef,\n    \"data-indeterminate\": dataAttr(isIndeterminate),\n    \"data-disabled\": dataAttr(originalProps.isDisabled),\n    className: slots.base({\n      class: baseStyles\n    }),\n    ...mergeProps(progressBarProps, otherProps, props2)\n  }), [domRef, slots, isIndeterminate, originalProps.isDisabled, baseStyles, progressBarProps, otherProps]);\n  const getLabelProps = useCallback((props2 = {}) => ({\n    className: slots.label({\n      class: classNames == null ? void 0 : classNames.label\n    }),\n    ...mergeProps(labelProps, props2)\n  }), [slots, classNames, labelProps]);\n  return {\n    Component,\n    domRef,\n    slots,\n    classNames,\n    label,\n    percentage,\n    showValueLabel,\n    getProgressBarProps,\n    getLabelProps\n  };\n}\nexport { useProgress };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}