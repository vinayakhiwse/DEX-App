{"ast":null,"code":"// src/index.ts\nimport { useEffect } from \"react\";\nfunction useDataScrollOverflow(props = {}) {\n  const {\n    domRef,\n    isEnabled = true,\n    overflowCheck = \"vertical\",\n    offset = 0\n  } = props;\n  useEffect(() => {\n    const el = domRef == null ? void 0 : domRef.current;\n    const checkOverflow = () => {\n      if (!el) return;\n      if (overflowCheck === \"vertical\" || overflowCheck === \"both\") {\n        const hasElementsAbove = el.scrollTop > offset;\n        const hasElementsBelow = el.scrollTop + el.clientHeight + offset < el.scrollHeight;\n        if (hasElementsAbove && hasElementsBelow) {\n          el.dataset.topBottomScroll = \"true\";\n          el.removeAttribute(\"data-top-scroll\");\n          el.removeAttribute(\"data-bottom-scroll\");\n        } else {\n          el.dataset.topScroll = hasElementsAbove.toString();\n          el.dataset.bottomScroll = hasElementsBelow.toString();\n          el.removeAttribute(\"data-top-bottom-scroll\");\n        }\n      }\n      if (overflowCheck === \"horizontal\" || overflowCheck === \"both\") {\n        const hasElementsLeft = el.scrollLeft > offset;\n        const hasElementsRight = el.scrollLeft + el.clientWidth + offset < el.scrollWidth;\n        if (hasElementsLeft && hasElementsRight) {\n          el.dataset.leftRightScroll = \"true\";\n          el.removeAttribute(\"data-left-scroll\");\n          el.removeAttribute(\"data-right-scroll\");\n        } else {\n          el.dataset.leftScroll = hasElementsLeft.toString();\n          el.dataset.rightScroll = hasElementsRight.toString();\n          el.removeAttribute(\"data-left-right-scroll\");\n        }\n      }\n    };\n    const clearOverflow = () => {\n      if (!el) return;\n      el.removeAttribute(\"data-top-scroll\");\n      el.removeAttribute(\"data-bottom-scroll\");\n      el.removeAttribute(\"data-top-bottom-scroll\");\n      el.removeAttribute(\"data-left-scroll\");\n      el.removeAttribute(\"data-right-scroll\");\n      el.removeAttribute(\"data-left-right-scroll\");\n    };\n    if (isEnabled) {\n      checkOverflow();\n      el == null ? void 0 : el.addEventListener(\"scroll\", checkOverflow);\n    } else {\n      clearOverflow();\n    }\n    return () => {\n      el == null ? void 0 : el.removeEventListener(\"scroll\", checkOverflow);\n      clearOverflow();\n    };\n  }, [isEnabled, overflowCheck, domRef]);\n}\nexport { useDataScrollOverflow };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}