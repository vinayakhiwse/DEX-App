{"ast":null,"code":"import e, { useEffect as l, useState as t } from \"react\";\nimport r from \"./with-defaults\";\nimport i from \"./clsx\";\nexport default r(({\n  children: r,\n  childrenRef: n,\n  className: a,\n  visible: m,\n  enterTime: s,\n  leaveTime: c,\n  clearTime: o,\n  name: u,\n  onExited: T,\n  onEntered: d,\n  ...f\n}) => {\n  const [p, v] = t(\"\"),\n    [N, $] = t(m);\n  return l(() => {\n    const e = m ? \"enter\" : \"leave\",\n      l = m ? s : c;\n    m && !N && $(!0), v(`${u}-${e}`);\n    const t = setTimeout(() => {\n        v(`${u}-${e} ${u}-${e}-active`), \"leave\" === e ? null == T || T() : null == d || d(), clearTimeout(t);\n      }, l),\n      r = setTimeout(() => {\n        m || (v(\"\"), $(!1)), clearTimeout(r);\n      }, l + o);\n    return () => {\n      clearTimeout(t), clearTimeout(r);\n    };\n  }, [m, N]), l(() => {\n    if (null == n || !n.current) return;\n    const e = p.split(\" \"),\n      l = n.current.className.split(\" \").filter(e => !e.includes(u));\n    n.current.className = i(l, e);\n  }, [n, p]), e.isValidElement(r) && N ? e.cloneElement(r, {\n    ...f,\n    className: i(r.props.className, a, null != n && n.current ? \"\" : p)\n  }) : null;\n}, {\n  visible: !1,\n  enterTime: 60,\n  leaveTime: 60,\n  clearTime: 60,\n  className: \"\",\n  name: \"transition\"\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}