{"ast":null,"code":"// src/use-badge.ts\nimport { badge } from \"@nextui-org/theme\";\nimport { mapPropsVariants } from \"@nextui-org/system-rsc\";\nimport { clsx } from \"@nextui-org/shared-utils\";\nimport { useMemo } from \"react\";\nfunction useBadge(originalProps) {\n  const [props, variantProps] = mapPropsVariants(originalProps, badge.variantKeys);\n  const {\n    as,\n    children,\n    className,\n    content,\n    classNames,\n    ...otherProps\n  } = props;\n  const Component = as || \"span\";\n  const isOneChar = useMemo(() => {\n    var _a;\n    return ((_a = String(content)) == null ? void 0 : _a.length) === 1 || (originalProps == null ? void 0 : originalProps.isOneChar);\n  }, [content, originalProps == null ? void 0 : originalProps.isOneChar]);\n  const isDot = useMemo(() => {\n    var _a;\n    return ((_a = String(content)) == null ? void 0 : _a.length) === 0;\n  }, [content]);\n  const baseStyles = clsx(classNames == null ? void 0 : classNames.badge, className);\n  const slots = useMemo(() => badge({\n    ...variantProps,\n    isOneChar,\n    isDot\n  }), [...Object.values(variantProps), isOneChar, isDot]);\n  const getBadgeProps = () => {\n    return {\n      className: slots.badge({\n        class: baseStyles\n      }),\n      \"data-invisible\": originalProps.isInvisible,\n      ...otherProps\n    };\n  };\n  return {\n    Component,\n    children,\n    content,\n    slots,\n    classNames,\n    disableAnimation: originalProps == null ? void 0 : originalProps.disableAnimation,\n    isInvisible: originalProps == null ? void 0 : originalProps.isInvisible,\n    getBadgeProps\n  };\n}\nexport { useBadge };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}