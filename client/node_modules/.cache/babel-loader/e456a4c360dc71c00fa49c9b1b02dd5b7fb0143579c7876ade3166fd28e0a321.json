{"ast":null,"code":"// @ts-ignore - TODO: TypeScript throws an error during CJS compilation here. Need to look into just rolling our own isomorphic-ws.\nimport WebSocket from 'isomorphic-ws';\nimport { HttpRequestError, TimeoutError, WebSocketRequestError } from '../errors/request.js';\nimport { createBatchScheduler } from './promise/createBatchScheduler.js';\nimport { withTimeout } from './promise/withTimeout.js';\nimport { stringify } from './stringify.js';\nlet id = 0;\nasync function http(url, {\n  body,\n  fetchOptions = {},\n  timeout = 10000\n}) {\n  const {\n    headers,\n    method,\n    signal: signal_\n  } = fetchOptions;\n  try {\n    const response = await withTimeout(async ({\n      signal\n    }) => {\n      const response = await fetch(url, {\n        ...fetchOptions,\n        body: Array.isArray(body) ? stringify(body.map(body => ({\n          jsonrpc: '2.0',\n          id: body.id ?? id++,\n          ...body\n        }))) : stringify({\n          jsonrpc: '2.0',\n          id: body.id ?? id++,\n          ...body\n        }),\n        headers: {\n          ...headers,\n          'Content-Type': 'application/json'\n        },\n        method: method || 'POST',\n        signal: signal_ || (timeout > 0 ? signal : undefined)\n      });\n      return response;\n    }, {\n      errorInstance: new TimeoutError({\n        body,\n        url\n      }),\n      timeout,\n      signal: true\n    });\n    let data;\n    if (response.headers.get('Content-Type')?.startsWith('application/json')) {\n      data = await response.json();\n    } else {\n      data = await response.text();\n    }\n    if (!response.ok) {\n      throw new HttpRequestError({\n        body,\n        details: stringify(data.error) || response.statusText,\n        headers: response.headers,\n        status: response.status,\n        url\n      });\n    }\n    return data;\n  } catch (err) {\n    if (err instanceof HttpRequestError) throw err;\n    if (err instanceof TimeoutError) throw err;\n    throw new HttpRequestError({\n      body,\n      details: err.message,\n      url\n    });\n  }\n}\nexport const socketsCache = /*#__PURE__*/new Map();\nexport async function getSocket(url) {\n  let socket = socketsCache.get(url);\n  // If the socket already exists, return it.\n  if (socket) return socket;\n  const {\n    schedule\n  } = createBatchScheduler({\n    id: url,\n    fn: async () => {\n      let WebSocket_ = WebSocket;\n      if (!WebSocket.constructor) WebSocket_ = WebSocket.WebSocket;\n      const webSocket = new WebSocket_(url);\n      // Set up a cache for incoming \"synchronous\" requests.\n      const requests = new Map();\n      // Set up a cache for subscriptions (eth_subscribe).\n      const subscriptions = new Map();\n      const onMessage = ({\n        data\n      }) => {\n        const message = JSON.parse(data);\n        const isSubscription = message.method === 'eth_subscription';\n        const id = isSubscription ? message.params.subscription : message.id;\n        const cache = isSubscription ? subscriptions : requests;\n        const callback = cache.get(id);\n        if (callback) callback({\n          data\n        });\n        if (!isSubscription) cache.delete(id);\n      };\n      const onClose = () => {\n        socketsCache.delete(url);\n        webSocket.removeEventListener('close', onClose);\n        webSocket.removeEventListener('message', onMessage);\n      };\n      // Setup event listeners for RPC & subscription responses.\n      webSocket.addEventListener('close', onClose);\n      webSocket.addEventListener('message', onMessage);\n      // Wait for the socket to open.\n      if (webSocket.readyState === WebSocket.CONNECTING) {\n        await new Promise((resolve, reject) => {\n          if (!webSocket) return;\n          webSocket.onopen = resolve;\n          webSocket.onerror = reject;\n        });\n      }\n      // Create a new socket instance.\n      socket = Object.assign(webSocket, {\n        requests,\n        subscriptions\n      });\n      socketsCache.set(url, socket);\n      return [socket];\n    }\n  });\n  const [_, [socket_]] = await schedule();\n  return socket_;\n}\nfunction webSocket(socket, {\n  body,\n  onResponse\n}) {\n  if (socket.readyState === socket.CLOSED || socket.readyState === socket.CLOSING) throw new WebSocketRequestError({\n    body,\n    url: socket.url,\n    details: 'Socket is closed.'\n  });\n  const id_ = id++;\n  const callback = ({\n    data\n  }) => {\n    const message = JSON.parse(data);\n    if (typeof message.id === 'number' && id_ !== message.id) return;\n    onResponse?.(message);\n    // If we are subscribing to a topic, we want to set up a listener for incoming\n    // messages.\n    if (body.method === 'eth_subscribe' && typeof message.result === 'string') {\n      socket.subscriptions.set(message.result, callback);\n    }\n    // If we are unsubscribing from a topic, we want to remove the listener.\n    if (body.method === 'eth_unsubscribe') {\n      socket.subscriptions.delete(body.params?.[0]);\n    }\n  };\n  socket.requests.set(id_, callback);\n  socket.send(JSON.stringify({\n    jsonrpc: '2.0',\n    ...body,\n    id: id_\n  }));\n  return socket;\n}\nasync function webSocketAsync(socket, {\n  body,\n  timeout = 10000\n}) {\n  return withTimeout(() => new Promise(onResponse => rpc.webSocket(socket, {\n    body,\n    onResponse\n  })), {\n    errorInstance: new TimeoutError({\n      body,\n      url: socket.url\n    }),\n    timeout\n  });\n}\n///////////////////////////////////////////////////\nexport const rpc = {\n  http,\n  webSocket,\n  webSocketAsync\n};\n//# sourceMappingURL=rpc.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}