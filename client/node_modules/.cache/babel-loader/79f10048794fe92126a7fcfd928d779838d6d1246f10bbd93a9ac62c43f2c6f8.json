{"ast":null,"code":"import l, { useMemo as e } from \"react\";\nimport { StyledBaseTableCell as o, StyledTableLoadingRow as t } from \"./table.styles\";\nimport { mergeProps as r } from \"@react-aria/utils\";\nimport i from \"./table-row-group\";\nimport n from \"./table-row\";\nimport a from \"./table-cell\";\nimport s from \"./table-checkbox-cell\";\nimport { useTableContext as d } from \"./table-context\";\nimport { isInfinityScroll as c } from \"./utils\";\nimport { Loading as u } from \"../index\";\nimport m from \"../utils/clsx\";\nimport { jsx as p } from \"react/jsx-runtime\";\nimport { jsxs as h } from \"react/jsx-runtime\";\nconst b = ({\n  children: l,\n  collection: b,\n  state: y,\n  animated: g,\n  color: x,\n  hasPagination: f,\n  hideLoading: v,\n  ...S\n}) => {\n  var N, w, C, j, k, H;\n  const {\n      currentPage: P,\n      rowsPerPage: B\n    } = d(),\n    E = e(() => c(b), [b.body.props]),\n    L = \"loading\" === (null == (N = b.body) || null == (w = N.props) ? void 0 : w.loadingState) || \"loadingMore\" === (null == (C = b.body) || null == (j = C.props) ? void 0 : j.loadingState),\n    M = e(() => {\n      const l = [...b.body.childNodes];\n      return f ? null == l ? void 0 : l.slice((P - 1) * B, P * B) : l;\n    }, [f, b, P, B]),\n    A = e(() => {\n      const l = M.length;\n      return l >= B && !E ? null : p(\"tr\", {\n        role: \"row\",\n        className: \"nextui-table-hidden-row\",\n        \"aria-hidden\": \"true\",\n        children: p(o, {\n          \"aria-hidden\": \"true\",\n          colSpan: b.columnCount,\n          style: r({\n            \"--nextui--tableBodyEmptySpaceHeight\": E ? \"var(--nextui-space-10)\" : `calc(${B - l} * var(--nextui-space-14))`\n          }, (null == S ? void 0 : S.style) || {}),\n          css: {\n            height: \"var(--nextui--tableBodyEmptySpaceHeight)\"\n          }\n        })\n      });\n    }, [b.columnCount, M, B, E]);\n  return h(i, {\n    as: \"tbody\",\n    className: m(\"nextui-table-body\", S.className),\n    isInfinityScroll: E,\n    onScroll: l => {\n      if (!E) return;\n      const e = l.target;\n      var o, t;\n      e.scrollHeight - (e.scrollTop + 40) <= e.clientHeight && !L && (null == (o = b.body) || null == (t = o.props) || null == t.onLoadMore || t.onLoadMore());\n    },\n    css: {\n      pb: \"$10\",\n      position: \"relative\",\n      ...S.css,\n      ...(null == (k = b.body) || null == (H = k.props) ? void 0 : H.css)\n    },\n    ...S,\n    children: [l, null == M ? void 0 : M.map(l => l.hasChildNodes ? p(n, {\n      \"aria-hidden\": \"false\",\n      item: l,\n      state: y,\n      children: [...l.childNodes].map(l => {\n        var e;\n        return null != l && null != (e = l.props) && e.isSelectionCell ? p(s, {\n          cell: l,\n          state: y,\n          color: x,\n          animated: g\n        }, null == l ? void 0 : l.key) : p(a, {\n          cell: l,\n          state: y\n        }, null == l ? void 0 : l.key);\n      })\n    }, null == l ? void 0 : l.key) : null), !v && L && p(t, {\n      role: \"row\",\n      className: \"nextui-table-hidden-row\",\n      \"aria-hidden\": \"true\",\n      isAtEnd: M.length > 0,\n      isAbsolute: !E,\n      children: p(o, {\n        \"aria-hidden\": \"true\",\n        colSpan: b.columnCount,\n        children: p(u, {\n          color: x\n        })\n      })\n    }), A]\n  });\n};\nb.displayName = \"NextUI.TableBody\", b.toString = () => \".nextui-table-body\";\nexport default b;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}