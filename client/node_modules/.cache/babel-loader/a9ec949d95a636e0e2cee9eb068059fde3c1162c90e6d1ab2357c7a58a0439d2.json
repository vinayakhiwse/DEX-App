{"ast":null,"code":"\"use client\";\n\nimport { useSnippet } from \"./chunk-JKDRPOQT.mjs\";\n\n// src/snippet.tsx\nimport { useCallback, useMemo, cloneElement } from \"react\";\nimport { forwardRef } from \"@nextui-org/system\";\nimport { Tooltip } from \"@nextui-org/tooltip\";\nimport { CopyLinearIcon, CheckLinearIcon } from \"@nextui-org/shared-icons\";\nimport { Button } from \"@nextui-org/button\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar Snippet = forwardRef((props, ref) => {\n  const {\n    Component,\n    domRef,\n    preRef,\n    children,\n    slots,\n    classNames,\n    copied,\n    copyIcon = /* @__PURE__ */jsx(CopyLinearIcon, {}),\n    checkIcon = /* @__PURE__ */jsx(CheckLinearIcon, {}),\n    symbolBefore,\n    disableCopy,\n    disableTooltip,\n    hideSymbol,\n    hideCopyButton,\n    tooltipProps,\n    isMultiLine,\n    onCopy,\n    getSnippetProps,\n    getCopyButtonProps\n  } = useSnippet({\n    ...props,\n    ref\n  });\n  const TooltipContent = useCallback(({\n    children: children2\n  }) => /* @__PURE__ */jsx(Tooltip, {\n    ...tooltipProps,\n    isDisabled: copied || tooltipProps.isDisabled,\n    children: children2\n  }), [...Object.values(tooltipProps)]);\n  const contents = useMemo(() => {\n    if (hideCopyButton) {\n      return null;\n    }\n    const clonedCheckIcon = checkIcon && cloneElement(checkIcon, {\n      className: slots.checkIcon()\n    });\n    const clonedCopyIcon = copyIcon && cloneElement(copyIcon, {\n      className: slots.copyIcon()\n    });\n    const copyButton = /* @__PURE__ */jsxs(Button, {\n      ...getCopyButtonProps(),\n      children: [clonedCheckIcon, clonedCopyIcon]\n    });\n    if (disableTooltip) {\n      return copyButton;\n    }\n    return /* @__PURE__ */jsx(TooltipContent, {\n      children: copyButton\n    });\n  }, [slots, classNames == null ? void 0 : classNames.copyButton, copied, checkIcon, copyIcon, onCopy, TooltipContent, disableCopy, disableTooltip, hideCopyButton]);\n  const preContent = useMemo(() => {\n    if (isMultiLine && children && Array.isArray(children)) {\n      return /* @__PURE__ */jsx(\"div\", {\n        className: slots.content({\n          class: classNames == null ? void 0 : classNames.content\n        }),\n        children: children.map((t, index) => /* @__PURE__ */jsxs(\"pre\", {\n          className: slots.pre({\n            class: classNames == null ? void 0 : classNames.pre\n          }),\n          children: [!hideSymbol && /* @__PURE__ */jsx(\"span\", {\n            className: slots.symbol({\n              class: classNames == null ? void 0 : classNames.symbol\n            }),\n            children: symbolBefore\n          }), t]\n        }, `${index}-${t}`))\n      });\n    }\n    return /* @__PURE__ */jsxs(\"pre\", {\n      ref: preRef,\n      className: slots.pre({\n        class: classNames == null ? void 0 : classNames.pre\n      }),\n      children: [!hideSymbol && /* @__PURE__ */jsx(\"span\", {\n        className: slots.symbol({\n          class: classNames == null ? void 0 : classNames.symbol\n        }),\n        children: symbolBefore\n      }), children]\n    });\n  }, [children, hideSymbol, isMultiLine, symbolBefore, classNames == null ? void 0 : classNames.pre, slots]);\n  return /* @__PURE__ */jsxs(Component, {\n    ref: domRef,\n    ...getSnippetProps(),\n    children: [preContent, contents]\n  });\n});\nSnippet.displayName = \"NextUI.Snippet\";\nvar snippet_default = Snippet;\nexport { snippet_default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}