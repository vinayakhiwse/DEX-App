{"ast":null,"code":"import e, { useRef as t, useImperativeHandle as r, useLayoutEffect as s } from \"react\";\nimport o from \"../utils/with-defaults\";\nimport i from \"../input\";\nimport n from \"../use-resize\";\nimport a from \"../use-warning\";\nimport { excludedInputPropsForTextarea as m } from \"../utils/prop-types\";\nimport { __DEV__ as u } from \"../utils/assertion\";\nimport { calculateNodeHeight as c, getSizingData as l } from \"./utils\";\nimport { jsx as p } from \"react/jsx-runtime\";\nconst f = e.forwardRef((o, f) => {\n  const x = t(null),\n    h = e.useRef(0),\n    g = e.useRef(),\n    {\n      cacheMeasurements: d,\n      rows: w,\n      maxRows: y,\n      minRows: R,\n      onChange: H,\n      onHeightChange: j,\n      css: v,\n      ...C\n    } = o;\n  Object.keys(C).forEach(e => {\n    m.indexOf(e) > -1 && delete C[e];\n  });\n  const P = void 0 !== C.value;\n  u && C.style && (\"maxHeight\" in C.style && a(\"Using `style.maxHeight` for <Textarea/> is not supported. Please use `maxRows`.\"), \"minHeight\" in C.style && a(\"Using `style.minHeight` for <Textarea/> is not supported. Please use `minRows`.\")), r(f, () => x.current);\n  const T = () => {\n    const e = x.current,\n      t = d && g.current ? g.current : l(e);\n    if (!t) return;\n    g.current = t;\n    const [r, s] = c(t, e.value || e.placeholder || \"x\", w || R, w || y);\n    h.current !== r && (h.current = r, e.style.setProperty(\"height\", `${r}px`, \"important\"), j && j(r, {\n      rowHeight: s\n    }));\n  };\n  return \"undefined\" != typeof document && (s(T), n(T)), p(i, {\n    as: \"textarea\",\n    ref: x,\n    onChange: e => {\n      P || T(), H && H(e);\n    },\n    css: {\n      ...v\n    },\n    ...C\n  });\n});\nu && (f.displayName = \"NextUI.Textarea\"), f.toString = () => \".nextui-textarea\";\nexport default o(f, {\n  minRows: 3,\n  maxRows: 6,\n  cacheMeasurements: !0,\n  initialValue: \"\"\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}