{"ast":null,"code":"import { InvalidLegacyVError } from '../../errors/transaction.js';\nimport { concatHex } from '../data/concat.js';\nimport { trim } from '../data/trim.js';\nimport { toHex } from '../encoding/toHex.js';\nimport { toRlp } from '../encoding/toRlp.js';\nimport { assertTransactionEIP1559, assertTransactionEIP2930, assertTransactionLegacy } from './assertTransaction.js';\nimport { getTransactionType } from './getTransactionType.js';\nimport { serializeAccessList } from './serializeAccessList.js';\nexport function serializeTransaction(transaction, signature) {\n  const type = getTransactionType(transaction);\n  if (type === 'eip1559') return serializeTransactionEIP1559(transaction, signature);\n  if (type === 'eip2930') return serializeTransactionEIP2930(transaction, signature);\n  return serializeTransactionLegacy(transaction, signature);\n}\nfunction serializeTransactionEIP1559(transaction, signature) {\n  const {\n    chainId,\n    gas,\n    nonce,\n    to,\n    value,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    accessList,\n    data\n  } = transaction;\n  assertTransactionEIP1559(transaction);\n  const serializedAccessList = serializeAccessList(accessList);\n  const serializedTransaction = [toHex(chainId), nonce ? toHex(nonce) : '0x', maxPriorityFeePerGas ? toHex(maxPriorityFeePerGas) : '0x', maxFeePerGas ? toHex(maxFeePerGas) : '0x', gas ? toHex(gas) : '0x', to ?? '0x', value ? toHex(value) : '0x', data ?? '0x', serializedAccessList];\n  if (signature) serializedTransaction.push(signature.v === 27n ? '0x' : toHex(1),\n  // yParity\n  trim(signature.r), trim(signature.s));\n  return concatHex(['0x02', toRlp(serializedTransaction)]);\n}\nfunction serializeTransactionEIP2930(transaction, signature) {\n  const {\n    chainId,\n    gas,\n    data,\n    nonce,\n    to,\n    value,\n    accessList,\n    gasPrice\n  } = transaction;\n  assertTransactionEIP2930(transaction);\n  const serializedAccessList = serializeAccessList(accessList);\n  const serializedTransaction = [toHex(chainId), nonce ? toHex(nonce) : '0x', gasPrice ? toHex(gasPrice) : '0x', gas ? toHex(gas) : '0x', to ?? '0x', value ? toHex(value) : '0x', data ?? '0x', serializedAccessList];\n  if (signature) serializedTransaction.push(signature.v === 27n ? '0x' : toHex(1),\n  // yParity\n  signature.r, signature.s);\n  return concatHex(['0x01', toRlp(serializedTransaction)]);\n}\nfunction serializeTransactionLegacy(transaction, signature) {\n  const {\n    chainId = 0,\n    gas,\n    data,\n    nonce,\n    to,\n    value,\n    gasPrice\n  } = transaction;\n  assertTransactionLegacy(transaction);\n  let serializedTransaction = [nonce ? toHex(nonce) : '0x', gasPrice ? toHex(gasPrice) : '0x', gas ? toHex(gas) : '0x', to ?? '0x', value ? toHex(value) : '0x', data ?? '0x'];\n  if (signature) {\n    let v = 27n + (signature.v === 27n ? 0n : 1n);\n    if (chainId > 0) v = BigInt(chainId * 2) + BigInt(35n + signature.v - 27n);else if (signature.v !== v) throw new InvalidLegacyVError({\n      v: signature.v\n    });\n    serializedTransaction = [...serializedTransaction, toHex(v), signature.r, signature.s];\n  } else if (chainId > 0) {\n    serializedTransaction = [...serializedTransaction, toHex(chainId), '0x', '0x'];\n  }\n  return toRlp(serializedTransaction);\n}\n//# sourceMappingURL=serializeTransaction.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}