{"ast":null,"code":"import { mergeProps as $7CUUz$mergeProps, filterDOMProps as $7CUUz$filterDOMProps, useFormReset as $7CUUz$useFormReset } from \"@react-aria/utils\";\nimport { useFocusable as $7CUUz$useFocusable } from \"@react-aria/focus\";\nimport { usePress as $7CUUz$usePress } from \"@react-aria/interactions\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n    * Copyright 2020 Adobe. All rights reserved.\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License. You may obtain a copy\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software distributed under\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n    * OF ANY KIND, either express or implied. See the License for the specific language\n    * governing permissions and limitations under the License.\n    */\n\nfunction $d2c8e2b0480f3f34$export$cbe85ee05b554577(props, state, ref) {\n  let {\n    isDisabled = false,\n    isRequired = false,\n    isReadOnly = false,\n    value: value,\n    name: name,\n    children: children,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledby,\n    validationState = \"valid\",\n    isInvalid: isInvalid\n  } = props;\n  let onChange = e => {\n    // since we spread props on label, onChange will end up there as well as in here.\n    // so we have to stop propagation at the lowest level that we care about\n    e.stopPropagation();\n    state.setSelected(e.target.checked);\n  };\n  let hasChildren = children != null;\n  let hasAriaLabel = ariaLabel != null || ariaLabelledby != null;\n  if (!hasChildren && !hasAriaLabel) console.warn(\"If you do not provide children, you must specify an aria-label for accessibility\");\n  // This handles focusing the input on pointer down, which Safari does not do by default.\n  let {\n    pressProps: pressProps,\n    isPressed: isPressed\n  } = (0, $7CUUz$usePress)({\n    isDisabled: isDisabled\n  });\n  let {\n    focusableProps: focusableProps\n  } = (0, $7CUUz$useFocusable)(props, ref);\n  let interactions = (0, $7CUUz$mergeProps)(pressProps, focusableProps);\n  let domProps = (0, $7CUUz$filterDOMProps)(props, {\n    labelable: true\n  });\n  (0, $7CUUz$useFormReset)(ref, state.isSelected, state.setSelected);\n  return {\n    inputProps: (0, $7CUUz$mergeProps)(domProps, {\n      \"aria-invalid\": isInvalid || validationState === \"invalid\" || undefined,\n      \"aria-errormessage\": props[\"aria-errormessage\"],\n      \"aria-controls\": props[\"aria-controls\"],\n      \"aria-readonly\": isReadOnly || undefined,\n      \"aria-required\": isRequired || undefined,\n      onChange: onChange,\n      disabled: isDisabled,\n      ...(value == null ? {} : {\n        value: value\n      }),\n      name: name,\n      type: \"checkbox\",\n      ...interactions\n    }),\n    isSelected: state.isSelected,\n    isPressed: isPressed,\n    isDisabled: isDisabled,\n    isReadOnly: isReadOnly,\n    isInvalid: isInvalid || validationState === \"invalid\"\n  };\n}\nexport { $d2c8e2b0480f3f34$export$cbe85ee05b554577 as useToggle };\n//# sourceMappingURL=module.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}