{"ast":null,"code":"import { contract, tokenContract } from \"./contract\";\nimport { toEth, toWei } from \"./ether-utils\";\nexport const swapEthToToken = async (tokenName, amount) => {\n  try {\n    const tx = {\n      value: toWei(amount)\n    };\n    console.log(\"amouunt....\", tx);\n    const contractObj = await contract();\n    const data = await contractObj.swapEthtoToken(tokenName, tx);\n    const receipt = await data.wait();\n    return receipt;\n  } catch (error) {\n    console.log(\"error\", error);\n  }\n};\nexport const SwapTokenToEth = async (tokenName, amount) => {\n  try {\n    const tx = {\n      value: toWei(amount)\n    };\n    console.log(\"Tokenamouunt....\", tx);\n    const contractObj = await contract();\n    const data = await contractObj.swapTokentoEth(tokenName, tx);\n    const receipt = await data.wait();\n    return receipt;\n  } catch (error) {\n    console.log(\"error\", error);\n  }\n};\n//we need to approve tokens approve to be transferred from our account to the contract.\n_c = SwapTokenToEth;\nexport const increaseAllowances = async (tokenName, amount) => {\n  try {\n    const contractObj = await contract();\n    const address = await contractObj.getTokenAddress(tokenName);\n    const tokenContractObj = await tokenContract(address);\n    const data = await tokenContractObj.approve(`0x766F7F15f33d7A369e538c38bA7CeBC97f777c9e`, toWei(amount));\n    const receipt = await data.wait();\n    return receipt;\n  } catch (error) {\n    console.log(\"error\", error);\n  }\n};\n\n//here we checking valid allowances..\nexport const hasValidAllowance = async (owner, tokenName, amount) => {\n  const contractObj = await contract();\n  const address = await contractObj.getTokenAddress(tokenName);\n  const tokenContractObj = await tokenContract(address);\n  const data = await tokenContractObj.allowance(`0x766F7F15f33d7A369e538c38bA7CeBC97f777c9e`, owner);\n  const result = BigNumber.from(data.toString()).gte(BigNumber.from(toWei(amount)));\n  return result;\n};\nexport const SwapTokenToToken = async () => {};\n_c2 = SwapTokenToToken;\nexport const getTokenBalance = async (tokenName, address) => {\n  const contractObj = await contract();\n  const balance = contractObj.getBalance(tokenName, address);\n  return balance;\n};\nexport async function getTokenAddress(tokenName) {\n  try {\n    const contractObj = await contract();\n    const address = await contractObj.getTokenAddress(tokenName);\n    return address;\n  } catch (e) {\n    return e;\n  }\n}\nvar _c, _c2;\n$RefreshReg$(_c, \"SwapTokenToEth\");\n$RefreshReg$(_c2, \"SwapTokenToToken\");","map":{"version":3,"names":["contract","tokenContract","toEth","toWei","swapEthToToken","tokenName","amount","tx","value","console","log","contractObj","data","swapEthtoToken","receipt","wait","error","SwapTokenToEth","swapTokentoEth","_c","increaseAllowances","address","getTokenAddress","tokenContractObj","approve","hasValidAllowance","owner","allowance","result","BigNumber","from","toString","gte","SwapTokenToToken","_c2","getTokenBalance","balance","getBalance","e","$RefreshReg$"],"sources":["/home/hp/Desktop/client/src/utils/queries.js"],"sourcesContent":["import { contract, tokenContract } from \"./contract\";\nimport { toEth, toWei } from \"./ether-utils\";\n\n\nexport const swapEthToToken = async (tokenName, amount) => {\n  try {\n    const tx = { value: toWei(amount) };\n    console.log(\"amouunt....\", tx);\n    const contractObj = await contract();\n    const data = await contractObj.swapEthtoToken(tokenName, tx);\n    const receipt = await data.wait();\n    return receipt;\n  } catch (error) {\n    console.log(\"error\", error);\n  }\n};\n\nexport const SwapTokenToEth = async (tokenName, amount) => {\n  try {\n    const tx = { value: toWei(amount) };\n    console.log(\"Tokenamouunt....\", tx);\n    const contractObj = await contract();\n    const data = await contractObj.swapTokentoEth(tokenName, tx);\n    const receipt = await data.wait();\n    return receipt;\n  } catch (error) {\n    console.log(\"error\", error);\n  }\n};\n//we need to approve tokens approve to be transferred from our account to the contract.\nexport const increaseAllowances = async (tokenName, amount) => {\n  try {\n    const contractObj = await contract();\n    const address = await contractObj.getTokenAddress(tokenName);\n    const tokenContractObj = await tokenContract(address);\n    const data = await tokenContractObj.approve(\n      `0x766F7F15f33d7A369e538c38bA7CeBC97f777c9e`,\n      toWei(amount)\n    );\n    const receipt = await data.wait();\n    return receipt;\n  } catch (error) {\n    console.log(\"error\", error);\n  }\n};\n\n//here we checking valid allowances..\nexport const hasValidAllowance = async (owner, tokenName, amount) => {\n  const contractObj = await contract();\n  const address = await contractObj.getTokenAddress(tokenName);\n  const tokenContractObj = await tokenContract(address);\n  const data = await tokenContractObj.allowance(\n    `0x766F7F15f33d7A369e538c38bA7CeBC97f777c9e`,\n    owner\n  );\n  const result = BigNumber.from(data.toString()).gte(\n    BigNumber.from(toWei(amount)),\n  )\n\n  return result\n};\n\nexport const SwapTokenToToken = async () => {};\n\nexport const getTokenBalance = async (tokenName, address) => {\n  const contractObj = await contract();\n  const balance = contractObj.getBalance(tokenName, address);\n  return balance;\n};\n\nexport async function getTokenAddress(tokenName) {\n  try {\n    const contractObj = await contract();\n    const address = await contractObj.getTokenAddress(tokenName);\n    return address;\n  } catch (e) {\n    return e;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}