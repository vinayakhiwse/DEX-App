{"ast":null,"code":"\"use client\";\n\nimport { usePopoverContext } from \"./chunk-SQ3I4X62.mjs\";\n\n// src/popover-trigger.tsx\nimport { Children, cloneElement, useMemo } from \"react\";\nimport { forwardRef } from \"@nextui-org/system\";\nimport { pickChildren } from \"@nextui-org/react-utils\";\nimport { useAriaButton } from \"@nextui-org/use-aria-button\";\nimport { Button } from \"@nextui-org/button\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar PopoverTrigger = forwardRef((props, _) => {\n  const {\n    triggerRef,\n    getTriggerProps\n  } = usePopoverContext();\n  const {\n    children,\n    ...otherProps\n  } = props;\n  const child = useMemo(() => {\n    if (typeof children === \"string\") return /* @__PURE__ */jsx(\"p\", {\n      children\n    });\n    return Children.only(children);\n  }, [children]);\n  const {\n    onPress,\n    ...rest\n  } = useMemo(() => {\n    return getTriggerProps(mergeProps(child.props, otherProps), child.ref);\n  }, [getTriggerProps, child.props, otherProps, child.ref]);\n  const [, triggerChildren] = pickChildren(children, Button);\n  const {\n    buttonProps\n  } = useAriaButton({\n    onPress\n  }, triggerRef);\n  const hasNextUIButton = useMemo(() => {\n    return (triggerChildren == null ? void 0 : triggerChildren[0]) !== void 0;\n  }, [triggerChildren]);\n  return cloneElement(child, mergeProps(rest, hasNextUIButton ? {\n    onPress\n  } : buttonProps));\n});\nPopoverTrigger.displayName = \"NextUI.PopoverTrigger\";\nvar popover_trigger_default = PopoverTrigger;\nexport { popover_trigger_default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}